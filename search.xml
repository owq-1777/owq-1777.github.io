<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 服务器部署超详细踩坑教程</title>
    <url>/e823826f/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 部署方式有很多, 这里选择是默认的 Git 一键部署方式.<br>前提条件: 搭建好的 Hexo 本地环境, 具有公网IP的服务器, 具备ssh连接知识.</p>
</blockquote>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudA==">官方</span> （几乎没卵用）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">部署插件</span> （自定义配置会用到）</li>
</ul>
<h2 id="服务器环境准备"><a href="#服务器环境准备" class="headerlink" title="服务器环境准备"></a>服务器环境准备</h2><h3 id="安装-git-和-Nginx"><a href="#安装-git-和-Nginx" class="headerlink" title="安装 git 和 Nginx"></a>安装 git 和 Nginx</h3><ul>
<li><p>git<br>用来接收你的网站文件推送的，是实现一键部署的关键。</p>
</li>
<li><p>Nginx<br>一款反向代理网页服务器，让你的网站得以被外部访问的关键。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt install git nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum install -y git nginx</span><br></pre></td></tr></table></figure>



<h3 id="创建一个-git-用户-可选"><a href="#创建一个-git-用户-可选" class="headerlink" title="创建一个 git 用户(可选)"></a>创建一个 git 用户(可选)</h3><p>创建专门用来管理Git仓库的用户，主要是为了权限管理，可参考<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1vbi10aGUtU2VydmVyLVNldHRpbmctVXAtdGhlLVNlcnZlcg==">官方文档</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>

<h3 id="启用git-shell-可选"><a href="#启用git-shell-可选" class="headerlink" title="启用git shell(可选)"></a>启用<code>git shell</code>(可选)</h3><p>查看git-shell是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>

<p>不存在则添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看git-shell路径 默认：/usr/bin/git-shell</span></span><br><span class="line"><span class="built_in">which</span> git-shell</span><br><span class="line"><span class="comment"># 把路径添加到shells文件里</span></span><br><span class="line">sudo vim /etc/shells</span><br></pre></td></tr></table></figure>

<p>修改git用户默认shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chsh git -s $(<span class="built_in">which</span> git-shell)</span><br></pre></td></tr></table></figure>

<p>测试ssh连接，登录不成功即配置ok</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh git@&lt;IP地址&gt;</span><br></pre></td></tr></table></figure>



<h3 id="配置ssh公钥"><a href="#配置ssh公钥" class="headerlink" title="配置ssh公钥"></a>配置ssh公钥</h3><p>用户目录下创建 <code>.ssh</code> 文件夹并设置权限为 700</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用git用户需要进行切换</span></span><br><span class="line">su git</span><br><span class="line"></span><br><span class="line">mkdir ~/.ssh &amp;&amp; chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>

<p>创建 <code>authorized_keys </code> 文件, 将本机公钥复制到里面.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys	</span><br></pre></td></tr></table></figure>

<p>修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>



<h3 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h3><p>创建存放Blog的git仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /var/repo &amp;&amp; <span class="built_in">cd</span> /var/repo</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure>

<p>创建存放网站静态文件的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /var/www/hexo</span><br></pre></td></tr></table></figure>

<p>设置目录权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure>

<p><em>PS:仓库名<code>blog.git</code>、静态文件目录<code>hoxo</code>可自定义</em></p>
<h3 id="添加post-receive钩子"><a href="#添加post-receive钩子" class="headerlink" title="添加post-receive钩子"></a>添加<code>post-receive</code>钩子</h3><blockquote>
<p>官方参考文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyLyVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OS1HaXQtR2l0LSVFOSU5MiVBOSVFNSVBRCU5MA==">🚪</span></p>
</blockquote>
<p>在仓库下的 <code>hooks</code> 目录创建 <code>post-receive</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /var/repo/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>添加以下内容, 这个钩子会在你本地更新推送到服务器完成后执行, 更新你的网站内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>配置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/repo/blog.git/hooks/</span><br><span class="line">chown -R git:git /var/repo/</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>



<h3 id="检测仓库是否配置成功"><a href="#检测仓库是否配置成功" class="headerlink" title="检测仓库是否配置成功"></a>检测仓库是否配置成功</h3><p>能成功克隆则代表配置正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;使用的用户名&gt;@&lt;你的服务器IP&gt;:/var/repo/blog.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">git <span class="built_in">clone</span> git@8.8.8.8:/var/repo/blog.git</span><br></pre></td></tr></table></figure>



<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>这里修改下Nginx的默认站点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/</span><br><span class="line">vim sites-enabled/default</span><br></pre></td></tr></table></figure>

<p>里面长这样 ↓<br><img data-src="https://i.loli.net/2021/08/20/3aC8W5VJhrP4sBk.png"  /></p>
<p>这里修改root网站根目录就行了，其它可以保持不动</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">root /var/www/hexo;</span><br></pre></td></tr></table></figure>

<p>检查配置然后重载 Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>



<h2 id="本地部署配置"><a href="#本地部署配置" class="headerlink" title="本地部署配置"></a>本地部署配置</h2><blockquote>
<p>部署插件项目 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">🚪</span> </p>
</blockquote>
<p><strong>修改站点目录下<code>_config.yml</code>文件</strong></p>
<h3 id="单个存储部署配置"><a href="#单个存储部署配置" class="headerlink" title="单个存储部署配置"></a>单个存储部署配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@8.8.8.8:/var/repo/blog.git</span><br></pre></td></tr></table></figure>

<h3 id="多个存储库部署配置（可选）"><a href="#多个存储库部署配置（可选）" class="headerlink" title="多个存储库部署配置（可选）"></a>多个存储库部署配置（可选）</h3><p>这里我用来应付一些紧急情况，比如：服务器挂了、封了什么的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  repo:</span><br><span class="line">    server: git@8.8.8.8:/var/repo/blog.git</span><br><span class="line">    git: git@github.com:xx/xx.github.io.git</span><br><span class="line">    [自定义名称]: git仓库地址</span><br></pre></td></tr></table></figure>



<h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键部署</span></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Nginx</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅的使用WSL2-Kali桌面环境</title>
    <url>/202281bd/</url>
    <content><![CDATA[<blockquote>
<p>Win-KeX官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy93c2wvd2luLWtleC8=">🚪</span></p>
</blockquote>
<h2 id="安装win-kex"><a href="#安装win-kex" class="headerlink" title="安装win-kex"></a>安装win-kex</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install kali-win-kex</span><br></pre></td></tr></table></figure>

<h2 id="启动Win-Kex"><a href="#启动Win-Kex" class="headerlink" title="启动Win-Kex"></a>启动Win-Kex</h2><blockquote>
<p>Win-KeX 有三种启动模式</p>
</blockquote>
<ul>
<li><p>窗口模式<br>在专用窗口中启动 Kali Linux 桌面.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kex --win -s	</span><br></pre></td></tr></table></figure></li>
<li><p>远程连接（推荐）<br>微软自带的远程桌面工具，用过的都说好~</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kex --esm --ip -s</span><br></pre></td></tr></table></figure></li>
<li><p>无缝模式<br>在 Windows 和 Kali 应用程序和菜单之间共享 Windows 桌面.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kex --sl -s</span><br></pre></td></tr></table></figure></li>
</ul>
<p><em>注: 后面参数<code>-s</code>是启动声音支持.</em></p>
<h2 id="高分屏下的使用"><a href="#高分屏下的使用" class="headerlink" title="高分屏下的使用"></a>高分屏下的使用</h2><blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy9nZW5lcmFsLXVzZS9oaWRwaS8=">🚪</span></p>
</blockquote>
<p>菜单搜索<code>hidpi</code>, 打开它</p>
<p><img data-src="https://i.loli.net/2021/08/16/brmLSYtEOFvBypk.png"></p>
<p>默认缩放2X, 点击<code>是</code>确认, 然后开始愉快的Linux之旅吧~</p>
<p><img data-src="https://i.loli.net/2021/08/16/sM3KuCyPQkjitpD.png"></p>
<p><em>注:如果要自定义缩放因子请参考官方文档</em></p>
<h2 id="快捷启动"><a href="#快捷启动" class="headerlink" title="快捷启动"></a>快捷启动</h2><ul>
<li>添加到<code>Windows Termial</code>启动</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;576cd4fd-d6e2-4b99-9305-2e03a898af04&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --esm --wtstart -s&quot;</span>,</span><br><span class="line">&#125;，</span><br></pre></td></tr></table></figure>

<ul>
<li>设置命令别名</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> winkex=<span class="string">&#x27;kex --esm --ip -s&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>WSL2</tag>
        <tag>Kali Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2 安装配置</title>
    <url>/1fe3c459/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote>
<p>WSL1 升级 WSL2 官方文档传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvaW5zdGFsbC13aW4xMA==">🚪</span></p>
</blockquote>
<p><code>Win+S</code> 搜索, 用<strong>管理员权限</strong>运行<code>Windows PowerShell</code>, 或使用<code>Win+X</code>打开菜单运行选择<code>Windows PowerShell</code>.</p>
<p>ps:接下来的命令都是在这个终端上执行.</p>
<img data-src="https://i.loli.net/2021/08/12/C8BjhOs3pi4RwQY.png" />

<ol>
<li><h3 id="启用-WSL-子系统"><a href="#启用-WSL-子系统" class="headerlink" title="启用 WSL 子系统"></a>启用 WSL 子系统</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure></li>
<li><h3 id="启用虚拟机功能"><a href="#启用虚拟机功能" class="headerlink" title="启用虚拟机功能"></a>启用虚拟机功能</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p>ps:到了这一步要重启计算机下</p>
</li>
<li><h3 id="下载-Linux-内核更新包"><a href="#下载-Linux-内核更新包" class="headerlink" title="下载 Linux 内核更新包"></a>下载 Linux 内核更新包</h3><p>选择自己计算机内核架构对应的包, 一般为架构是64位也就是x64.</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp">x64更新包</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV9hcm02NC5tc2k=">ARM64更新包</span></li>
</ul>
</li>
<li><h3 id="将-WSL-2-设置为默认版本"><a href="#将-WSL-2-设置为默认版本" class="headerlink" title="将 WSL 2 设置为默认版本"></a>将 WSL 2 设置为默认版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h2><p>安装子系统方式有三, 可根据个人喜好选择.</p>
<ul>
<li><h3 id="微软商店搜索安装-推荐"><a href="#微软商店搜索安装-推荐" class="headerlink" title="微软商店搜索安装(推荐)"></a>微软商店搜索安装(推荐)</h3><ul>
<li><code>Win + S</code> 搜索打开 <code>Microsoft Store</code> 搜索 Linux 找到对应版本安装即可.</li>
</ul>
</li>
<li><h3 id="手动下载安装包安装"><a href="#手动下载安装包安装" class="headerlink" title="手动下载安装包安装"></a>手动下载安装包安装</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC1tYW51YWwjZG93bmxvYWRpbmctZGlzdHJpYnV0aW9ucw==">官方下载地址</span></li>
<li>其它Linux地址<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3l1azcvQXJjaFdTTA==">ArchWSL</span></li>
</ul>
</li>
</ul>
</li>
<li><h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><p>不同发行版安装命令, 使用<code>PowerShell</code>执行, 链接为包链接.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kali Linux</span></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://aka.ms/wsl<span class="literal">-kali</span><span class="literal">-linux</span><span class="literal">-new</span> <span class="literal">-OutFile</span> Ubuntu.appx <span class="literal">-UseBasicParsing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 20.04</span></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://aka.ms/wslubuntu2004 <span class="literal">-OutFile</span> Ubuntu.appx <span class="literal">-UseBasicParsing</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="WSL-位置移动-可选"><a href="#WSL-位置移动-可选" class="headerlink" title="WSL 位置移动(可选)"></a>WSL 位置移动(可选)</h2><blockquote>
<p>这里使用LxRunOffline工具进行移动 下载传送门 -&gt;  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0REb1NvbGl0YXJ5L0x4UnVuT2ZmbGluZS9yZWxlYXNlcw==">🚪</span></p>
</blockquote>
<p>如果担心C盘空间不够可以把WSL的安装位置移动到其它盘.</p>
<p>下载解压压缩包后, 在解压目录处打开命令行, 就可以运行以下命令了.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已安装 wsl 名称</span></span><br><span class="line">wsl <span class="literal">-l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动 wsl 到指定目录</span></span><br><span class="line">lxrunoffline m <span class="literal">-n</span> &lt;wsl<span class="literal">-name</span>&gt; <span class="literal">-d</span> &lt;<span class="built_in">dir</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">lxrunoffline m <span class="literal">-n</span> docker<span class="literal">-desktop</span> <span class="literal">-d</span> D:\OWQ\Docker\wsl\distro</span><br><span class="line">lxrunoffline m <span class="literal">-n</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> <span class="literal">-d</span> D:\OWQ\Docker\wsl\data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看wsl路径</span></span><br><span class="line">lxrunoffline di <span class="literal">-n</span> docker<span class="literal">-desktop</span></span><br><span class="line">lxrunoffline di <span class="literal">-n</span> docker<span class="literal">-desktop</span><span class="literal">-data</span></span><br></pre></td></tr></table></figure>



<h2 id="WSL-2-优化配置-可选"><a href="#WSL-2-优化配置-可选" class="headerlink" title="WSL 2 优化配置(可选)"></a>WSL 2 优化配置(可选)</h2><blockquote>
<p>配置文档官方传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvd3NsLWNvbmZpZyNjb25maWd1cmUtZ2xvYmFsLW9wdGlvbnMtd2l0aC13c2xjb25maWc=">🚪</span></p>
</blockquote>
<h3 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h3><p>WSL2内存占用高的问题至今存在，修改Windows位于用户目录<code>%home%</code>下的<code>.wslconfig</code>文件，若没有则自己创建一个.</p>
<p>ps:直接在资源管理器输入<code>%home%</code>按回车就可跳转, 若出错则是电脑环境变量没有配置好</p>
<p><img data-src="https://i.loli.net/2021/08/12/Q6MjR8sqKba3BOZ.png"></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主要配置内存和交换内存, 其它可以不用管, 看自己电脑配置设置.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line"># 给 WSL 2 虚拟机分配的内存大小 (默认为本机内存的50%）</span><br><span class="line">memory=8GB</span><br><span class="line"># 为 WSL 2 虚拟机分配的交换空间 (0 表示没有交换空间, 一般设置为本机内存的25%)</span><br><span class="line">swap=0</span><br><span class="line"># 自定义交换虚拟磁盘 vhd 的绝对路径 (可选配置)</span><br><span class="line">swapFile=&lt;path&gt;</span><br><span class="line"># 是否允许将 WSL 2 的端口转发到主机（默认为 true）</span><br><span class="line">localhostForwarding=true</span><br></pre></td></tr></table></figure>

<p>配置好文件后需要关闭WSL重新进入才会生效.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-shutdown</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>入门教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh + oh-my-zsh 简易配置</title>
    <url>/4bfebac1/</url>
    <content><![CDATA[<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p>使用系统对应的包管理器安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install zsh</span><br></pre></td></tr></table></figure>


<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><strong>curl</strong></td>
<td>sh -c &quot;$(curl -fsSL <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29obXl6c2gvb2hteXpzaC9tYXN0ZXIvdG9vbHMvaW5zdGFsbC5zaCkmcXVvdDs=">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></td>
</tr>
<tr>
<td><strong>wget</strong></td>
<td>sh -c &quot;$(wget -O- <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29obXl6c2gvb2hteXpzaC9tYXN0ZXIvdG9vbHMvaW5zdGFsbC5zaCkmcXVvdDs=">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></td>
</tr>
<tr>
<td><strong>fetch</strong></td>
<td>sh -c &quot;$(fetch -o - <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29obXl6c2gvb2hteXpzaC9tYXN0ZXIvdG9vbHMvaW5zdGFsbC5zaCkmcXVvdDs=">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></td>
</tr>
</tbody></table>
<h2 id="连接被墙问题"><a href="#连接被墙问题" class="headerlink" title="连接被墙问题"></a>连接被墙问题</h2><h3 id="方法一-科学上网"><a href="#方法一-科学上网" class="headerlink" title="方法一: 科学上网"></a>方法一: <del>科学上网</del></h3><blockquote>
<p>只可意会不可言传🐕</p>
</blockquote>
<h3 id="方法二-加速ssh登录"><a href="#方法二-加速ssh登录" class="headerlink" title="方法二: 加速ssh登录"></a>方法二: 加速ssh登录</h3><blockquote>
<p>适用于阿里云服务器😶</p>
</blockquote>
<p>修改 <code>/etc/ssh/ssh_config</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>取消以下行的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GSSAPIAuthentication no</span><br></pre></td></tr></table></figure>

<p>没有生效可以重启下sshd服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/sshd restart</span><br></pre></td></tr></table></figure>



<h3 id="方法三-映射hosts"><a href="#方法三-映射hosts" class="headerlink" title="方法三: 映射hosts"></a>方法三: 映射hosts</h3><blockquote>
<p>死马当活马医😂</p>
</blockquote>
<p>进入 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhZGRyZXNzLmNvbS8=">https://www.ipaddress.com/</span> 获取域名的映射IP</p>
<p><img data-src="https://i.loli.net/2021/08/16/v75LtJBaPjToRZ6.png"></p>
<p>修改<code>hosts</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>添加对应的ip映射即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">185.199.108.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><blockquote>
<p>主题文件位于 <code>.oh-my-zsh/themes</code> 目录下，可自定义修改</p>
</blockquote>
<h3 id="简单实用的"><a href="#简单实用的" class="headerlink" title="简单实用的"></a>简单实用的</h3><img data-src="https://i.loli.net/2021/08/06/51yhlPEQH7WOCnF.png" style="zoom:80%;" />

<p>修改 <code>~/.zshrc</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=&quot;ys&quot;</span><br></pre></td></tr></table></figure>



<h3 id="复杂炫酷的"><a href="#复杂炫酷的" class="headerlink" title="复杂炫酷的"></a>复杂炫酷的</h3><img data-src="https://i.loli.net/2021/08/06/K2MYl3UE5T1yDaI.png" style="zoom: 80%;" />

<h4 id="安装powerline主题"><a href="#安装powerline主题" class="headerlink" title="安装powerline主题"></a><strong>安装powerline主题</strong></h4><blockquote>
<p>传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plcmVteUZyZWVBZ2VudC9vaC1teS16c2gtcG93ZXJsaW5lLXRoZW1l">🚪</span></p>
</blockquote>
<p>克隆主题文件到本地</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme.git powerline</span><br></pre></td></tr></table></figure>

<p>运行安装脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> powerline &amp;&amp; ./install_in_omz.sh</span><br></pre></td></tr></table></figure>

<p>修改 <code>~/.zshrc</code> 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改主题</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerline&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改终端为256位颜色模式</span></span><br><span class="line"><span class="built_in">export</span> TERM=<span class="string">&quot;xterm-256color&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若终端符号显示不全或错位需要设置为 <code>TureType字体</code></p>
<p>如: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvbnNreS9GaXJhQ29kZQ==">FiraCode</span>、powerline</p>
</blockquote>
<p><strong>安装powerline字体</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure>

<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>修改<code>~/.zshrc</code>配置文件</p>
<p><strong>快速添加sudo</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># EscEsc to sudo</span><br><span class="line">bindkey -s &#x27;\e\e&#x27; &#x27;\C-asudo \C-e&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>WSL2下的代理配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Proxy config</span><br><span class="line">export hostip=$(cat /etc/resolv.conf | grep -oP &#x27;(?&lt;=nameserver\ ).*&#x27;)</span><br><span class="line">alias proxyon=&#x27;export https_proxy=&quot;http://$&#123;hostip&#125;:7890&quot; &amp;&amp; export http_proxy=&quot;http://$&#123;hostip&#125;:7890&quot; &amp;&amp; export all_proxy=&quot;socks5://$&#123;hostip&#125;:7890&quot;&#x27;</span><br><span class="line">alias unproxy=&#x27;unset http_proxy &amp;&amp; unset https_proxy &amp;&amp; unset all_proxy&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>常用别名设置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git log</span><br><span class="line">alias glog=&#x27;git log --graph --pretty=oneline --abbrev-commit&#x27;</span><br><span class="line"></span><br><span class="line"># ls -al</span><br><span class="line">alias ll=ls -al --show-control-chars --color $*</span><br><span class="line"></span><br><span class="line"># Other alias config</span><br><span class="line">alias ipython=&#x27;ipython3&#x27;</span><br><span class="line">alias npm=&#x27;sudo npm&#x27;</span><br><span class="line">alias typora=&#x27;typora.exe&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="配置其他用户可用"><a href="#配置其他用户可用" class="headerlink" title="配置其他用户可用"></a>配置其他用户可用</h2><blockquote>
<p>该方法虽然可以一次配置全局生效, 但会存在权限问题故不建议使用.</p>
<p>建议其它用户最好重新安装配置.</p>
</blockquote>
<p>为root用户建立软连接，即root用户使用当前用户的配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ln -s <span class="variable">$HOME</span>/.oh-my-zsh /root/.oh-my-zsh</span><br><span class="line">sudo ln -s <span class="variable">$HOME</span>/.zshrc /root/.zshrc</span><br></pre></td></tr></table></figure>

<p>切换root进入zsh，若提示无pyenv命令，则再建立软连接即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ln -s <span class="variable">$HOME</span>/.pyenv /root/.pyenv</span><br></pre></td></tr></table></figure>

<p>若提示目录权限警告，则在 .zshrc 文件前面添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZSH_DISABLE_COMPFIX=true</span><br></pre></td></tr></table></figure>

<p>若要单独配置，复制相应目录到对应用户主目录下即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp -r <span class="variable">$HOME</span>/.oh-my-zsh	/root</span><br><span class="line">sudo cp -r <span class="variable">$HOME</span>/.zshrc	/root</span><br></pre></td></tr></table></figure>



<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d0aW5nL2F1dG9qdW1w">autojump</span></p>
<blockquote>
<p>快速跳转目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/wting/autojump.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转目录安装</span></span><br><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">./uninstall.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">j &lt;部分目录名&gt;</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">zsh-autosuggestions</span><br><strong>极力推荐</strong></p>
<blockquote>
<p>历史命令灰色提示</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一行命令安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdWxpcmlzaC9naXQtb3Blbg==">git-open</span></p>
<blockquote>
<p>浏览器快速打开git项目</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一行命令安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/paulirish/git-open.git <span class="variable">$ZSH_CUSTOM</span>/plugins/git-open</span><br><span class="line"></span><br><span class="line"><span class="comment"># git仓库下运行打开</span></span><br><span class="line">git open</span><br></pre></td></tr></table></figure>



<p><strong>配置插件</strong></p>
<p><em>注意：插件中间是以空格分开</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh-autosuggestions git-open)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB 安装图文教程</title>
    <url>/9ec13a7e/</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>对于初学者, 只需要知道以下几点就行了</p>
<ul>
<li><p>MariaDB 是开源软件</p>
</li>
<li><p>MariaDB 是 MySQL 的分支</p>
</li>
<li><p>提供了与MySQL相同的功能</p>
</li>
<li><p>和 MySQL 一样是 <strong>关系型数据库</strong></p>
</li>
</ul>
<h2 id="下载-MariaDB-安装包"><a href="#下载-MariaDB-安装包" class="headerlink" title="下载 MariaDB 安装包"></a>下载 MariaDB 安装包</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tYXJpYWRiLmNvbS9kb3dubG9hZHMv">官网下载</span></p>
<p>打开后大概是这个样子，这里要注意下，不同时期网站的外观可能会不同，但软件的下载页地址是不会变的。</p>
<p><img data-src="https://i.loli.net/2021/08/20/Vfj2b1EIG7kPeqJ.png"></p>
<p>软件版本选择默认(最新版)就行了<br>手动选择下系统版本, Windows 64位选择 <code>MS Windows (64-bit)</code><br>如果不知道自己的系统是多少位的, 那就选择32位包 <code>MS Windows (32-bit)</code><br>选择好后, 你会发现下面的链接是会变的, 这就是你要下载的文件, 让我们点击 <code>Download</code> 开始下载</p>
<p><img data-src="https://i.loli.net/2021/08/20/d7mW9EbtUXYCKga.png"></p>
<p>点击后会跳转到 &quot;感谢下载&quot; 页面, 这时候等待下载链接建立起来就行了</p>
<p><img data-src="https://i.loli.net/2021/08/20/5tVcPRe2zJCSKkx.png"></p>
<h2 id="安装-MariaDB"><a href="#安装-MariaDB" class="headerlink" title="安装 MariaDB"></a>安装 MariaDB</h2><img data-src="https://i.loli.net/2021/08/20/uiKp4tRGkhT3QNa.png" style="zoom:50%;" />

<p>勾选&quot;接受使用许可条款&quot;, 然后<code>Next</code>进入下一步</p>
<img data-src="https://i.loli.net/2021/08/20/uiKp4tRGkhT3QNa.png" style="zoom:50%;" />

<p>左边区域是要安装的组件, 右边是对应组件的说明, 默认设置就行了<br><em>(之后如果要删除不需要的组件, 重新打开安装包下就可以删除了)</em><br>点击 <code>Browse...</code> , 修改下储存路径, 默认软件是放在 C盘 下的<br>这里推荐放在其它盘里, 比如我就放在 <code>D:\Environment\MariaDB</code> 这个路径下</p>
<img data-src="https://i.loli.net/2021/08/20/r86WxudzawCYyQe.png" style="zoom:50%;" />

<p>设置 <code>root</code> 用户密码, 输入两次密码以确认, <strong>密码要记牢, 忘记的话就只能重新安装了</strong>, 然后勾上 <code>Use UTF8 as default server&#39;s character set</code>, 这个是设置 <code>*UTF-8*</code> 为默认编码的, 防止中文乱码必备选项</p>
<img data-src="https://i.loli.net/2021/08/20/ux6fba57wJSVnQt.png" style="zoom:50%;" />



<p>设置服务名称, 这里我填的是 <code>MariaDB</code> , 名称是可以自定义的<br>设置访问端口号, 用来访问你的 MariaDB 数据库用的, 默认填 <code>3306</code> ,这个要牢记<br>下面的缓冲池大小不用管它, 对前期学习没有影响的</p>
<img data-src="https://i.loli.net/2021/08/20/LxMvgzNQCHsBnhj.png" style="zoom:50%;" />

<p>开始安装...</p>
<img data-src="https://i.loli.net/2021/08/20/5O7qNaJUpsingZE.png" style="zoom:50%;" />

<p>静待一会儿 就大功告成了~</p>
<img data-src="https://i.loli.net/2021/08/20/Ha4UBfxpK7wCjlQ.png" style="zoom:50%;" />
]]></content>
      <categories>
        <category>入门教程</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 开发环境搭建萌新教程</title>
    <url>/958bc56b/</url>
    <content><![CDATA[<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMv">官网下载</span>, 刚开始学习的话直接下载最新版本的就行了</p>
<p><img data-src="https://i.loli.net/2020/12/14/In5w1JRT84x6r9F.png"></p>
<p>默认下载为64位版本就行了 要下载32位请跳转<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvd2luZG93cy8=">详细页面下载</span></p>
<p><img data-src="https://i.loli.net/2020/12/14/n64fcbu2SiYC3LH.png"></p>
<h2 id="安装图示"><a href="#安装图示" class="headerlink" title="安装图示"></a>安装图示</h2><p>打开安装包 勾上环境变量 然后选择自定义安装</p>
<img data-src="https://i.loli.net/2020/12/14/nM2tKi6V9xXkbFW.png" style="zoom:50%;" />

<p>配置安装选项 依需求更改 默认全勾上就行了 &gt;&gt; <strong>Next</strong></p>
<img data-src="https://i.loli.net/2020/12/14/RhuSvx2MrnocHZ3.png" style="zoom:50%;" />

<p>勾上第一个选项 &quot;为全部用户安装&quot; &gt;&gt; <strong>Install</strong></p>
<img data-src="https://i.loli.net/2020/12/14/HzORUQhSbpG3BYL.png" style="zoom:50%;" />

<p>等待安装完成 然后点一下它 解除路径长度限制 &gt;&gt; <strong>Close</strong></p>
<img data-src="https://i.loli.net/2020/12/14/nM2tKi6V9xXkbFW.png" style="zoom:50%;" />



<h2 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h2><p>Win + R 打开&quot;运行&quot; 输入 cmd 回车打开</p>
<img data-src="https://i.loli.net/2020/12/14/gMwZ4NonyKHLheD.png" style="zoom:33%;" />

<p>输入 <code>python -V</code> 查看 python 版本 如成功输出则安装成功</p>
<img data-src="https://i.loli.net/2020/12/14/F4cD2jrbt5UMYp1.png" style="zoom:33%;" />









]]></content>
      <categories>
        <category>入门教程</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发环境搭建萌新教程</title>
    <url>/46118abd/</url>
    <content><![CDATA[<blockquote>
<p> 用最实用的方法来解决问题。<br>该教程不是用安装程序安装，而是通过设置环境变量，来实现基础Java环境搭建。</p>
</blockquote>
<h2 id="下载-Java-JDK"><a href="#下载-Java-JDK" class="headerlink" title="下载 Java JDK"></a>下载 Java JDK</h2><blockquote>
<p> 这里选择 Java8 进行演示，并提供3种下载方法参考~</p>
</blockquote>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UtZG93bmxvYWRzLmh0bWw=">官网</span></p>
<p>官网的 Java 8 只提供安装包下载 可以到其它地方下载打包好的JDK,这里使用 Java 11 做为示例</p>
<p><img data-src="https://i.loli.net/2021/08/19/O4AIUTYJmcksHuw.png"><br><img data-src="https://i.loli.net/2021/08/19/mBgFa8k3zsjTnGv.png"></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXp1bC5jb20vZG93bmxvYWRzL3p1bHUtY29tbXVuaXR5Lz9wYWNrYWdlPWpkaw==">Azul Zulu</span><br>网页往下拉，找到下载处，选择Java版本和系统，然后下载压缩包</p>
<p><img data-src="https://i.loli.net/2021/08/19/xEQOcRSJDZ6tfKC.png"></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTJoRnFBZ1BOQ0h6b09TV21xVG9qdmc=">网盘下载</span><br>提取码: 47w5</p>
</li>
<li><p>版本小解</p>
<ul>
<li>Java 是向后兼容的<ul>
<li>新版本仍能使用旧版本开发的程序</li>
</ul>
</li>
<li>Java 8 是目前市场份额最多版本（2020）<ul>
<li>很多公司仍在用 Java8 开发</li>
</ul>
</li>
<li>Java 11 是 Java8 后首个长期支持版本(LTS)<ul>
<li>市场份额在 Java8 之后 正在慢慢提升中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="解压-Java-JDK"><a href="#解压-Java-JDK" class="headerlink" title="解压 Java JDK"></a>解压 Java JDK</h2><p>记住解压路径 这是 Java JDK 的根目录</p>
<p><img data-src="https://i.loli.net/2020/12/14/HCFSBm7Gqduiks2.png"></p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p><code>Win + R</code> 运行 输入 <code>sysdm.cpl</code> 回车进入 系统属性配置</p>
<img data-src="https://i.loli.net/2020/12/14/WKR13OZAp6VlgBk.png" style="zoom:50%;" />

<p>依次点击 高级 &gt;&gt; 环境变量</p>
<img data-src="https://i.loli.net/2020/12/14/BKbvgq4auc1wLHP.png" style="zoom:50%;" />

<p>新建 变量名: <code>JAVA_HOME</code>  变量值: <code>C:\Java\jdk8.0.275</code>(刚刚解压的Java路径)</p>
<img data-src="https://i.loli.net/2020/12/14/LfgSD5NU7WbQYMX.png" style="zoom:50%;" />

<p>双击 <strong>Path</strong> 环境变量  进入编辑 (图示操作也是可以的)</p>
<img data-src="https://i.loli.net/2020/12/14/FIRayoU6ePZHxp1.png" style="zoom:50%;" />

<p>新建变量 <code>%JAVA_HOME%/bin</code></p>
<img data-src="https://i.loli.net/2020/12/14/gKhefUA69oJkjvM.png" style="zoom:50%;" />

<p>Win7 下添加环境变量要用<strong>分号</strong>隔开</p>
<img data-src="https://i.loli.net/2020/12/14/lW41HxYgnZjMDwy.png" style="zoom:80%;" />



<h2 id="检验环境"><a href="#检验环境" class="headerlink" title="检验环境"></a>检验环境</h2><p><code>Win +R</code> 运行 cmd 输入 <code>java -version</code>  输出版本信息</p>
<p><img data-src="https://i.loli.net/2020/12/14/EDz94pK85yNVYZw.png"></p>
<h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><ul>
<li>若是没有正常输出 请检查环境变量的<strong>路径</strong>是否配置正确</li>
<li>在 cmd 窗口 输入 <code>echo %JAVA_HOME%</code> 查看路径<ul>
<li>注意大小写正确 </li>
<li>斜杠是否写反</li>
<li><strong>分号</strong> 是否为英文符号</li>
</ul>
</li>
<li>在 cmd 窗口 输入 <code>echo %PATH%</code> 查看 是否有 <code>%JAVA_HOME%\bin</code><ul>
<li>系统会自动把 <code>%JAVA_HOME%</code> 变量转换成路径<br><img data-src="https://i.loli.net/2020/12/14/ZT9oN85rWe2jFqI.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>入门教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 命令</title>
    <url>/docker/</url>
    <content><![CDATA[<h2 id="源配置"><a href="#源配置" class="headerlink" title="源配置"></a>源配置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;debug&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;features&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;buildkit&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version		<span class="comment"># 版本信息</span></span><br><span class="line">docker info		<span class="comment"># 系统信息</span></span><br><span class="line">docker &lt;order&gt; --<span class="built_in">help</span>	<span class="comment"># 帮助命令</span></span><br></pre></td></tr></table></figure>



<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images			<span class="comment"># 查看镜像</span></span><br><span class="line">docker images -aq		<span class="comment"># 只显示镜像ID</span></span><br><span class="line">docker search &lt;image&gt;		<span class="comment"># 搜索镜像</span></span><br><span class="line">docker pull &lt;image&gt;		<span class="comment"># 下载镜像</span></span><br><span class="line">docker rmi -f &lt;image&gt;		<span class="comment"># 删除镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部镜像</span></span><br><span class="line">docker -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit 镜像</span></span><br><span class="line">docker commit  -m=<span class="string">&#x27;描述信息&#x27;</span> -a=<span class="string">&#x27;作者&#x27;</span> 容器id 目标镜像名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像重命名</span></span><br><span class="line">docker tag local-image:tagname new-repo:tagname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到Hub</span></span><br><span class="line">docker push new-repo:tagname</span><br></pre></td></tr></table></figure>



<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run [param] &lt;image&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># run参数说明</span></span><br><span class="line">  --name=<span class="string">&quot;Name&quot;</span>		<span class="comment"># 容器名字 用来区分</span></span><br><span class="line">  -d	<span class="comment"># 后台方式运行</span></span><br><span class="line">  -it	<span class="comment"># 使用交互方式运行</span></span><br><span class="line">  -p	<span class="comment"># 指定容器端口 -p 8080:8080</span></span><br><span class="line">    -p	 <span class="comment"># ip:主机端口:容器端口</span></span><br><span class="line">    -p	 <span class="comment"># 主机端口:容器端口</span></span><br><span class="line">    -p	 <span class="comment"># 容器端口</span></span><br><span class="line">  -P	<span class="comment"># 大写P 随机端口</span></span><br><span class="line"></span><br><span class="line">dockee ps	<span class="comment"># 查看正在运行容器</span></span><br><span class="line">docker ps -a	<span class="comment"># 查看全部容器</span></span><br><span class="line">docker rm &lt;containerID&gt; <span class="comment"># 删除容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker rm -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line">docker start &lt;container&gt;	<span class="comment"># 启动容器</span></span><br><span class="line">docker restart &lt;container&gt;	<span class="comment"># 重启容器</span></span><br><span class="line">docker stop &lt;container&gt;		<span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span> &lt;container&gt;		<span class="comment"># 强制停止容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> &lt;container&gt;		<span class="comment"># 开启新的终端</span></span><br><span class="line">docker attach &lt;container&gt;	<span class="comment"># 进入当前运行终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互模式进入正在运行容器 </span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container&gt; /bin/bash	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容器内拷贝文件到主机</span></span><br><span class="line">docker cp &lt;container&gt;:容器路径 主机路径</span><br><span class="line"><span class="comment"># 从主机内拷贝文件到容器</span></span><br><span class="line">docker cp 主机路径 &lt;container&gt;:容器路径</span><br></pre></td></tr></table></figure>



<h2 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止并退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 退出不停止（快捷键）</span></span><br><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure>

<h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 -v 挂载</span></span><br><span class="line">docker run -it -v &lt;主机目录&gt;:&lt;容器目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定路径挂载</span></span><br><span class="line">docker run -it -v /home/<span class="built_in">test</span>:/home centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名挂载 -v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /ect/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 volume 的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具名挂载</span></span><br><span class="line">docker run -d -P --name nginx02 -v v-nginx:/etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 -v 容器路径 ro rw 改变读写权限</span></span><br><span class="line">  ro	<span class="built_in">readonly</span> 		<span class="comment"># 只读</span></span><br><span class="line">  rw	readwrite		<span class="comment"># 可读可写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读权限设置</span></span><br><span class="line">dockers run -d -P --name nginx02 -v nginx:/etc/nginx:ro</span><br></pre></td></tr></table></figure>

<h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network ls		<span class="comment"># 查看网络列表</span></span><br><span class="line">docker network inspect &lt;name&gt;	<span class="comment"># 查看网络详情</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --net 指定网卡(docker默认是bridge)</span></span><br><span class="line">docker run -d -P --net bridge tomcat</span><br><span class="line">	<span class="comment"># 自定义网络配置</span></span><br><span class="line">    --driver bridge		<span class="comment"># 网络模式</span></span><br><span class="line">    --subnet 192.168.0.0/16	<span class="comment"># 子网</span></span><br><span class="line">    --gateway 192.168.0.1	<span class="comment"># 网关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟网卡</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器连接到网卡 打通容器与容器间网络</span></span><br><span class="line">docker network connect &lt;net&gt; &lt;ctn&gt;		<span class="comment"># 建立桥接</span></span><br><span class="line">docker network disconnect &lt;net&gt; &lt;ctn&gt;	<span class="comment"># 断开桥接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个容器两个ip</span></span><br><span class="line">docker network connect</span><br></pre></td></tr></table></figure>

<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器最后10条日志</span></span><br><span class="line">docker logs -f -t --tail 10 &lt;container&gt;</span><br></pre></td></tr></table></figure>



<h2 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect &lt;container&gt;</span><br></pre></td></tr></table></figure>



<h2 id="DockerFile-命令"><a href="#DockerFile-命令" class="headerlink" title="DockerFile 命令"></a>DockerFile 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成镜像</span></span><br><span class="line">docker build -f dockerfile文件 -t 镜像名:[tag] .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看初始化运行记录</span></span><br><span class="line">docker <span class="built_in">history</span> 镜像id</span><br></pre></td></tr></table></figure>



<h2 id="DockerFile-指令"><a href="#DockerFile-指令" class="headerlink" title="DockerFile 指令"></a>DockerFile 指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM		<span class="comment"># 基础镜像 一切从这里开始构建</span></span><br><span class="line">MAINTAINER	<span class="comment"># 镜像是谁写的 name+mail</span></span><br><span class="line">RUN		<span class="comment"># 镜像构建时候运行的命令</span></span><br><span class="line">ADD		<span class="comment"># 步骤 tomcat镜像 这个tomcat压缩包！添加内容</span></span><br><span class="line">WORKDIT		<span class="comment"># 镜像工作目录</span></span><br><span class="line">VOLUME		<span class="comment"># 挂载的目录</span></span><br><span class="line">EXPOST		<span class="comment"># 保留端口配置</span></span><br><span class="line">CMD		<span class="comment"># 指定这个容器启动时候运行的命令,自由最后一个会生效，可被替代</span></span><br><span class="line">ENTRTPOINT	<span class="comment"># 指定这个容器启动时候要运行的命令，可以追加命令</span></span><br><span class="line">ONBUILD		<span class="comment"># 被继承 DockerFIle 时候运行，触发命令</span></span><br><span class="line">COPY		<span class="comment"># 类型ADD,将文件拷贝到镜像</span></span><br><span class="line">ENV		<span class="comment"># 构建时候设置环境变量</span></span><br></pre></td></tr></table></figure>



<h2 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up                  <span class="comment"># 启动所有容器</span></span><br><span class="line">docker-compose up -d               <span class="comment"># 后台启动并运行所有容器</span></span><br><span class="line">docker-compose up --no-recreate -d <span class="comment"># 不重新创建已经停止的容器</span></span><br><span class="line">docker-compose up -d test2         <span class="comment"># 只启动test2这个容器</span></span><br><span class="line">docker-compose stop                <span class="comment"># 停止容器</span></span><br><span class="line">docker-compose start               <span class="comment"># 启动容器</span></span><br><span class="line">docker-compose down                <span class="comment"># 停止并销毁容器</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git 命令</title>
    <url>/git/</url>
    <content><![CDATA[<h2 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config user.name &lt;name&gt;</span><br><span class="line">git config user.email &lt;email&gt;</span><br><span class="line">git config --global user.name &lt;name&gt;	<span class="comment"># 配置全局用户名</span></span><br><span class="line">git config --global user.email &lt;email&gt;	<span class="comment"># 配置全局邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色标识（默认开启）</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy &lt;proxy&gt;</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy &lt;proxy&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config list</span><br></pre></td></tr></table></figure>



<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到index</span></span><br><span class="line">git add &lt;pathspec&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除index中的文件</span></span><br><span class="line">git rm &lt;pathspec&gt;</span><br><span class="line"><span class="comment"># 删除未提交缓存</span></span><br><span class="line">git rm --cached &lt;pathspec&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看仓库状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 查看分支合并</span></span><br><span class="line">git <span class="built_in">log</span> --graph</span><br><span class="line"><span class="comment"># 精简查看</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line">git commit -m &lt;message&gt;			<span class="comment"># 提交文件，附带版本说明</span></span><br><span class="line">git commit --amend -m &lt;message&gt;		<span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit -am &lt;message&gt;		<span class="comment"># 将add和commit合为一步</span></span><br><span class="line"></span><br><span class="line">git remote -v				<span class="comment"># 查看远程仓库地址</span></span><br><span class="line">git remote add origin &lt;url&gt;		<span class="comment"># 添加origin分支</span></span><br><span class="line">git remote rm origin			<span class="comment"># 删除origin分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新设置远程仓库地址</span></span><br><span class="line">git remote set-url origin &lt;git.url&gt;</span><br><span class="line"></span><br><span class="line">git pull	<span class="comment"># 拉 简写形式</span></span><br><span class="line">git pull origin master			<span class="comment"># 同步远程仓库更新到master分支</span></span><br><span class="line"></span><br><span class="line">git push	<span class="comment"># 推 简写形式</span></span><br><span class="line">git push -u origin master		<span class="comment"># 推送本地仓库到origin分支	</span></span><br></pre></td></tr></table></figure>



<h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 difference（差异）</span></span><br><span class="line">git diff		<span class="comment"># 工作区与暂存区</span></span><br><span class="line">git diff --cached 	<span class="comment"># 暂存区与版本库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到上一版本 HEAD~100 前100个版本 可指定&lt;版本号&gt;</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line">git branch &lt;branch&gt; 	<span class="comment"># 创建分支</span></span><br><span class="line">git branch -d &lt;branch&gt;	<span class="comment"># 删除分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复（删除）工作区更改</span></span><br><span class="line">git checkout</span><br><span class="line">git checkout &lt;branch&gt; 	<span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b &lt;branch&gt;<span class="comment"># 创建并切换分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch</span><br><span class="line"><span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git fetch --prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支但不丢弃分支信息</span></span><br><span class="line">git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建临时分支</span></span><br><span class="line">git stash</span><br><span class="line">git stash list	<span class="comment"># 查看临时分支</span></span><br><span class="line">git stash drop	<span class="comment"># 删除stash</span></span><br><span class="line">git stash apply	<span class="comment"># 恢复分支内容</span></span><br><span class="line">git stash pop	<span class="comment"># 恢复分支内容并删除stash</span></span><br><span class="line">git stash apply stash@&#123;0&#125;<span class="comment"># 恢复指定的stash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#复制一个特定的提交到当前分支</span></span><br><span class="line">git cherry-pick &lt;版本号&gt;</span><br></pre></td></tr></table></figure>



<h2 id="zsh-快捷命令"><a href="#zsh-快捷命令" class="headerlink" title="zsh 快捷命令"></a>zsh 快捷命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gapa    	git add --patch</span><br><span class="line">gc!   		git commit -v --amend</span><br><span class="line">gcl  		git <span class="built_in">clone</span> --recursive</span><br><span class="line">gclean    	git reset --hard &amp;&amp; git clean -dfx</span><br><span class="line">gcm    		git checkout master</span><br><span class="line">gcmsg    	git commit -m</span><br><span class="line">gco    		git checkout</span><br><span class="line">gd    		git diff</span><br><span class="line">gdca    	git diff --cached</span><br><span class="line">gp    		git push</span><br><span class="line">grbc    	git rebase --<span class="built_in">continue</span></span><br><span class="line">gst    		git status</span><br><span class="line">gup    		git pull --rebase</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>pacman 命令</title>
    <url>/pacman/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级整个系统，-y 更新数据库, -yy 强制更新, -u是升级软件</span></span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除软件缓存，即/var/cache/pacman/pkg目录下的文件</span></span><br><span class="line">pacman -Sc</span><br></pre></td></tr></table></figure>



<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在包数据库中查询软件</span></span><br><span class="line">pacman -Ss &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示软件的详细信息</span></span><br><span class="line">pacman -Si &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询已安装的软件包</span></span><br><span class="line">pacman -Qs &lt;package&gt;</span><br><span class="line"><span class="comment"># 查询本地安装包的详细信息</span></span><br><span class="line">pacman -Qi &lt;package&gt;</span><br><span class="line"><span class="comment"># 获取已安装软件所包含的文件的列表</span></span><br><span class="line">pacman -Ql &lt;package&gt;	</span><br></pre></td></tr></table></figure>



<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">pacman -S &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装不同仓库中的版本</span></span><br><span class="line">pacman -S &lt;extra&gt;/&lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从本地文件安装</span></span><br><span class="line">pacman -U package.tar.zx</span><br></pre></td></tr></table></figure>



<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除单个软件</span></span><br><span class="line">pacman -R &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定软件及其没有被其他已安装软件使用的依赖关系</span></span><br><span class="line">pacman -Rs &lt;package&gt; </span><br></pre></td></tr></table></figure>



<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示软件的依赖树</span></span><br><span class="line">pactree &lt;package&gt;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>pip 命令</title>
    <url>/pip/</url>
    <content><![CDATA[<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip list			# 显示已安装的库</span><br><span class="line">pip list -o			# 显示已过时的库</span><br><span class="line">pip show &lt;library&gt;		# 显示库信息</span><br><span class="line">pip install &lt;library&gt;		# 安装库</span><br><span class="line">pip install -U &lt;library&gt;	# 更新库</span><br><span class="line">pip uninstall &lt;library&gt;		# 卸载库</span><br><span class="line">pip check &lt;library&gt;		# 检查依赖</span><br><span class="line">pip [cmd] -h			# 显示帮助</span><br><span class="line"></span><br><span class="line"># 生成已按照包列表文件</span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"># 安装文件内所有包</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"># 设置默认使用pip3</span><br><span class="line">pip3 intall --upgrade pip</span><br></pre></td></tr></table></figure>



<h2 id="源配置"><a href="#源配置" class="headerlink" title="源配置"></a>源配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 临时使用 -i</span><br><span class="line">pip install [module] -i https://pypi.org/simple</span><br><span class="line"></span><br><span class="line"># 永久配置</span><br><span class="line"># 清华源</span><br><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"># 阿里源</span><br><span class="line"> pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"># 腾讯源</span><br><span class="line">pip config set global.index-url http://mirrors.cloud.tencent.com/pypi/simple</span><br><span class="line"># 豆瓣源</span><br><span class="line">pip config set global.index-url http://pypi.douban.com/simple/</span><br><span class="line"># 官方源</span><br><span class="line">pip config set global.index-url https://pypi.org/simple</span><br></pre></td></tr></table></figure>



<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apt install python3-pip</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>systemctl 命令</title>
    <url>/systemctl/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start &lt;servicename&gt;    	<span class="comment"># 启动服务</span></span><br><span class="line">systemctl stop &lt;servicename&gt;     	<span class="comment"># 关闭服务</span></span><br><span class="line">systemctl restart &lt;servicename&gt;		<span class="comment"># 重启服务</span></span><br><span class="line">systemctl reload &lt;servicename&gt;    	<span class="comment"># 重新加载配置文件</span></span><br><span class="line">systemctl status &lt;servicename&gt;    	<span class="comment"># 查看服务状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务的配置文件</span></span><br><span class="line">systemctl cat &lt;servicename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有服务的状态</span></span><br><span class="line">systemctl -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前系统服务状态</span></span><br><span class="line">systemctl list-units</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出服务的依赖关系</span></span><br><span class="line">systemctl list-dependencies &lt;servicename&gt;</span><br></pre></td></tr></table></figure>



<h2 id="电源相关"><a href="#电源相关" class="headerlink" title="电源相关"></a>电源相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl reboot		<span class="comment"># 重启机器</span></span><br><span class="line">systemctl poweroff		<span class="comment"># 关机</span></span><br><span class="line">systemctl <span class="built_in">suspend</span>		<span class="comment"># 挂起 - 睡眠 - 保存在內存</span></span><br><span class="line">systemctl hibernate		<span class="comment"># 休眠 - 断电 - 保存在硬盘</span></span><br><span class="line">systemctl hybrid-sleep		<span class="comment"># 混合休眠模式（同时休眠到硬盘并挂起）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统引导时间</span></span><br><span class="line">systemd-analyze time		<span class="comment"># 仅显示时间</span></span><br><span class="line">systemd-analyze blame		<span class="comment"># 显示每个进程消耗时间</span></span><br><span class="line">systemd-analyze plot		<span class="comment"># 生成网页</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>systemctl</tag>
      </tags>
  </entry>
</search>
