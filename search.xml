<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阿里云OSS 图床搭建</title>
    <url>/bee760ec/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>事情起因是smms的链接在网站备案后不知为何加载不了，而且还存在图片数据丢失情况，考虑到加载速度和稳定性，便决定使用阿里云OSS，用它来搭建个人图床。</p>
</blockquote>
<h3 id="说说优点"><a href="#说说优点" class="headerlink" title="说说优点"></a>说说优点</h3><ul>
<li>图床配置简单</li>
<li>数据不会丢失</li>
<li>国内访问速度快</li>
<li>阿里云服务支持</li>
</ul>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>通过IPC备案好的域名</li>
<li>使用过PicGo上传过图片</li>
</ul>
<h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h3><blockquote>
<p>完成配置好, 访问图片时将会是这样的一个流程</p>
</blockquote>
<ul>
<li>子域名(外网跳转) -&gt; CDN(内网访问) -&gt; OSS(资源文件)</li>
</ul>
<h2 id="创建OSS"><a href="#创建OSS" class="headerlink" title="创建OSS"></a>创建OSS</h2><p>打开阿里云 <span class="exturl" data-url="aHR0cHM6Ly9vc3MuY29uc29sZS5hbGl5dW4uY29tL292ZXJ2aWV3">对象存储OSS</span><br>链接失效的话, 手动点击右上角菜单找到<code>对象存储OSS</code>打开</p>
<p><em><img data-src="http://img.owq.world/2021/11/2044-022e40.png" style="zoom: 50%;" /></em></p>
<p>找到<code>Bucket列表</code>点击<code>创建Bucket</code></p>
<img data-src="http://img.owq.world/2021/11/1541-68155b.png" style="zoom:50%;" />

<p>这里注意几个点就行了，名称和地域自行选择，<strong>存储类型</strong>选择<strong>标准存储</strong>，<strong>读写权限</strong>选择<strong>私有</strong>（<em>之后通过CDN加速访问，不走公网流量</em>），其它服务一般用不到，所以选择不开通，然后点击确认。</p>
<img data-src="http://img.owq.world/2021/11/1543-217218.png" style="zoom:67%;" />

<p>然后看看你的 Bucket列表 是不是多了一个Bucket</p>
<p><img data-src="http://img.owq.world/2021/11/2055-4aa5bc.png"></p>
<h2 id="资源包购买"><a href="#资源包购买" class="headerlink" title="资源包购买"></a>资源包购买</h2><blockquote>
<p>如果你储存的数据只有几G, 甚至不到1G的话，是没有购买的必要的, 因为使用按量计算价格反而会比购买资源包便宜。</p>
<p>具体可以参考阿里云产品价格 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcmljZS9wcm9kdWN0">🚪</span></p>
</blockquote>
<p><img data-src="http://img.owq.world/2021/11/2125-8bdcd6.png"></p>
<p>按图示进入购买资源包页面</p>
<img data-src="http://img.owq.world/2021/11/2058-d7c8f7.png" style="zoom:50%;" />

<p>然后选择对应储存下单购买即可</p>
<p><img data-src="http://img.owq.world/2021/11/2123-4c2bfd.png"></p>
<h2 id="配置域名绑定"><a href="#配置域名绑定" class="headerlink" title="配置域名绑定"></a>配置域名绑定</h2><blockquote>
<p>只有绑定好域名后才能配置CDN加速.</p>
</blockquote>
<p>打开刚刚创建的<code>Bucket</code></p>
<img data-src="http://img.owq.world/2021/11/2151-6ad1d9.png" style="zoom:50%;" />

<p>进入传输管理, 点击绑定域名</p>
<img data-src="http://img.owq.world/2021/11/2204-213d3a.png" style="zoom:50%;" />



<p>输入要绑定的子域名, 勾上自动添加解析然后提交</p>
<img data-src="http://img.owq.world/2021/11/2210-888938.png" style="zoom: 50%;" />



<p>这时候访问域名会跳转到oss处, 但是因为<code>Bucket</code>设置的是私有, 所以外网是没法访问里面的文件, 但是通过CDN却可以, 所以接下来配置CDN<br><img data-src="http://img.owq.world/2021/11/2214-250364.png" style="zoom: 50%;" /></p>
<h2 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h2><blockquote>
<p>CDN可以让你图片加载更快, 我们还可以通过阿里云的CDN控制台配置第一道防护墙, 防止服务器被攻击, 跑太多流量而造成金钱损失.</p>
</blockquote>
<p>进入CDN配置</p>
<p><img data-src="http://img.owq.world/2021/11/2227-615f8f.png"></p>
<p><img data-src="http://img.owq.world/2021/11/2230-02d11e.png"></p>
<p>点击新增源站信息,选择刚才创建的oss</p>
<img data-src="http://img.owq.world/2021/11/2231-eac809.png" style="zoom:50%;" />

<p>  进入下一步</p>
<p><img data-src="http://img.owq.world/2021/11/2232-255f3f.png"></p>
<p>接下来就是一大堆可选配置了，这里稍微配置下安全性，其它的请自行阅读说明进行配置<del>绝对不是因为说明太详细我懒的写</del></p>
<p><img data-src="http://img.owq.world/2021/11/2237-4ccd07.png"></p>
<p>修改配置设置带宽封顶，可以避免被恶意攻击或刷流量而产生高额的CDN账单。</p>
<img data-src="http://img.owq.world/2021/11/2240-55d797.png" style="zoom: 50%;" />

<p>配置好后按进入下一步按系统提示配置CNAME，之后这些都可以修改，所以可以先走一遍流程然后回头再详细配置下。</p>
<h2 id="CDN配置"><a href="#CDN配置" class="headerlink" title="CDN配置"></a>CDN配置</h2><p>回到Bucket管理配置下缓存自动刷新，将其开启.</p>
<p><img data-src="http://img.owq.world/2021/11/1229-76fcbb.png"></p>
<p>全部勾上就行了<br><img data-src="http://img.owq.world/2021/11/1230-af5e88.png" style="zoom: 50%;" /></p>
<p>弄好后打开<code>CDN控制台</code><br><img data-src="http://img.owq.world/2021/11/2246-aba139.png" alt="image-20211124224602282" style="zoom:50%;" /></p>
<p>打开配置</p>
<p><img data-src="http://img.owq.world/2021/11/1243-0192a4.png"></p>
<p>配置回源设置，让通过CDN的链接可以访问到OSS里面内容，顺便指定下回源协议为http</p>
<p><img data-src="http://img.owq.world/2021/11/1246-6948f3.png"></p>
<p>其它配置可以等流程走完再去弄</p>
<h2 id="创建管理用户"><a href="#创建管理用户" class="headerlink" title="创建管理用户"></a>创建管理用户</h2><blockquote>
<p>专门用来访问oss存储的账户</p>
</blockquote>
<p>点击右上角的个人头像，打开访问控制</p>
<img data-src="http://img.owq.world/2021/11/2128-5d7085.png" style="zoom: 67%;" />

<p>创建用户</p>
<img data-src="http://img.owq.world/2021/11/2135-cdb631.png" style="zoom:50%;" />

<p>输入登录和显示名称,勾上 <code>Open API 调用访问</code>, 然后点击确认</p>
<img data-src="http://img.owq.world/2021/11/2136-25099d.png" style="zoom:50%;" />

<p>创建成功后记得保存好<code>AccessKey</code>信息</p>
<p><img data-src="http://img.owq.world/2021/11/2139-e4162c.png"></p>
<p>接下来为刚刚创建的用户添加权限</p>
<p><img data-src="http://img.owq.world/2021/11/2142-4c4b7f.png"></p>
<p>添加 <code>AliyunOSSFullAccess</code> 用来管理OSS, 确认完毕后管理用户就配置好了</p>
<img data-src="http://img.owq.world/2021/11/2143-3fcdd0.png" style="zoom:50%;" />

<h2 id="PicGO配置"><a href="#PicGO配置" class="headerlink" title="PicGO配置"></a>PicGO配置</h2><p>将刚刚生成的<code>AccessKey</code>信息填进去，然后填写你的<code>Bucket</code>名和存储区域还有域名，其它可以自定义。</p>
<img data-src="http://img.owq.world/2021/11/1214-2b0efd.png" style="zoom:50%;" />

<p>随便上传一张图像，然后访问图像地址正常显示就成功了，如有意外请参照阿里云帮助文档<del>笑</del>。</p>
<h2 id="OSS管理器"><a href="#OSS管理器" class="headerlink" title="OSS管理器"></a>OSS管理器</h2><blockquote>
<p>用oss搭建图床只是一个小小的功能，就比如你还可以把它当作一个人云盘存放资料用。</p>
</blockquote>
<p>这里推荐阿里云的可视化管理器，可以非常方便的操作里面的文件，已经进行一些配置。</p>
<p>github -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaXl1bi9vc3MtYnJvd3Nlcg==">https://github.com/aliyun/oss-browser</span><br>gitee -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9vc3MtYnJvd3Nlcg==">https://gitee.com/mirrors/oss-browser</span></p>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>oss</tag>
        <tag>cdn</tag>
      </tags>
  </entry>
  <entry>
    <title>scrcpy 优雅的安卓投屏工具</title>
    <url>/72a0046c/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbnltb2JpbGUvc2NyY3B5">🚪</span><br>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbnltb2JpbGUvc2NyY3B5L2Jsb2IvbWFzdGVyL1JFQURNRS56aC1IYW5zLm1k">🚪</span></p>
</blockquote>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li><p>下载包<br>版本页面 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbnltb2JpbGUvc2NyY3B5L3RhZ3M=">https://github.com/Genymobile/scrcpy/tags</span></p>
</li>
<li><p>解压(位置随意)</p>
<p>这里解压到<code>C:\Tools\scrcpy</code><br>因为包自带<code>adb</code>工具, 这里可以不用额外配置<code>adb</code>, 已配置好的可以忽略</p>
<img data-src="http://img.owq.world/2021/11/2124-7e8658.png" style="zoom:50%;" /></li>
<li><p>设置环境变量</p>
<p>系统属性 - 环境变量 - 新增Path变量 -添加解压目录<br><img data-src="http://img.owq.world/2021/11/2127-fb6625.png"></p>
</li>
<li><p>验证测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># adb 版本</span></span><br><span class="line">adb version</span><br><span class="line"></span><br><span class="line"><span class="comment"># scrcpy 版本</span></span><br><span class="line">scrcpy <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<img data-src="http://img.owq.world/2021/11/2124-6ca332.png" alt="" style="zoom:67%;" />

<p>成功输出版本信息则配置完成~</p>
</li>
</ul>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><ul>
<li><p>第一次使用, 先进行以下配置, 然后用<strong>数据线</strong>连接PC</p>
<ul>
<li>进入开发者选项 打开<strong>USB调试</strong></li>
<li>进入WiFi设置 配置<strong>静态IP</strong></li>
</ul>
</li>
<li><p>终端输入<code>scrcpy</code>直接进行有线连接控制(可选)</p>
</li>
<li><p>开放手机<code>TCP</code>服务端口, 用来进行无线连接(关键)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb tcpip 5555 <span class="comment"># 这里设置端口为5555</span></span><br></pre></td></tr></table></figure></li>
<li><p>多台设备连接<br>  如果<code>adb</code>已经连接多台设备的话, 运行以上命令会报<code>error: more than one device/emulator</code>错误, 这时你需要指定下<code>device</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看连接的设备</span></span><br><span class="line">adb devices</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 指定devices开放端口</span></span><br><span class="line">adb -s [devices] tcpip 5555</span><br></pre></td></tr></table></figure>

<p>  <strong>Tips:</strong> 只连接一个设备时可以不用指定<code>device</code></p>
</li>
</ul>
<p><em>PS: 手机重启后设置会丢失, 需要重新连接电脑配置</em> 到这里就可以断开数据线了😏</p>
<h3 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h3><p>使用你设置好的静态IP连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scrcpy -s [ip]:[port]</span></span><br><span class="line">scrcpy -s 192.168.0.90:5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上 --turn-screen-off 设置设备黑屏</span></span><br><span class="line"><span class="comment"># 启动后使用快捷键 Alt + o 更加方便哦</span></span><br><span class="line">scrcpy --turn-screen-off</span><br></pre></td></tr></table></figure>

<p>接下来开始愉快的投屏之旅吧🥳</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">快捷键</th>
</tr>
</thead>
<tbody><tr>
<td align="left">全屏</td>
<td align="left">Alt + f</td>
</tr>
<tr>
<td align="left">向左旋转屏幕</td>
<td align="left">Alt + ← (左箭头)</td>
</tr>
<tr>
<td align="left">向右旋转屏幕</td>
<td align="left">Alt + → <em>(<em>右箭头</em>)</em></td>
</tr>
<tr>
<td align="left">将窗口大小重置为1:1 (匹配像素)</td>
<td align="left">Alt + g</td>
</tr>
<tr>
<td align="left">将窗口大小重置为消除黑边</td>
<td align="left">Alt + w | 双击</td>
</tr>
<tr>
<td align="left">点按 <code>主屏幕</code></td>
<td align="left">Alt + h | 鼠标中键</td>
</tr>
<tr>
<td align="left">点按 <code>返回</code></td>
<td align="left">Alt + b | 鼠标右键</td>
</tr>
<tr>
<td align="left">点按 <code>切换应用</code></td>
<td align="left">Alt + s</td>
</tr>
<tr>
<td align="left">点按 <code>菜单</code> (解锁屏幕)</td>
<td align="left">Alt + m</td>
</tr>
<tr>
<td align="left">点按 <code>音量 + </code></td>
<td align="left">Alt + ↑ (上箭头)</td>
</tr>
<tr>
<td align="left">点按 <code>音量-</code></td>
<td align="left">Alt + ↓ (下箭头)</td>
</tr>
<tr>
<td align="left">点按 <code>电源</code></td>
<td align="left">Alt + p</td>
</tr>
<tr>
<td align="left">打开屏幕</td>
<td align="left">鼠标右键</td>
</tr>
<tr>
<td align="left">关闭设备屏幕 (但继续在电脑上显示)</td>
<td align="left">Alt + o</td>
</tr>
<tr>
<td align="left">打开设备屏幕</td>
<td align="left">Alt + Shift + o</td>
</tr>
<tr>
<td align="left">旋转设备屏幕</td>
<td align="left">Alt + r</td>
</tr>
<tr>
<td align="left">展开通知面板</td>
<td align="left">Alt + n</td>
</tr>
<tr>
<td align="left">收起通知面板</td>
<td align="left">Alt + Shift + n</td>
</tr>
<tr>
<td align="left">复制到剪贴板</td>
<td align="left">Alt + c</td>
</tr>
<tr>
<td align="left">剪切到剪贴板</td>
<td align="left">Alt + x</td>
</tr>
<tr>
<td align="left">同步剪贴板并粘贴</td>
<td align="left">Alt + v</td>
</tr>
<tr>
<td align="left">注入电脑剪贴板文本</td>
<td align="left">Alt + Shift + v</td>
</tr>
<tr>
<td align="left">打开/关闭FPS显示 (在 stdout)</td>
<td align="left">Alt + i</td>
</tr>
<tr>
<td align="left">捏拉缩放</td>
<td align="left">Ctrl + 按住并移动鼠标</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>好软工具</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划 打家劫舍</title>
    <url>/bd9e5b39/</url>
    <content><![CDATA[<h2 id="Question-Ⅰ🔎"><a href="#Question-Ⅰ🔎" class="headerlink" title="Question Ⅰ🔎"></a>Question Ⅰ🔎</h2><blockquote>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，<br>影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br><span class="line">     </span><br><span class="line">输入：[2,7,9,3,1]</span><br><span class="line">输出：12</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure>



<h2 id="Code-Ⅰ💡"><a href="#Code-Ⅰ💡" class="headerlink" title="Code Ⅰ💡"></a>Code Ⅰ💡</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house_rob_i</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当无房间时, 直接返回0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只有一个房间时, 那就只能偷它的了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置一个列表, 下标 i 对应着前 i 个房间可以偷取的最大金额</span></span><br><span class="line">    max_money = [<span class="number">0</span>, nums[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从第2个房间开始计算, 传入第1个房间后的列表</span></span><br><span class="line">    <span class="comment"># 这里需要注意的是, 取 max_money 对应值时, i 要进行加一</span></span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums[<span class="number">1</span>:]):</span><br><span class="line">        <span class="comment"># max_money[i+1] 表示不偷取当前房间的累计金额</span></span><br><span class="line">        <span class="comment"># max_money[i] + v 表示偷取当前房间的累计金额</span></span><br><span class="line">        <span class="comment"># 对比2种情况, 取最大值追加到 max_money 中</span></span><br><span class="line">        max_money.append(<span class="built_in">max</span>(max_money[i+<span class="number">1</span>], max_money[i] + v))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回最后一个值</span></span><br><span class="line">    <span class="keyword">return</span> max_money[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原题地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLw==">https://leetcode-cn.com/problems/house-robber/</span></p>
</blockquote>
<h2 id="Test-Ⅰ💠"><a href="#Test-Ⅰ💠" class="headerlink" title="Test Ⅰ💠"></a>Test Ⅰ💠</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;house_rob_i&#x27;</span>)</span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_i(nums))</span><br><span class="line">nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_i(nums))</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="Question-Ⅱ🔎"><a href="#Question-Ⅱ🔎" class="headerlink" title="Question Ⅱ🔎"></a>Question Ⅱ🔎</h2><blockquote>
<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。<br>这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。<br>同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,3,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</span><br><span class="line"></span><br><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>

<h2 id="Code-Ⅱ💡"><a href="#Code-Ⅱ💡" class="headerlink" title="Code Ⅱ💡"></a>Code Ⅱ💡</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house_rob_ii</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    <span class="comment"># 这里只需要在第一题的基础上考虑两种情况</span></span><br><span class="line">    <span class="comment"># 第一种: 包含首元素, 不包含尾元素</span></span><br><span class="line">    <span class="comment"># 第二种: 不包含首元素, 包含尾元素</span></span><br><span class="line">    <span class="comment"># 综上, 一行代码搞定~</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(rob_money_i(nums[<span class="number">1</span>:]), rob_money_i(nums[:-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原题地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLWlpLw==">https://leetcode-cn.com/problems/house-robber-ii/</span></p>
</blockquote>
<h2 id="Test-Ⅱ💠"><a href="#Test-Ⅱ💠" class="headerlink" title="Test Ⅱ💠"></a>Test Ⅱ💠</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;house_rob_ii&#x27;</span>)</span><br><span class="line">nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_ii(nums))</span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_ii(nums))</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="Question-Ⅲ🔎"><a href="#Question-Ⅲ🔎" class="headerlink" title="Question Ⅲ🔎"></a>Question Ⅲ🔎</h2><blockquote>
<p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。<br>这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。<br>一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于<strong>一棵二叉树</strong>”。<br>如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: [3,2,3,null,3,null,1]      3</span><br><span class="line">                                / <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                               2   3</span><br><span class="line">                                <span class="keyword">\ </span>  <span class="keyword">\ </span></span><br><span class="line">                                 3   1</span><br><span class="line">输出: 7 </span><br><span class="line">解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.</span><br><span class="line"></span><br><span class="line">输入: [3,4,5,1,3,null,1]     3</span><br><span class="line">                            / <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                           4   5</span><br><span class="line">                          / <span class="keyword">\ </span>  <span class="keyword">\ </span></span><br><span class="line">                         1   3   1</span><br><span class="line">输出: 9</span><br><span class="line">解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.</span><br></pre></td></tr></table></figure>



<h2 id="Code-Ⅲ💡"><a href="#Code-Ⅲ💡" class="headerlink" title="Code Ⅲ💡"></a>Code Ⅲ💡</h2><blockquote>
<p>进阶版来了, 这里考虑的同样是前一个房子和后一个房子是否相隔, 需要考虑的同样只有两种情况, 解题思路是一样的.<br>但要注意的是, 这是二叉树结构, 这样的话, 每个节点有两种情况, 而每个节点由有两个子节点(我们把空的节点当成0), 既有${2^n}$的可能, 因此采用递归的方式来解决问题会更方便.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house_rob_iii</span>(<span class="params">root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置递归函数, 返回偷取当前层和不偷取当前层的钱</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">node = root</span>) -&gt; <span class="built_in">tuple</span>:</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 当前节点为空, 当前层和不偷取当前层的钱都为0, 返回(0,0)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 递归获取左右子树能偷取的金额</span></span><br><span class="line">        L, R = dfs(node.left), dfs(node.right)</span><br><span class="line">		</span><br><span class="line">        <span class="comment"># node.val+(L[1]+R[1]) 表示偷取当前层和下下层的金额</span></span><br><span class="line">        <span class="comment"># max(L)+max(R) 表示当前层不偷,偷取下一层的金额</span></span><br><span class="line">        <span class="keyword">return</span> (node.val+(L[<span class="number">1</span>]+R[<span class="number">1</span>]), <span class="built_in">max</span>(L)+<span class="built_in">max</span>(R))</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 返回偷第一个房子金额和不偷第一个房子金额的最大值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dfs())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原题地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLWlpaS8=">https://leetcode-cn.com/problems/house-robber-iii/</span></p>
</blockquote>
<h2 id="Test-Ⅲ💠"><a href="#Test-Ⅲ💠" class="headerlink" title="Test Ⅲ💠"></a>Test Ⅲ💠</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;house_rob_iii&#x27;</span>)</span><br><span class="line">root = TreeNode(<span class="number">3</span>, TreeNode(<span class="number">2</span>,<span class="literal">None</span>,TreeNode(<span class="number">3</span>)), TreeNode(<span class="number">3</span>, <span class="literal">None</span>, TreeNode(<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(house_rob_iii(root))</span><br><span class="line">root = TreeNode(<span class="number">3</span>,  TreeNode(<span class="number">4</span>,TreeNode(<span class="number">1</span>),TreeNode(<span class="number">3</span>)), TreeNode(<span class="number">5</span>, <span class="literal">None</span>, TreeNode(<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(house_rob_iii(root))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>结构算法</category>
      </categories>
  </entry>
  <entry>
    <title>FastAPI 从入门到落地</title>
    <url>/1a0a2507/</url>
    <content><![CDATA[<blockquote>
<p>FastAPI 是一个现代、快速（高性能）的 Web 框架.</p>
</blockquote>
<blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC8=">🚪</span><br>项目源码 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpYW5nb2xvL2Zhc3RhcGk=">🚪</span><br>Uvicorn -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cudXZpY29ybi5vcmcv">🚪</span></p>
</blockquote>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fastapi uvicorn[standard]</span><br></pre></td></tr></table></figure>

<ul>
<li>uvicorn: ASGI(异步)服务器</li>
</ul>
<h2 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h2><p>创建<code>main.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关于函数是否使用<code>async</code>?</strong></p>
<blockquote>
<p>文档参考 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS9hc3luYy8jaW4tYS1odXJyeQ==">🚪</span></p>
</blockquote>
<p>如果不清楚函数内调用是否异步, 那就定义为普通函数, <code>Fastapi</code>会放到<code>thread pool</code>里执行; 如果有使用异步并且是在高并发情景下, 使用<code>async</code>速度会更快.</p>
<h2 id="运行启动"><a href="#运行启动" class="headerlink" title="运行启动"></a>运行启动</h2><h3 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>

<ul>
<li><code>main</code>: <code>main.py</code> 文件（一个 Python &quot;模块&quot;）。</li>
<li><code>app</code>: 在 <code>main.py</code> 文件中通过 <code>app = FastAPI()</code> 创建的对象。</li>
<li><code>--reload</code>: 让服务器在更新代码后重新启动。仅在开发时使用该选项。</li>
<li><code>--host</code>: 设置映射IP, 默认127.0.0.1</li>
<li><code>--port</code>: 设置映射端口, 默认8000</li>
</ul>
<p>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLzU/cT1zb21lcXVlcnk=">http://127.0.0.1:8000/items/5?q=somequery</span> 会返回 <code>&#123;&quot;item_id&quot;: 5, &quot;q&quot;: &quot;somequery&quot;&#125;</code></p>
<h3 id="程序内启动"><a href="#程序内启动" class="headerlink" title="程序内启动"></a>程序内启动</h3><p>可以用于调试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line"><span class="comment"># body...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>



<h2 id="自带文档"><a href="#自带文档" class="headerlink" title="自带文档"></a>自带文档</h2><ul>
<li>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2RvY3M=">http://127.0.0.1:8000/docs</span> 是由<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItdWk=">Swagger UI</span>自动生成的交互式文档</li>
<li>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL3JlZG9j">http://127.0.0.1:8000/redoc</span> 是由<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JlYmlsbHkvUmVEb2M=">ReDoc</span> 生成自动生成的交互式文档</li>
</ul>
<h2 id="设置枚举类型"><a href="#设置枚举类型" class="headerlink" title="设置枚举类型"></a>设置枚举类型</h2><p>导入<code>Enum</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="keyword">enum</span> <span class="keyword">import</span> Enum</span><br></pre></td></tr></table></figure>

<p>继承并声明枚举类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">ModelName</span>(<span class="symbol">str, <span class="symbol">Enum</span></span>):</span><br><span class="line">    <span class="symbol">alexnet</span> = &quot;<span class="symbol">alexnet</span>&quot;</span><br><span class="line">    <span class="symbol">resnet</span> = &quot;<span class="symbol">resnet</span>&quot;</span><br><span class="line">    <span class="symbol">lenet</span> = &quot;<span class="symbol">lenet</span>&quot;</span><br></pre></td></tr></table></figure>

<p>将其声明为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/models/&#123;model_name&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_model</span>(<span class="params">model_name: ModelName</span>):</span></span><br><span class="line">    <span class="keyword">if</span> model_name == ModelName.alexnet:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Deep Learning FTW!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> model_name.value == <span class="string">&quot;lenet&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;LeCNN all the images&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Have some residuals&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="设置请求体"><a href="#设置请求体" class="headerlink" title="设置请求体"></a>设置请求体</h2><h3 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h3><p>导入<code>BaseModel</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br></pre></td></tr></table></figure>

<p>继承并声明数据模型类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>将其声明为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">item: Item</span>):</span></span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;An optional description&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>: <span class="number">45.2</span>,</span><br><span class="line">  <span class="string">&quot;tax&quot;</span>: <span class="number">3.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个请求体参数"><a href="#多个请求体参数" class="headerlink" title="多个请求体参数"></a>多个请求体参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item, user: User</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item, <span class="string">&quot;user&quot;</span>: user&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;The pretender&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">42.0</span>,</span><br><span class="line">        <span class="string">&quot;tax&quot;</span>: <span class="number">3.2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;dave&quot;</span>,</span><br><span class="line">        <span class="string">&quot;full_name&quot;</span>: <span class="string">&quot;Dave Grohl&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单个请求体参数"><a href="#单个请求体参数" class="headerlink" title="单个请求体参数"></a>单个请求体参数</h3><p>导入<code>Body</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body</span><br></pre></td></tr></table></figure>

<p>使用<code>Body()</code>设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;item&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The pretender&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>: <span class="number">42.0</span>,</span><br><span class="line">        <span class="attr">&quot;tax&quot;</span>: <span class="number">3.2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套格式请求体"><a href="#嵌套格式请求体" class="headerlink" title="嵌套格式请求体"></a>嵌套格式请求体</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    url: HttpUrl</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    image: <span class="type">Optional</span>[Image] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;images&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://example.com/baz.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;The Foo live&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://example.com/dave.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;The Baz&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="为参数添加校验"><a href="#为参数添加校验" class="headerlink" title="为参数添加校验"></a>为参数添加校验</h2><h3 id="查询参数校验"><a href="#查询参数校验" class="headerlink" title="查询参数校验"></a>查询参数校验</h3><p>导入<code>Query</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Query</span><br></pre></td></tr></table></figure>

<p>将 <code>Query</code> 用作查询参数的默认值，并设置<code>min_length</code>为3,<code>max_length</code>为9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="comment"># Query 的第一个参数用于定义默认值</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, min_length=<span class="number">3</span>, max_length=<span class="number">9</span></span>)</span>):</span></span><br><span class="line">    results = &#123;<span class="string">&quot;items&quot;</span>: [&#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>其它校验参数(对应类型为int或float)</p>
<ul>
<li><code>gt</code>：大于（<code>g</code>reater <code>t</code>han）</li>
<li><code>ge</code>：大于等于（<code>g</code>reater than or <code>e</code>qual）</li>
<li><code>lt</code>：小于（<code>l</code>ess <code>t</code>han）</li>
<li><code>le</code>：小于等于（<code>l</code>ess than or <code>e</code>qual）</li>
</ul>
<p>也可以用正则表达式进行判断<code>regex</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Query(<span class="literal">None</span>, regex=<span class="string">r&quot;.&#123;3,9&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLz9xPTEy">http://127.0.0.1:8000/items/?q=12</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLz9xPTEyMzQ1Ng==">http://127.0.0.1:8000/items/?q=123456</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLz9xPTEyMzQ1Njc4OTA=">http://127.0.0.1:8000/items/?q=1234567890</span></li>
</ul>
<h3 id="使用参数别名"><a href="#使用参数别名" class="headerlink" title="使用参数别名"></a>使用参数别名</h3><p>在Query中使用<code>alias</code>, 设置<code>q</code>别名为<code>item-query</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/items/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, alias=<span class="string">&quot;item-query&quot;</span></span>)</span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;q&#x27;</span>: q&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zP3E9aGVsbG8=">http://127.0.0.1:8000/items?q=hello</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zP2l0ZW0tcXVlcnk9aGVsbG8=">http://127.0.0.1:8000/items?item-query=hello</span></li>
</ul>
<h3 id="路径参数校验"><a href="#路径参数校验" class="headerlink" title="路径参数校验"></a>路径参数校验</h3><p>导入<code>Path</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> <span class="type">Path</span></span><br></pre></td></tr></table></figure>

<p>使用方法和<code>Query</code>一样, 第一个参数为默认参数, 使用<code>...</code>表示该参数为必需参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    *,</span></span></span><br><span class="line"><span class="params"><span class="function">    item_id: <span class="built_in">int</span> = Path(<span class="params">..., title=<span class="string">&quot;The ID of the item to get&quot;</span>, ge=<span class="number">0</span>, le=<span class="number">1000</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="function">    size: <span class="built_in">float</span> = Query(<span class="params">..., gt=<span class="number">0</span>, lt=<span class="number">10.5</span></span>)</span></span></span><br><span class="line"><span class="params"><span class="function"></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLzEwMDA/c2l6ZT0xLjI=">http://127.0.0.1:8000/items/1000?size=1.2</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLzEwMA==">http://127.0.0.1:8000/items/100</span></li>
</ul>
<h3 id="请求体字段校验"><a href="#请求体字段校验" class="headerlink" title="请求体字段校验"></a>请求体字段校验</h3><blockquote>
<p>官方参考 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9ib2R5LWZpZWxkcy8=">🚪</span></p>
</blockquote>
<p><em><strong>注: Body、Query、Path的大部分参数是一样的</strong></em></p>
<h2 id="获取Header和Cookie"><a href="#获取Header和Cookie" class="headerlink" title="获取Header和Cookie"></a>获取Header和Cookie</h2><p>导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Header, Cookie</span><br></pre></td></tr></table></figure>

<p>声明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_items</span>(<span class="params">user_agent: <span class="type">Optional</span>[<span class="built_in">str</span>] = Header(<span class="params"><span class="literal">None</span></span>), ads_id: <span class="type">Optional</span>[<span class="built_in">str</span>] = Cookie(<span class="params"><span class="literal">None</span></span>):</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;User-Agent&quot;</span>: user_agent,</span></span></span><br><span class="line"><span class="params"><span class="function">    	<span class="string">&quot;ads_id&quot;</span>: ads_id</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="响应和输出"><a href="#响应和输出" class="headerlink" title="响应和输出"></a>响应和输出</h2><h3 id="设置输出模型"><a href="#设置输出模型" class="headerlink" title="设置输出模型"></a>设置输出模型</h3><p><code>@app</code>设置<code>response_model</code>参数, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, EmailStr</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserIn</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr</span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出模型不包含密码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserOut</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr</span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置对应输出模型</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/user/&quot;</span>, response_model=UserOut</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_user</span>(<span class="params">user: UserIn</span>):</span></span><br><span class="line">    <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<h3 id="设置响应不包含默认值"><a href="#设置响应不包含默认值" class="headerlink" title="设置响应不包含默认值"></a>设置响应不包含默认值</h3><p><code>@app</code>设置<code>response_model_exclude_unset</code>参数为<code>True</code>, 不想获取过多Json可以用的上.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>(<span class="params">BaseModel</span>):</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="built_in">float</span> = <span class="number">10.5</span></span><br><span class="line">    tags: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line"></span><br><span class="line">items = &#123;</span><br><span class="line">    <span class="string">&quot;foo&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;price&quot;</span>: <span class="number">50.2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span>, response_model=Item, response_model_exclude_unset=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> items[item_id]</span><br></pre></td></tr></table></figure>

<p>响应为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>: <span class="number">50.2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而不是</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;description&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;price&quot;</span>: <span class="number">50.2</span>,</span><br><span class="line">  <span class="attr">&quot;tax&quot;</span>: <span class="number">10.5</span>,</span><br><span class="line">  <span class="attr">&quot;tags&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置响应状态码"><a href="#设置响应状态码" class="headerlink" title="设置响应状态码"></a>设置响应状态码</h2><p><code>@app</code>设置参数<code>status_code</code>, 响应时会返回对应状态码, 不想暴露真实状态码时会很有用.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, status</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用status自带的变量映射,或者直接使用数字</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=status.HTTP_201_CREATED</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">create_item</span>(<span class="params">name: <span class="built_in">str</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;name&quot;</span>: name&#125;</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>PS: 到这里, 简单的API应用就没问题了, 接下来是一些进阶技巧</p>
</blockquote>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><blockquote>
<p>&quot;中间件&quot;是一个函数,它在每个<strong>请求</strong>被特定的<em>路径操作</em>处理之前,以及在每个<strong>响应</strong>返回之前工作.</p>
</blockquote>
<p>使用装饰器 <code>@app.middleware(&quot;http&quot;)</code>来添加中间件</p>
<ul>
<li>第一个参数: request</li>
<li>第二个参数: 一个函数 <code>call_next</code> (函数名可自定义)<ul>
<li>它将接收 <code>request</code> 作为参数</li>
<li>将 <code>request</code> 传递给相应的 路径操作</li>
<li>然后它将返回由相应的 路径操作 生成的 <code>response</code>.</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">num: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;num&quot;</span>: num&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">add_process_time_header</span>(<span class="params">request: Request, call_next</span>):</span></span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line">    process_time = time.time() - start_time</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加回调时间</span></span><br><span class="line">    response.headers[<span class="string">&quot;X-Process-Time&quot;</span>] = <span class="built_in">str</span>(process_time)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">set_status_code_eq_200</span>(<span class="params">request: Request, call_next</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;set code eq 200&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line">    </span><br><span class="line">	<span class="comment"># 修改所有响应状态码一直为200</span></span><br><span class="line">    response.status_code = <span class="number">200</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>

<p>使用调试模式测试一下, 顺便观察下中间件的执行顺序</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwLz9udW09MjI=">http://127.0.0.1:8000/?num=22</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwLz9udW09c3Ry">http://127.0.0.1:8000/?num=str</span></li>
</ul>
<p>执行顺序是从下往上先执行<code>call_next</code>前的代码,然后执行<code>call_next</code>后, 再从上往下执行<code>call_next</code>后的部分, 可以看成栈的操作顺序, 先入后出, 后入先出.</p>
<h3 id="跨域资源共享"><a href="#跨域资源共享" class="headerlink" title="跨域资源共享"></a>跨域资源共享</h3><blockquote>
<p>指浏览器中运行的前端拥有与后端通信的 JavaScript 代码，而后端处于与前端不同的「源」的情况.</p>
</blockquote>
<p>源是协议（<code>http</code>，<code>https</code>）、域（<code>myapp.com</code>，<code>localhost</code>，<code>localhost.tiangolo.com</code>）以及端口（<code>80</code>、<code>443</code>、<code>8080</code>）的组合。</p>
<p>因此，这些都是不同的源：</p>
<ul>
<li><code>http://localhost</code></li>
<li><code>https://localhost</code></li>
<li><code>http://localhost:8080</code></li>
</ul>
<p>即使它们都在 <code>localhost</code> 中，但是它们使用不同的协议或者端口，所以它们都是不同的「源」</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="comment"># 导入 CORSMiddleware</span></span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个允许的源列表（由字符串组成）</span></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">&quot;http://localhost.tiangolo.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://localhost.tiangolo.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://localhost&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其作为「中间件」添加到你的 FastAPI 应用中</span></span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,	<span class="comment"># 允许凭证（授权 headers，Cookies 等）</span></span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],  <span class="comment"># 特定的 HTTP 方法（POST，PUT）或者使用通配符 &quot;*&quot; 允许所有方法</span></span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],  <span class="comment"># 特定的 HTTP headers 或者使用通配符 &quot;*&quot; 允许所有 headers。</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>其它应用 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC9hZHZhbmNlZC9taWRkbGV3YXJlLw==">🚪</span></p>
</blockquote>
<h2 id="创建后台任务"><a href="#创建后台任务" class="headerlink" title="创建后台任务"></a>创建后台任务</h2><blockquote>
<p>使用场景: 邮件发送, 图片渲染下载...</p>
</blockquote>
<p>使用<code>BackgroundTasks</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> BackgroundTasks, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_notification</span>(<span class="params">email: <span class="built_in">str</span>, message=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> email_file:</span><br><span class="line">        content = <span class="string">f&quot;notification for <span class="subst">&#123;email&#125;</span>: <span class="subst">&#123;message&#125;</span>&quot;</span></span><br><span class="line">        email_file.write(content)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/send-notification/&#123;email&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">send_notification</span>(<span class="params">email: <span class="built_in">str</span>, background_tasks: BackgroundTasks</span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 先方法名后传参</span></span><br><span class="line">    background_tasks.add_task(write_notification, email, message=<span class="string">&quot;some notification&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Notification sent in the background&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<h2 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h2><blockquote>
<p>以下部分属于比较少用到或者是知识量较多需要深入学习的, 故只提供官方链接以供参考</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9leHRyYS1kYXRhLXR5cGVzLw==">使用其它数据类型</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9yZXF1ZXN0LWZpbGVzLw==">设置请求文件</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9oYW5kbGluZy1lcnJvcnMv">错误异常处理</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9ib2R5LXVwZGF0ZXMv">请求体更新数据</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9zcWwtZGF0YWJhc2VzLw==">使用关系数据库</span></li>
</ul>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>FastAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 线程进程相关库的简单应用</title>
    <url>/f89f9ea4/</url>
    <content><![CDATA[<h2 id="🎇简单了解"><a href="#🎇简单了解" class="headerlink" title="🎇简单了解"></a>🎇简单了解</h2><h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><ul>
<li>每个程序至少有一个进程，不同进程之间不共享内存</li>
<li>一个进程包含一个或多个线程，线程共享着同一个进程的内存</li>
<li>在操作系统保护模式下，一个进程崩溃不会对其他进程产生影响，而线程没有独立的内存空间，但它有自己的堆栈和局部变量</li>
<li>线程可以通过共享变量的方式实现多线程直接的通信，而进程的通信主要通过消息传递。相对共享变量而言，消息传递会消耗更多资源</li>
</ul>
<h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><ul>
<li>同步是指不同的程序单元为了完成某个任务通过某种通信方式协调一致，意味着有序</li>
<li>异步指不同程序单元之间不需要协调也可单独完成任务</li>
</ul>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><blockquote>
<p>来自 Erlang之父 Joe Armstrong 的解释</p>
<p>并发：两个队列和一台咖啡机<br>并行：两个队列和两台咖啡机</p>
</blockquote>
<p><img data-src="http://img.owq.world/2021/11/2134-81fe70.png"></p>
<ul>
<li>并发表示<strong>多个程序可以在同一个时间段内被执行</strong></li>
<li>并行表示多个程序可以在<strong>同一时刻</strong>被运行</li>
</ul>
<h2 id="Threading库"><a href="#Threading库" class="headerlink" title="Threading库"></a>Threading库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longtime</span>(<span class="params">n</span>):</span> <span class="comment"># 需要被线程执行的函数</span></span><br><span class="line">    time.sleep(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 实例化线程</span></span><br><span class="line">    t = threading.Thread(target=longtime, args=[<span class="number">10</span>])</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用 YAML 配置带有颜色输出的loging</title>
    <url>/dfbb4c9/</url>
    <content><![CDATA[<blockquote>
<p>官方教程文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9ob3d0by9sb2dnaW5nLmh0bWw=">🚪</span><br>官方配置文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2xvZ2dpbmcuY29uZmlnLmh0bWw=">🚪</span><br>格式属性表 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtdHcvMy9saWJyYXJ5L2xvZ2dpbmcuaHRtbCNsb2dnaW5nLkxvZ1JlY29yZA==">🔎</span><br>如何写好日志 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU5NTE5">🔎</span></p>
</blockquote>
<h2 id="⭐常用名词"><a href="#⭐常用名词" class="headerlink" title="⭐常用名词"></a>⭐常用名词</h2><table>
<thead>
<tr>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Logger</td>
<td>日志记录程序</td>
</tr>
<tr>
<td>Handler</td>
<td>处理程序</td>
</tr>
<tr>
<td>Formatter</td>
<td>格式化程序</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>危险</td>
</tr>
<tr>
<td>ERROR</td>
<td>错误</td>
</tr>
<tr>
<td>WARNING</td>
<td>警告</td>
</tr>
<tr>
<td>INFO</td>
<td>信息</td>
</tr>
<tr>
<td>DEBUG</td>
<td>调试</td>
</tr>
</tbody></table>
<h2 id="🌠先有个印象"><a href="#🌠先有个印象" class="headerlink" title="🌠先有个印象"></a>🌠先有个印象</h2><p>日志库采用模块化方法，并提供几类组件：记录器、处理器、过滤器和格式器。</p>
<ul>
<li>记录器暴露了应用程序代码直接使用的接口。</li>
<li>处理器将日志记录（由记录器创建）发送到适当的目标。</li>
<li>过滤器提供了更精细的附加功能，用于确定要输出的日志记录。(本文不涉及)</li>
<li>格式器指定最终输出中日志记录的样式。</li>
</ul>
<h2 id="🧿最小使用案例"><a href="#🧿最小使用案例" class="headerlink" title="🧿最小使用案例"></a>🧿最小使用案例</h2><p><strong>使用根记录器输出日志</strong><br>简单了解日志输出方式的两种方式和日志输出的等级</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认根记录只记录WARNING以上的日志, 所以使用debug和info是不会被输出的</span></span><br><span class="line"><span class="comment"># logging.basicConfig(level=logging.DEBUG) # 配置下日志等级就输出了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志文件路径, 会写到文件里</span></span><br><span class="line"><span class="comment"># logging.basicConfig(filename=&#x27;example.log&#x27;, level=logging.INFO)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 根日志记录器 输出(记录等级从高到低)</span></span><br><span class="line">logging.debug(<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;INFO&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;WARNING&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;ERROR&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;CRITICAL&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>格式化日志输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># format 格式化输出形式</span></span><br><span class="line"><span class="comment"># 使用 datefmt 可以自定义时间输出格式</span></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(levelname)s: %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%m/%d/%Y %I:%M:%S %p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging.warning(<span class="string">&#x27;再不签到就迟到了!&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="🌈带点颜色输出"><a href="#🌈带点颜色输出" class="headerlink" title="🌈带点颜色输出"></a>🌈带点颜色输出</h2><blockquote>
<p>基本使用, 了解3大组件记录器、处理器和格式器之间的关系</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> colorlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色配置</span></span><br><span class="line"><span class="comment"># 可用: black red green yellow blue purple cyan white, 和 bold_**</span></span><br><span class="line">log_colors = &#123;</span><br><span class="line">    <span class="string">&#x27;DEBUG&#x27;</span>: <span class="string">&#x27;cyan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;INFO&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;WARNING&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ERROR&#x27;</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CRITICAL&#x27;</span>: <span class="string">&#x27;bold_red&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;logger_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建控制台处理器, 会在控制台输出日志</span></span><br><span class="line">console_handler = logging.StreamHandler()</span><br><span class="line"><span class="comment"># 创建文件处理器, 会记录日志到test.log</span></span><br><span class="line">file_handler = logging.FileHandler(filename=<span class="string">&#x27;test.log&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line">console_handler.setLevel(logging.DEBUG)</span><br><span class="line">file_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用指定的格式字符串初始化格式化程序</span></span><br><span class="line">file_formatter = logging.Formatter(</span><br><span class="line">    fmt=<span class="string">&#x27;[%(asctime)s %(levelname)s] %(filename)s -&gt; %(funcName)s line:%(lineno)d: %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d  %H:%M:%S&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 使用 colorlog 的格式化程序</span></span><br><span class="line">console_formatter = colorlog.ColoredFormatter(</span><br><span class="line">    fmt=<span class="string">&#x27;%(log_color)s[%(asctime)s %(levelname)s] %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d  %H:%M:%S&#x27;</span>,</span><br><span class="line">    log_colors=log_colors</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置格式化程序</span></span><br><span class="line">console_handler.setFormatter(console_formatter)</span><br><span class="line">file_handler.setFormatter(file_formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加处理器到记录器中</span></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭IO流, 非常重要 </span></span><br><span class="line">console_handler.close()</span><br><span class="line">file_handler.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出日志</span></span><br><span class="line">logger.info(<span class="string">&#x27;一切正常~&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;报错啦!!&#x27;</span>)</span><br><span class="line">logger.debug(<span class="string">&#x27;找bug中...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前处理器</span></span><br><span class="line"><span class="built_in">print</span>(logger.handlers)</span><br></pre></td></tr></table></figure>



<h2 id="✨使用YAML配置日志"><a href="#✨使用YAML配置日志" class="headerlink" title="✨使用YAML配置日志"></a>✨使用YAML配置日志</h2><blockquote>
<p>接触YAML是在搭建博客时, 发现了如此简洁优雅的文件格式, 搭项目时考虑到配置的易用性和易读性, 随即便折腾起来了φ(*￣0￣)</p>
<p>pyyaml官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9weXlhbWwub3JnL3dpa2kvUHlZQU1MRG9jdW1lbnRhdGlvbg==">🚪</span></p>
</blockquote>
<p>在<code>conf</code>目录下创建<code>log_conf.yml</code>, 存放配置, 配置最后将转为dist传入到<code>dictConfig()</code>里, 这也是进一步了解logging的过程.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 将信息传播到配置文件的跟日志记录器中</span></span><br><span class="line"><span class="attr">disable_existing_loggers:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化器</span></span><br><span class="line"><span class="attr">formatters:</span></span><br><span class="line">  <span class="attr">file:</span> <span class="comment"># 格式化器id, 自定义</span></span><br><span class="line">    <span class="attr">datefmt:</span> <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">&#x27;%(asctime)s.%(msecs)03d|%(levelname)s|[%(process)d,%(thread)d]|[%(filename)s,%(lineno)d,%(funcName)s]|%(message)s&#x27;</span></span><br><span class="line">  <span class="attr">color:</span></span><br><span class="line">    <span class="comment"># 使用特殊键&#x27;()&#x27;传入格式化器, 下面的配置会作为参数传入, 同理, 处理器、过滤器也支持自定义对象</span></span><br><span class="line">    <span class="string">():</span> <span class="string">&#x27;colorlog.ColoredFormatter&#x27;</span> <span class="comment"># =&gt; colorlog.ColoredFormatter(**kwargs)</span></span><br><span class="line">    <span class="attr">datefmt:</span> <span class="string">&#x27;%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">&#x27;%(white)s%(asctime)s %(reset)s%(log_color)s[%(levelname)s %(process)d]%(reset)s %(cyan)s%(reset)s%(message)s&#x27;</span></span><br><span class="line">    <span class="attr">log_colors:</span></span><br><span class="line">      <span class="attr">DEBUG:</span> <span class="string">cyan</span></span><br><span class="line">      <span class="attr">INFO:</span> <span class="string">green</span></span><br><span class="line">      <span class="attr">WARNING:</span> <span class="string">yellow</span></span><br><span class="line">      <span class="attr">ERROR:</span> <span class="string">red</span></span><br><span class="line">      <span class="attr">CRITICAL:</span> <span class="string">bold_red</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理程序</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line">  <span class="attr">console:</span></span><br><span class="line">    <span class="attr">class:</span> <span class="string">logging.StreamHandler</span> <span class="comment"># 这是处理程序类的完整名称</span></span><br><span class="line">    <span class="attr">formatter:</span> <span class="string">color</span>  <span class="comment"># 处理程序所对应格式化器的ID</span></span><br><span class="line">    <span class="attr">level:</span> <span class="string">DEBUG</span>  <span class="comment"># 处理程序的级别</span></span><br><span class="line">    <span class="comment"># filters: [allow_foo]  # 由处理程序所对应过滤器的ID 组成的列表</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">class:</span> <span class="string">logging.handlers.RotatingFileHandler</span></span><br><span class="line">    <span class="attr">formatter:</span> <span class="string">file</span></span><br><span class="line">    <span class="attr">level:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">filename:</span> <span class="string">logconfig.log</span></span><br><span class="line">    <span class="attr">maxBytes:</span> <span class="number">52428800</span> <span class="comment"># 1024*1024*50</span></span><br><span class="line">    <span class="attr">backupCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志记录器</span></span><br><span class="line"><span class="attr">loggers:</span></span><br><span class="line">  <span class="attr">my_logger:</span></span><br><span class="line">    <span class="comment"># level: ERROR # 这里的优先级高</span></span><br><span class="line">    <span class="attr">handlers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">console</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">file</span></span><br><span class="line">    <span class="comment"># 打开日志记录器</span></span><br><span class="line">    <span class="attr">propagate:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根记录器配置</span></span><br><span class="line"><span class="attr">root:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">DEBUG</span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">consoleversion:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 将信息传播到配置文件的跟日志记录器中</span></span><br><span class="line"><span class="attr">disable_existing_loggers:</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><strong>代码部分</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">LOG_CONF_DIR = <span class="string">r&#x27;config/log_conf.yml&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=LOG_CONF_DIR, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    log_conf = yaml.load(stream=f, Loader=yaml.FullLoader)</span><br><span class="line"></span><br><span class="line">logging.config.dictConfig(config=log_conf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取日志记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;my_logger&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&#x27;找bug中...&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;一切正常~&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;报错啦!!&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="记录流程图"><a href="#记录流程图" class="headerlink" title="记录流程图"></a>记录流程图</h2><blockquote>
<p>有个印象(～￣▽￣)～</p>
</blockquote>
<img data-src="http://img.owq.world/2021/11/2123-044c15.png" style="border-radius: 0px;" />



<hr>
<blockquote>
<p>日志懒人库: <strong>loguru</strong> 更加强大更为易用 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RlbGdhbi9sb2d1cnU=">🚪</span></p>
</blockquote>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>YAML</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+Redis 安装配置</title>
    <url>/8be682ad/</url>
    <content><![CDATA[<h2 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker pull redis</span></span><br></pre></td></tr></table></figure>

<h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/data/</span>db<span class="regexp">/redis &amp;&amp; mkdir -p /</span>data<span class="regexp">/config/</span>redis</span><br></pre></td></tr></table></figure>

<h2 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>download.redis.io<span class="regexp">/redis-stable/</span>redis.conf &gt;&gt; <span class="regexp">/data/</span>db<span class="regexp">/redis/</span>redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/data/</span>db<span class="regexp">/redis/</span>redis.conf</span><br></pre></td></tr></table></figure>

<p>根据需求修改配置文件</p>
<blockquote>
<p>参考资料 &gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80MWYzOTNmNTk0ZTg=">🚪</span></p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line"><span class="attribute">bind</span> <span class="number">127.0.0.1</span></span><br><span class="line"></span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">requirepass ****</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启保护模式，默认开启，如果没有设置bind项和redis密码的话，服务将只允许本地访问。</span></span><br><span class="line">protected-mode <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库个数</span></span><br><span class="line">databases <span class="number">16</span></span><br><span class="line"></span><br><span class="line">dir ./	<span class="comment"># 输入本地redis数据库存放文件夹</span></span><br><span class="line"></span><br><span class="line">appendonly <span class="literal">yes</span> <span class="comment"># redis持久化</span></span><br><span class="line"></span><br><span class="line">logfile <span class="string">&quot;redis.log&quot;</span> <span class="comment"># 日志文件存放</span></span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 6379:6379 --name redis \</span><br><span class="line">-v /data/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /data/redis/data:/data:rw \</span><br><span class="line">--privileged=<span class="literal">true</span> -d redis redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes</span><br></pre></td></tr></table></figure>

<h2 id="验证启动"><a href="#验证启动" class="headerlink" title="验证启动"></a>验证启动</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure>

<h2 id="失败处理"><a href="#失败处理" class="headerlink" title="失败处理"></a>失败处理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看错误日志</span></span><br><span class="line">docker logs redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 redis 挂载端口映射等信息</span></span><br><span class="line">docker inspect redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 redis 端口映射</span></span><br><span class="line">docker port myredis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除重试</span></span><br><span class="line">docker rm redis</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+MongoDB 安装配置</title>
    <url>/d2633d2c/</url>
    <content><![CDATA[<h2 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/db</span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 27017:27017 -v /data/mongo:/data/db --name mongo -d mongo --auth</span><br></pre></td></tr></table></figure>

<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo mongo admin</span><br></pre></td></tr></table></figure>



<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123; user:<span class="string">&#x27;admin&#x27;</span>,<span class="built_in">pwd</span>:<span class="string">&#x27;****&#x27;</span>,roles:[ &#123; role:<span class="string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span>&#125;,<span class="string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mongodb:</span>//admin:admin<span class="subst">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Nginx 服务器部署踩坑记录</title>
    <url>/e823826f/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 部署方式有很多, 这里选择是默认的 Git 一键部署方式.<br>前提条件: 搭建好的 Hexo 本地环境, 具有公网IP的服务器, 具备ssh知识.</p>
</blockquote>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudA==">官方文档</span> （用处较小）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">部署插件</span> （自定义配置会用到）</li>
</ul>
<h2 id="服务器环境准备"><a href="#服务器环境准备" class="headerlink" title="服务器环境准备"></a>服务器环境准备</h2><h3 id="安装-git-和-Nginx"><a href="#安装-git-和-Nginx" class="headerlink" title="安装 git 和 Nginx"></a>安装 git 和 Nginx</h3><ul>
<li><p>git<br>用来接收你的网站文件推送的，是实现一键部署的关键。</p>
</li>
<li><p>Nginx<br>一款反向代理网页服务器，让你的网站得以被外部访问的关键。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt install git nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum install -y git nginx</span><br></pre></td></tr></table></figure>



<h3 id="创建一个-git-用户-可选"><a href="#创建一个-git-用户-可选" class="headerlink" title="创建一个 git 用户(可选)"></a>创建一个 git 用户(可选)</h3><p>创建专门用来管理Git仓库的用户，主要是为了权限管理，可参考<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1vbi10aGUtU2VydmVyLVNldHRpbmctVXAtdGhlLVNlcnZlcg==">官方文档</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>

<h3 id="启用git-shell-可选"><a href="#启用git-shell-可选" class="headerlink" title="启用git shell(可选)"></a>启用<code>git shell</code>(可选)</h3><p>查看git-shell是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>

<p>不存在则添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看git-shell路径 默认：/usr/bin/git-shell</span></span><br><span class="line"><span class="built_in">which</span> git-shell</span><br><span class="line"><span class="comment"># 把路径添加到shells文件里</span></span><br><span class="line">sudo vim /etc/shells</span><br></pre></td></tr></table></figure>

<p>修改git用户默认shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chsh git -s $(<span class="built_in">which</span> git-shell)</span><br></pre></td></tr></table></figure>

<p>测试ssh连接，登录不成功即配置ok</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">git@<span class="keyword">&lt;IP地址&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="配置ssh公钥"><a href="#配置ssh公钥" class="headerlink" title="配置ssh公钥"></a>配置ssh公钥</h3><p>用户目录下创建 <code>.ssh</code> 文件夹并设置权限为 700</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用git用户需要进行切换</span></span><br><span class="line">su git</span><br><span class="line"></span><br><span class="line">mkdir ~/.ssh &amp;&amp; chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>

<p>创建 <code>authorized_keys </code> 文件, 将本机公钥复制到里面.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>



<h3 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h3><p>创建存放Blog的git仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /var/repo &amp;&amp; <span class="built_in">cd</span> /var/repo</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure>

<p>创建存放网站静态文件的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /var/www/hexo</span><br></pre></td></tr></table></figure>

<p>设置目录权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure>

<p><em>PS:仓库名<code>blog.git</code>、静态文件目录<code>hoxo</code>可自定义</em></p>
<h3 id="添加post-receive钩子"><a href="#添加post-receive钩子" class="headerlink" title="添加post-receive钩子"></a>添加<code>post-receive</code>钩子</h3><blockquote>
<p>官方参考文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyLyVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OS1HaXQtR2l0LSVFOSU5MiVBOSVFNSVBRCU5MA==">🚪</span></p>
</blockquote>
<p>在仓库下的 <code>hooks</code> 目录创建 <code>post-receive</code> 文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/var/</span>repo<span class="regexp">/blog.git/</span>hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>添加以下内容, 这个钩子会在你本地更新推送到服务器完成后执行, 更新你的网站内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>配置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/repo/blog.git/hooks/</span><br><span class="line">chown -R git:git /var/repo/</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure>



<h3 id="检测仓库是否配置成功"><a href="#检测仓库是否配置成功" class="headerlink" title="检测仓库是否配置成功"></a>检测仓库是否配置成功</h3><p>能成功克隆则代表配置正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;使用的用户名&gt;@&lt;你的服务器IP&gt;:/var/repo/blog.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">git <span class="built_in">clone</span> git@8.8.8.8:/var/repo/blog.git</span><br></pre></td></tr></table></figure>



<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>这里修改下Nginx的默认站点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/</span><br><span class="line">vim sites-enabled/default</span><br></pre></td></tr></table></figure>

<p>里面长这样 ↓<br><img data-src="http://img.owq.world/2021/11/2122-11343b.png"  /></p>
<p>这里修改root网站根目录就行了，其它可以保持不动</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">root /var/www/hexo;</span><br></pre></td></tr></table></figure>

<h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><p><code>server_name _;</code> 一行表示全匹配，只要访问服务器，都会直接转发到当前<code>server</code>下，有域名后可以设置为域名，然后配置<code>不允许ip访问</code>，这样可以避免其他人把未备案的域名解析到自己的服务器 IP，而导致服务器被断网。(如果你没备案就解析域名了，那现在就该知道服务器登不了的原因了🤣)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：以下内容可以在default文件中修改，不过推荐先了解Nginx然后再配置为妙。</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment">// 新增server，设置不允许Ip访问web(default_server)</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        server_name _;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原有default，设置www.you.com域名访问web</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.you.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增server，设置顶级域名you.com重定向</span></span><br><span class="line">    server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line">       server_name you.com;</span><br><span class="line">       return 301 http:<span class="comment">//www.you.com$request_uri;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>检查配置然后重载<code>Nginx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t	<span class="comment"># 检查配置</span></span><br><span class="line">nginx -s reload	<span class="comment"># 重载配置</span></span><br></pre></td></tr></table></figure>



<h2 id="本地部署配置"><a href="#本地部署配置" class="headerlink" title="本地部署配置"></a>本地部署配置</h2><blockquote>
<p>部署插件项目 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">🚪</span></p>
</blockquote>
<p><strong>修改站点目录下<code>_config.yml</code>文件</strong></p>
<h3 id="单个存储部署配置"><a href="#单个存储部署配置" class="headerlink" title="单个存储部署配置"></a>单个存储部署配置</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@x.x.x.x:<span class="meta-keyword">/var/</span>repo/blog.git</span><br></pre></td></tr></table></figure>

<h3 id="多个存储库部署配置（可选）"><a href="#多个存储库部署配置（可选）" class="headerlink" title="多个存储库部署配置（可选）"></a>多个存储库部署配置（可选）</h3><p>这里同时对github和服务器进行同步，可以用来应付一些特殊情况，比如：服务器挂了、封了什么的。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span></span><br><span class="line"><span class="symbol">    server:</span> <span class="meta"># 名称可自定义</span></span><br><span class="line"><span class="symbol">      url:</span> git@x.x.x.x:<span class="meta-keyword">/var/</span>repo/blog.git</span><br><span class="line"><span class="symbol">      branch:</span> master</span><br><span class="line"><span class="symbol">    git:</span></span><br><span class="line"><span class="symbol">      url:</span> git@github.com:owq/owq.github.io.git</span><br><span class="line"><span class="symbol">      branch:</span> main</span><br></pre></td></tr></table></figure>



<h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><p>本地操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键部署</span></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>浏览器输入服务器IP,能正常访问就成功了</p>
</blockquote>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Nginx</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅的使用WSL2-Kali桌面环境</title>
    <url>/202281bd/</url>
    <content><![CDATA[<blockquote>
<p>Win-KeX官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy93c2wvd2luLWtleC8=">🚪</span></p>
</blockquote>
<h2 id="安装win-kex"><a href="#安装win-kex" class="headerlink" title="安装win-kex"></a>安装win-kex</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install kali-win-kex</span><br></pre></td></tr></table></figure>

<h2 id="启动Win-Kex"><a href="#启动Win-Kex" class="headerlink" title="启动Win-Kex"></a>启动Win-Kex</h2><blockquote>
<p>Win-KeX 有三种启动模式</p>
</blockquote>
<ul>
<li><p>窗口模式<br>在专用窗口中启动 Kali Linux 桌面.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kex --win -s	</span><br></pre></td></tr></table></figure></li>
<li><p>远程连接（推荐）<br>微软自带的远程桌面工具，用过的都说好~</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kex --esm --ip -s</span><br></pre></td></tr></table></figure></li>
<li><p>无缝模式<br>在 Windows 和 Kali 应用程序和菜单之间共享 Windows 桌面.</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">kex <span class="comment">--sl -s</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><em>注: 后面参数<code>-s</code>是启动声音支持.</em></p>
<h2 id="高分屏下的使用"><a href="#高分屏下的使用" class="headerlink" title="高分屏下的使用"></a>高分屏下的使用</h2><blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy9nZW5lcmFsLXVzZS9oaWRwaS8=">🚪</span></p>
</blockquote>
<p>菜单搜索<code>hidpi</code>, 打开它</p>
<p><img data-src="http://img.owq.world/2021/11/2110-eb457c.png"></p>
<p>默认缩放2X, 点击<code>是</code>确认, 然后开始愉快的Linux之旅吧~</p>
<p><img data-src="http://img.owq.world/2021/11/2110-542567.png"></p>
<p><em>注:如果要自定义缩放因子请参考官方文档</em></p>
<h2 id="快捷启动"><a href="#快捷启动" class="headerlink" title="快捷启动"></a>快捷启动</h2><ul>
<li>添加到<code>Windows Termial</code>启动</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;576cd4fd-d6e2-4b99-9305-2e03a898af04&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --esm --wtstart -s&quot;</span>,</span><br><span class="line">&#125;，</span><br></pre></td></tr></table></figure>

<ul>
<li>设置命令别名</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> winkex=<span class="string">&#x27;kex --esm --ip -s&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>WSL2</tag>
        <tag>Kali Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2 安装配置</title>
    <url>/1fe3c459/</url>
    <content><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><blockquote>
<p>WSL1 升级 WSL2 官方文档传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvaW5zdGFsbC13aW4xMA==">🚪</span></p>
</blockquote>
<p><code>Win+S</code> 搜索, 用<strong>管理员权限</strong>运行<code>Windows PowerShell</code>, 或使用<code>Win+X</code>打开菜单运行选择<code>Windows PowerShell</code>.</p>
<p>ps:接来的命令都是在这个终端上执行.</p>
<img data-src="http://img.owq.world/2021/11/2125-658665.png" style="zoom:50%;" />

<ol>
<li><h3 id="启用-WSL-子系统"><a href="#启用-WSL-子系统" class="headerlink" title="启用 WSL 子系统"></a>启用 WSL 子系统</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure></li>
<li><h3 id="启用虚拟机功能"><a href="#启用虚拟机功能" class="headerlink" title="启用虚拟机功能"></a>启用虚拟机功能</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p>到了这一步要 <strong>重启计算机</strong> 进行应用(更新)</p>
</li>
<li><h3 id="下载-Linux-内核更新包"><a href="#下载-Linux-内核更新包" class="headerlink" title="下载 Linux 内核更新包"></a>下载 Linux 内核更新包</h3><p><strong>选择自己计算机内核架构对应的包</strong>, 一般为架构是64位也就是x64.</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp">x64更新包</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV9hcm02NC5tc2k=">ARM64更新包</span></li>
</ul>
</li>
<li><h3 id="将-WSL-2-设置为默认版本"><a href="#将-WSL-2-设置为默认版本" class="headerlink" title="将 WSL 2 设置为默认版本"></a>将 WSL 2 设置为默认版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h2><p>安装子系统方式有三, 可根据个人喜好选择.</p>
<ul>
<li><h3 id="微软商店搜索安装-推荐"><a href="#微软商店搜索安装-推荐" class="headerlink" title="微软商店搜索安装(推荐)"></a>微软商店搜索安装(推荐)</h3><ul>
<li><code>Win + S</code> 搜索打开 <code>Microsoft Store</code> 搜索 Linux 找到对应版本安装即可.</li>
</ul>
</li>
<li><h3 id="手动下载安装包安装"><a href="#手动下载安装包安装" class="headerlink" title="手动下载安装包安装"></a>手动下载安装包安装</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC1tYW51YWwjZG93bmxvYWRpbmctZGlzdHJpYnV0aW9ucw==">官方下载地址</span></li>
<li>其它Linux地址<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3l1azcvQXJjaFdTTA==">ArchWSL</span></li>
</ul>
</li>
</ul>
</li>
<li><h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><p>不同发行版安装命令, 使用<code>PowerShell</code>执行, 链接为包链接.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kali Linux</span></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://aka.ms/wsl<span class="literal">-kali</span><span class="literal">-linux</span><span class="literal">-new</span> <span class="literal">-OutFile</span> Ubuntu.appx <span class="literal">-UseBasicParsing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 20.04</span></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://aka.ms/wslubuntu2004 <span class="literal">-OutFile</span> Ubuntu.appx <span class="literal">-UseBasicParsing</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="WSL-位置移动-可选"><a href="#WSL-位置移动-可选" class="headerlink" title="WSL 位置移动(可选)"></a>WSL 位置移动(可选)</h2><blockquote>
<p>这里使用LxRunOffline工具进行移动 下载传送门 -&gt;  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0REb1NvbGl0YXJ5L0x4UnVuT2ZmbGluZS9yZWxlYXNlcw==">🚪</span></p>
</blockquote>
<p>如果担心C盘空间不够可以把WSL的安装位置移动到其它盘.</p>
<p>下载解压压缩包后, 在解压目录处打开命令行, 就可以运行以下命令了.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已安装 wsl 名称</span></span><br><span class="line">wsl <span class="literal">-l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动 wsl 到指定目录</span></span><br><span class="line">lxrunoffline m <span class="literal">-n</span> &lt;wsl<span class="literal">-name</span>&gt; <span class="literal">-d</span> &lt;<span class="built_in">dir</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">lxrunoffline m <span class="literal">-n</span> docker<span class="literal">-desktop</span> <span class="literal">-d</span> D:\OWQ\Docker\wsl\distro</span><br><span class="line">lxrunoffline m <span class="literal">-n</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> <span class="literal">-d</span> D:\OWQ\Docker\wsl\data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看wsl路径</span></span><br><span class="line">lxrunoffline di <span class="literal">-n</span> docker<span class="literal">-desktop</span></span><br><span class="line">lxrunoffline di <span class="literal">-n</span> docker<span class="literal">-desktop</span><span class="literal">-data</span></span><br></pre></td></tr></table></figure>



<h2 id="WSL-2-优化配置-可选"><a href="#WSL-2-优化配置-可选" class="headerlink" title="WSL 2 优化配置(可选)"></a>WSL 2 优化配置(可选)</h2><blockquote>
<p>配置文档官方传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvd3NsLWNvbmZpZyNjb25maWd1cmUtZ2xvYmFsLW9wdGlvbnMtd2l0aC13c2xjb25maWc=">🚪</span></p>
</blockquote>
<h3 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h3><p>WSL2内存占用高的问题至今存在，修改Windows位于用户目录<code>%home%</code>下的<code>.wslconfig</code>文件，若没有则自己创建一个.</p>
<p>ps:直接在资源管理器输入<code>%home%</code>按回车就可跳转, 若出错则是电脑环境变量没有配置好</p>
<img data-src="http://img.owq.world/2021/11/2125-5f3eaf.png" style="zoom:50%;" />

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主要配置内存和交换内存, 其它可以不用管, 看自己电脑配置设置.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[wsl2]</span></span><br><span class="line"><span class="comment"># 给 WSL 2 虚拟机分配的内存大小 (默认为本机内存的50%）</span></span><br><span class="line"><span class="attr">memory</span>=<span class="number">8</span>GB</span><br><span class="line"><span class="comment"># 为 WSL 2 虚拟机分配的交换空间 (0 表示没有交换空间, 一般设置为本机内存的25%)</span></span><br><span class="line"><span class="attr">swap</span>=<span class="number">0</span></span><br><span class="line"><span class="comment"># 自定义交换虚拟磁盘 vhd 的绝对路径 (可选配置)</span></span><br><span class="line"><span class="attr">swapFile</span>=&lt;path&gt;</span><br><span class="line"><span class="comment"># 是否允许将 WSL 2 的端口转发到主机（默认为 true）</span></span><br><span class="line"><span class="attr">localhostForwarding</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>配置好文件后需要关闭WSL重新进入才会生效.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-shutdown</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh + oh-my-zsh 简易配置</title>
    <url>/4bfebac1/</url>
    <content><![CDATA[<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p>使用系统对应的包管理器安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure>


<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Command</th>
</tr>
</thead>
<tbody><tr>
<td><strong>curl</strong></td>
<td>sh -c &quot;$(curl -fsSL <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29obXl6c2gvb2hteXpzaC9tYXN0ZXIvdG9vbHMvaW5zdGFsbC5zaCkmcXVvdDs=">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></td>
</tr>
<tr>
<td><strong>wget</strong></td>
<td>sh -c &quot;$(wget -O- <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29obXl6c2gvb2hteXpzaC9tYXN0ZXIvdG9vbHMvaW5zdGFsbC5zaCkmcXVvdDs=">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></td>
</tr>
<tr>
<td><strong>fetch</strong></td>
<td>sh -c &quot;$(fetch -o - <span class="exturl" data-url="aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL29obXl6c2gvb2hteXpzaC9tYXN0ZXIvdG9vbHMvaW5zdGFsbC5zaCkmcXVvdDs=">https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span></td>
</tr>
</tbody></table>
<h2 id="连接被墙问题"><a href="#连接被墙问题" class="headerlink" title="连接被墙问题"></a>连接被墙问题</h2><h3 id="方法一-科学上网"><a href="#方法一-科学上网" class="headerlink" title="方法一: 科学上网"></a>方法一: <del>科学上网</del></h3><blockquote>
<p>只可意会不可言传🐕</p>
</blockquote>
<h3 id="方法二-加速ssh登录"><a href="#方法二-加速ssh登录" class="headerlink" title="方法二: 加速ssh登录"></a>方法二: 加速ssh登录</h3><blockquote>
<p>适用于阿里云服务器😶</p>
</blockquote>
<p>修改 <code>/etc/ssh/ssh_config</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>取消以下行的注释</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># GSSAPIAuthentication no</span></span><br></pre></td></tr></table></figure>

<p>没有生效可以重启下sshd服务器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/sshd restart</span><br></pre></td></tr></table></figure>



<h3 id="方法三-映射hosts"><a href="#方法三-映射hosts" class="headerlink" title="方法三: 映射hosts"></a>方法三: 映射hosts</h3><blockquote>
<p>死马当活马医😂</p>
</blockquote>
<p>进入 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhZGRyZXNzLmNvbS8=">https://www.ipaddress.com/</span> 获取域名的映射IP</p>
<p><img data-src="http://img.owq.world/2021/11/2123-f639cc.png"></p>
<p>修改<code>hosts</code>文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure>

<p>添加对应的ip映射即可</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">185.199.108.133</span> raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><blockquote>
<p>主题文件位于 <code>.oh-my-zsh/themes</code> 目录下，可自定义修改</p>
</blockquote>
<h3 id="简单实用的"><a href="#简单实用的" class="headerlink" title="简单实用的"></a>简单实用的</h3><img data-src="http://img.owq.world/2021/11/2124-f27aa9.png" style="zoom:80%;" />

<p>修改 <code>~/.zshrc</code> 文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZSH_THEME</span>=<span class="string">&quot;ys&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="复杂炫酷的"><a href="#复杂炫酷的" class="headerlink" title="复杂炫酷的"></a>复杂炫酷的</h3><img data-src="http://img.owq.world/2021/11/2124-9962fa.png" style="zoom: 80%;" />

<h4 id="安装powerline主题"><a href="#安装powerline主题" class="headerlink" title="安装powerline主题"></a><strong>安装powerline主题</strong></h4><blockquote>
<p>传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plcmVteUZyZWVBZ2VudC9vaC1teS16c2gtcG93ZXJsaW5lLXRoZW1l">🚪</span></p>
</blockquote>
<p>克隆主题文件到本地</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme.git powerline</span><br></pre></td></tr></table></figure>

<p>运行安装脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> powerline &amp;&amp; ./install_in_omz.sh</span><br></pre></td></tr></table></figure>

<p>修改 <code>~/.zshrc</code> 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改主题</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerline&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改终端为256位颜色模式</span></span><br><span class="line"><span class="built_in">export</span> TERM=<span class="string">&quot;xterm-256color&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若终端符号显示不全或错位需要设置为 <code>TureType字体</code></p>
<p>如: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvbnNreS9GaXJhQ29kZQ==">FiraCode</span>、powerline</p>
</blockquote>
<p><strong>安装powerline字体</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure>

<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>修改<code>~/.zshrc</code>配置文件</p>
<p><strong>快速添加sudo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># EscEsc to sudo</span></span><br><span class="line"><span class="built_in">bindkey</span> -s <span class="string">&#x27;\e\e&#x27;</span> <span class="string">&#x27;\C-asudo \C-e&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>WSL2下的代理配置</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Proxy config</span></span><br><span class="line"><span class="keyword">export</span> hostip=$(cat /etc/resolv.conf | grep -oP &#x27;(?&lt;=nameserver\ ).*&#x27;)</span><br><span class="line">alias proxyon=&#x27;<span class="keyword">export</span> https_proxy=<span class="string">&quot;http://$&#123;hostip&#125;:7890&quot;</span> &amp;&amp; <span class="keyword">export</span> http_proxy=<span class="string">&quot;http://$&#123;hostip&#125;:7890&quot;</span> &amp;&amp; <span class="keyword">export</span> all_proxy=<span class="string">&quot;socks5://$&#123;hostip&#125;:7890&quot;</span>&#x27;</span><br><span class="line">alias unproxy=&#x27;<span class="keyword">unset</span> http_proxy &amp;&amp; <span class="keyword">unset</span> https_proxy &amp;&amp; <span class="keyword">unset</span> all_proxy&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>常用别名设置</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"># git <span class="keyword">log</span></span><br><span class="line"><span class="keyword">alias</span> glog=<span class="string">&#x27;git log --graph --pretty=oneline --abbrev-commit&#x27;</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">ls</span> -al</span><br><span class="line"><span class="keyword">alias</span> ll=<span class="keyword">ls</span> -al --show-<span class="keyword">control</span>-chars --<span class="keyword">color</span> $*</span><br><span class="line"></span><br><span class="line"># Other <span class="keyword">alias</span> config</span><br><span class="line"><span class="keyword">alias</span> ipython=<span class="string">&#x27;ipython3&#x27;</span></span><br><span class="line"><span class="keyword">alias</span> npm=<span class="string">&#x27;sudo npm&#x27;</span></span><br><span class="line"><span class="keyword">alias</span> typora=<span class="string">&#x27;typora.exe&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="配置其他用户可用"><a href="#配置其他用户可用" class="headerlink" title="配置其他用户可用"></a>配置其他用户可用</h2><blockquote>
<p>该方法虽然可以一次配置全局生效, 但会存在权限问题故不建议使用.</p>
<p>建议其它用户最好重新安装配置.</p>
</blockquote>
<p>为root用户建立软连接，即root用户使用当前用户的配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ln -s <span class="variable">$HOME</span>/.oh-my-zsh /root/.oh-my-zsh</span><br><span class="line">sudo ln -s <span class="variable">$HOME</span>/.zshrc /root/.zshrc</span><br></pre></td></tr></table></figure>

<p>切换root进入zsh，若提示无pyenv命令，则再建立软连接即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ln -s <span class="variable">$HOME</span>/.pyenv /root/.pyenv</span><br></pre></td></tr></table></figure>

<p>若提示目录权限警告，则在 .zshrc 文件前面添加</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZSH_DISABLE_COMPFIX</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>若要单独配置，复制相应目录到对应用户主目录下即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp -r <span class="variable">$HOME</span>/.oh-my-zsh	/root</span><br><span class="line">sudo cp -r <span class="variable">$HOME</span>/.zshrc	/root</span><br></pre></td></tr></table></figure>



<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d0aW5nL2F1dG9qdW1w">autojump</span></h3><blockquote>
<p>快速跳转目录</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/wting/autojump.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳转目录安装</span></span><br><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">./uninstall.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">j &lt;部分目录名&gt;</span><br></pre></td></tr></table></figure>

<h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">zsh-autosuggestions</span></h3><blockquote>
<p>历史命令灰色提示</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<h3 id="git-open"><a href="#git-open" class="headerlink" title="git-open"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdWxpcmlzaC9naXQtb3Blbg==">git-open</span></h3><blockquote>
<p>浏览器快速打开git项目</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/paulirish/git-open.git <span class="variable">$ZSH_CUSTOM</span>/plugins/git-open</span><br></pre></td></tr></table></figure>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">git open</span><br></pre></td></tr></table></figure>

<p><strong>配置插件</strong></p>
<p><em>注意：插件中间是以空格分开</em></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins</span>=(git zsh-autosuggestions git-open)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminal</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB 安装图文教程</title>
    <url>/9ec13a7e/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>对于初学者, 只需要知道以下几点就行了</p>
<ul>
<li><p>MariaDB 是开源软件</p>
</li>
<li><p>MariaDB 是 MySQL 的分支</p>
</li>
<li><p>提供了与MySQL相同的功能</p>
</li>
<li><p>和 MySQL 一样是 <strong>关系型数据库</strong></p>
</li>
</ul>
<h2 id="下载-MariaDB-安装包"><a href="#下载-MariaDB-安装包" class="headerlink" title="下载 MariaDB 安装包"></a>下载 MariaDB 安装包</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tYXJpYWRiLmNvbS9kb3dubG9hZHMv">官网下载</span></p>
<p>打开后大概是这个样子，这里要注意下，不同时期网站的外观可能会不同，但软件的下载页地址是不会变的。</p>
<p><img data-src="http://img.owq.world/2021/11/2111-62424c.png"></p>
<p>软件版本选择默认(最新版)就行了<br>手动选择下系统版本, Windows 64位选择 <code>MS Windows (64-bit)</code><br>如果不知道自己的系统是多少位的, 那就选择32位包 <code>MS Windows (32-bit)</code><br>选择好后, 你会发现下面的链接是会变的, 这就是你要下载的文件, 让我们点击 <code>Download</code> 开始下载</p>
<p><img data-src="http://img.owq.world/2021/11/2112-284361.png"></p>
<p>点击后会跳转到 &quot;感谢下载&quot; 页面, 这时候等待下载链接建立起来就行了</p>
<p><img data-src="http://img.owq.world/2021/11/2115-3660c6.png"></p>
<h2 id="安装-MariaDB"><a href="#安装-MariaDB" class="headerlink" title="安装 MariaDB"></a>安装 MariaDB</h2><img data-src="http://img.owq.world/2021/11/2114-1271e8.png" style="zoom:50%;" />

<p>勾选&quot;接受使用许可条款&quot;, 然后<code>Next</code>进入下一步</p>
<img data-src="http://img.owq.world/2021/11/2115-52857d.png" style="zoom:50%;" />

<p>左边区域是要安装的组件, 右边是对应组件的说明, 默认设置就行了<br><em>(之后如果要删除不需要的组件, 重新打开安装包下就可以删除了)</em><br>点击 <code>Browse...</code> , 修改下储存路径, 默认软件是放在 C盘 下的<br>这里推荐放在其它盘里, 比如我就放在 <code>D:\Environment\MariaDB</code> 这个路径下</p>
<img data-src="http://img.owq.world/2021/11/2116-2e7524.png" style="zoom:50%;" />

<p>设置 <code>root</code> 用户密码, 输入两次密码以确认, <strong>密码要记牢, 忘记的话就只能重新安装了</strong>, 然后勾上 <code>Use UTF8 as default server&#39;s character set</code>, 这个是设置 <code>*UTF-8*</code> 为默认编码的, 防止中文乱码必备选项</p>
<img data-src="http://img.owq.world/2021/11/2116-7f0aec.png" style="zoom:50%;" />



<p>设置服务名称, 这里我填的是 <code>MariaDB</code> , 名称是可以自定义的<br>设置访问端口号, 用来访问你的 MariaDB 数据库用的, 默认填 <code>3306</code> ,这个要牢记<br>下面的缓冲池大小不用管它, 对前期学习没有影响的</p>
<img data-src="http://img.owq.world/2021/11/2116-59615f.png" style="zoom:50%;" />

<p>开始安装...</p>
<img data-src="http://img.owq.world/2021/11/2116-ff9d22.png" style="zoom:50%;" />

<p>静待一会儿 就大功告成了~</p>
<img data-src="http://img.owq.world/2021/11/2116-d26191.png" style="zoom:50%;" />
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 开发环境搭建萌新教程</title>
    <url>/958bc56b/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMv">官网下载</span>, 刚开始学习的话直接下载最新版本的就行了</p>
<p><img data-src="http://img.owq.world/2021/11/2120-1da682.png"></p>
<p>默认下载为64位版本就行了 要下载32位请跳转<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvd2luZG93cy8=">详细页面下载</span></p>
<p><img data-src="http://img.owq.world/2021/11/2120-92875c.png"></p>
<h2 id="安装图示"><a href="#安装图示" class="headerlink" title="安装图示"></a>安装图示</h2><p>打开安装包 勾上环境变量 然后选择自定义安装</p>
<img data-src="http://img.owq.world/2021/11/2118-b66de4.png" style="zoom:50%;" />

<p>配置安装选项 依需求更改 默认全勾上就行了 &gt;&gt; <strong>Next</strong></p>
<img data-src="http://img.owq.world/2021/11/2120-00e3ae.png" style="zoom:50%;" />

<p>勾上第一个选项 &quot;为全部用户安装&quot; &gt;&gt; <strong>Install</strong></p>
<img data-src="http://img.owq.world/2021/11/2122-72c13f.png" style="zoom:50%;" />

<p>等待安装完成 然后点一下它 解除路径长度限制 &gt;&gt; <strong>Close</strong></p>
<img data-src="http://img.owq.world/2021/11/2121-7daf02.png" style="zoom:50%;" />



<h2 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h2><p>Win + R 打开&quot;运行&quot; 输入 cmd 回车打开</p>
<img data-src="http://img.owq.world/2021/11/2121-be174c.png" style="zoom:33%;" />

<p>输入 <code>python -V</code> 查看 python 版本 如成功输出则安装成功</p>
<img data-src="http://img.owq.world/2021/11/2122-8b7be8.png" style="zoom:33%;" />









]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发环境搭建萌新教程</title>
    <url>/46118abd/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<blockquote>
<p> 用最实用的方法来解决问题。<br>该教程不是用安装程序安装，而是通过设置环境变量，来实现基础Java环境搭建。</p>
</blockquote>
<h2 id="下载-Java-JDK"><a href="#下载-Java-JDK" class="headerlink" title="下载 Java JDK"></a>下载 Java JDK</h2><blockquote>
<p> 这里选择 Java8 进行演示，并提供3种下载方法参考~</p>
</blockquote>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UtZG93bmxvYWRzLmh0bWw=">官网</span></p>
<p>官网的 Java 8 只提供安装包下载 可以到其它地方下载打包好的JDK,这里使用 Java 11 做为示例</p>
<p><img data-src="http://img.owq.world/2021/11/2055-078cf6.png"><br><img data-src="http://img.owq.world/2021/11/2056-418efc.png"></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXp1bC5jb20vZG93bmxvYWRzL3p1bHUtY29tbXVuaXR5Lz9wYWNrYWdlPWpkaw==">Azul Zulu</span><br>网页往下拉，找到下载处，选择Java版本和系统，然后下载压缩包</p>
<p><img data-src="http://img.owq.world/2021/11/2057-075278.png"></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTJoRnFBZ1BOQ0h6b09TV21xVG9qdmc=">网盘下载</span><br>提取码: 47w5</p>
</li>
<li><p>版本小解</p>
<ul>
<li>Java 是向后兼容的<ul>
<li>新版本仍能使用旧版本开发的程序</li>
</ul>
</li>
<li>Java 8 是目前市场份额最多版本（2020）<ul>
<li>很多公司仍在用 Java8 开发</li>
</ul>
</li>
<li>Java 11 是 Java8 后首个长期支持版本(LTS)<ul>
<li>市场份额在 Java8 之后 正在慢慢提升中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="解压-Java-JDK"><a href="#解压-Java-JDK" class="headerlink" title="解压 Java JDK"></a>解压 Java JDK</h2><p>记住解压路径 这是 Java JDK 的根目录</p>
<p><img data-src="http://img.owq.world/2021/11/2057-02a578.png"></p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p><code>Win + R</code> 运行 输入 <code>sysdm.cpl</code> 回车进入 系统属性配置</p>
<img data-src="http://img.owq.world/2021/11/2058-06af6e.png" style="zoom:50%;" />

<p>依次点击 高级 &gt;&gt; 环境变量</p>
<img data-src="http://img.owq.world/2021/11/2058-e21112.png" style="zoom:50%;" />

<p>新建 变量名: <code>JAVA_HOME</code>  变量值: <code>C:\Java\jdk8.0.275</code>(刚刚解压的Java路径)</p>
<img data-src="http://img.owq.world/2021/11/2102-13fe59.png" style="zoom:50%;" />

<p>双击 <strong>Path</strong> 环境变量  进入编辑 (图示操作也是可以的)</p>
<img data-src="http://img.owq.world/2021/11/2102-9698ea.png" style="zoom:50%;" />

<p>新建变量 <code>%JAVA_HOME%/bin</code></p>
<img data-src="http://img.owq.world/2021/11/2103-f557ae.png" style="zoom:50%;" />

<p>Win7 下添加环境变量要用<strong>分号</strong>隔开</p>
<img data-src="http://img.owq.world/2021/11/2103-ee21ba.png" style="zoom:80%;" />



<h2 id="检验环境"><a href="#检验环境" class="headerlink" title="检验环境"></a>检验环境</h2><p><code>Win +R</code> 运行 cmd 输入 <code>java -version</code>  输出版本信息</p>
<p><img data-src="http://img.owq.world/2021/11/2103-5f568b.png"></p>
<h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><ul>
<li>若是没有正常输出 请检查环境变量的<strong>路径</strong>是否配置正确</li>
<li>在 cmd 窗口 输入 <code>echo %JAVA_HOME%</code> 查看路径<ul>
<li>注意大小写正确 </li>
<li>斜杠是否写反</li>
<li><strong>分号</strong> 是否为英文符号</li>
</ul>
</li>
<li>在 cmd 窗口 输入 <code>echo %PATH%</code> 查看 是否有 <code>%JAVA_HOME%\bin</code><ul>
<li>系统会自动把 <code>%JAVA_HOME%</code> 变量转换成路径<br><img data-src="http://img.owq.world/2021/11/2103-615b99.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux crontab 命令</title>
    <url>/crontab/</url>
    <content><![CDATA[<blockquote>
<p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>修改定时任务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure>

<p>查看定时任务（当前用户）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -l </span><br></pre></td></tr></table></figure>

<p>删除所有定时任务（/var/spool/cron目录下）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -r </span><br></pre></td></tr></table></figure>

<p><em>注: 新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</em></p>
<h2 id="图解命令"><a href="#图解命令" class="headerlink" title="图解命令"></a>图解命令</h2><p><img data-src="http://img.owq.world/2021/11/1717-e7ebb9.png"></p>
<h2 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h2><table>
<thead>
<tr>
<th align="left">Crontab Entry</th>
<th align="left"><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">*/5 * * * *</td>
<td align="left">每 5 分钟运行一次任务</td>
</tr>
<tr>
<td align="left">0 * * * *</td>
<td align="left">每小时执行一次任务</td>
</tr>
<tr>
<td align="left">0 0 * * *</td>
<td align="left">每天 00:00 执行一次任务</td>
</tr>
<tr>
<td align="left">00 14 10 3,6,9,12 *</td>
<td align="left">在3月、6月、9月和12月的10日14:00执行一次</td>
</tr>
<tr>
<td align="left">25,50 1 15 * 2</td>
<td align="left">在每周二1:25、1:50和每月15日执行一次</td>
</tr>
<tr>
<td align="left">*/5 * * * 1-5</td>
<td align="left">在每周的周一至周五每5分钟执行一次</td>
</tr>
</tbody></table>
<h2 id="服务操作"><a href="#服务操作" class="headerlink" title="服务操作"></a>服务操作</h2><p>重启服务</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo service cron restart</span></span><br></pre></td></tr></table></figure>

<p>ubuntu下启动、停止与重启cron</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/cron start</span><br><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/cron stop</span><br><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/cron restart</span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW51eHRvb2xzLXJzdC5yZWFkdGhlZG9jcy5pby96aF9DTi9sYXRlc3QvdG9vbC9jcm9udGFiLmh0bWw=">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW51eGNvbmZpZy5vcmcvbGludXgtY3JvbnRhYi1yZWZlcmVuY2UtZ3VpZGU=">https://linuxconfig.org/linux-crontab-reference-guide</span></li>
</ul>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx configure 参数</title>
    <url>/9967ace7/</url>
    <content><![CDATA[<blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cubmdpbnguY29tL3Jlc291cmNlcy93aWtpL3N0YXJ0L3RvcGljcy90dXRvcmlhbHMvaW5zdGFsbG9wdGlvbnMv">🚪</span></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令行查看</span></span><br><span class="line">./configure --help</span><br></pre></td></tr></table></figure>

<h2 id="文件和权限"><a href="#文件和权限" class="headerlink" title="文件和权限"></a>文件和权限</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–prefix=*path*</strong></td>
<td>定义保存服务器文件的目录。这个目录也将用于所有由configure设置的相对路径(库源路径除外)和nginx.conf配置文件中。默认设置为<code>/usr/local/nginx</code>目录。</td>
</tr>
<tr>
<td><strong>–sbin-path=*path*</strong></td>
<td>设置NGINX可执行文件的名称。此名称仅在安装过程中使用。默认文件名为<code>prefix/sbin/nginx</code>。</td>
</tr>
<tr>
<td><strong>–conf-path=*path*</strong></td>
<td>设置<code>nginx.conf</code>配置文件的名称。如果需要，NGINX总是可以通过命令行参数<code>-c file</code>指定一个不同的配置文件来启动。默认文件名为<code>prefix/conf/nginx.conf</code>。</td>
</tr>
<tr>
<td><strong>–pid-path=*path*</strong></td>
<td>设置nginx的名称。pid文件，用于存储主进程的进程ID。安装完成后，可以在<code>nginx.conf</code>配置文件中使用pid指令更改文件名。默认文件名为<code>prefix/logs/nginx.pid</code>。</td>
</tr>
<tr>
<td><strong>–error-log-path=*path*</strong></td>
<td>设置主要错误、警告和诊断文件的名称。安装完成后，可以使用错误日志指令在<code>nginx.conf</code>配置文件中更改文件名。默认文件名为<code>prefix/logs/error.log</code>。特殊的“stderr”值告诉NGINX将预配置消息记录到标准错误。</td>
</tr>
<tr>
<td><strong>–http-log-path=*path*</strong></td>
<td>设置HTTP服务器的主请求日志文件的名称。安装完成后，可以使用<code>access log</code>指令在<code>nginx.conf</code>配置文件中更改文件名。默认文件名为<code>prefix/logs/access.log</code>。</td>
</tr>
<tr>
<td><strong>–user=*name*</strong></td>
<td>设置工作进程将使用其凭证的非特权用户的名称。在安装之后，这个名字总是可以在<code>nginx.conf</code>配置文件中使用user指令更改。默认用户名为nobody。</td>
</tr>
<tr>
<td><strong>–group=*name*</strong></td>
<td>设置工作进程将使用其凭证的组的名称。安装后，在<code>nginx.conf</code>配置文件中可以使用user指令更改名称。缺省情况下，组名为非特权用户的名称。</td>
</tr>
</tbody></table>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–with-select_module, –without-select_module</strong></td>
<td>启用或禁用构建允许服务器使用<code>select()</code>方法的模块。如果平台不支持更合适的方法，如<code>kqueue</code>、<code>epoll</code>、<code>rtsig</code>或<code>/dev/poll</code>，则会自动构建此模块。</td>
</tr>
<tr>
<td><strong>–with-poll_module, –without-poll_module</strong></td>
<td>启用或禁用构建允许服务器使用<code>poll()</code>方法的模块。如果平台不支持更合适的方法，如<code>kqueue</code>、<code>epoll</code>、<code>rtsig</code>或<code>/dev/poll</code>，则会自动构建此模块。</td>
</tr>
</tbody></table>
<h2 id="其它可选"><a href="#其它可选" class="headerlink" title="其它可选"></a>其它可选</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–without-http_gzip_module</strong></td>
<td>禁用构建压缩HTTP服务器响应的模块。构建和运行此模块需要zlib库。</td>
</tr>
<tr>
<td><strong>–without-http_rewrite_module</strong></td>
<td>禁用构建允许HTTP服务器重定向请求和更改请求URI的模块。构建和运行此模块需要PCRE库。这个模块是实验性的，所以它的指令将来可能会改变。</td>
</tr>
<tr>
<td><strong>–without-http_proxy_module</strong></td>
<td>禁用构建HTTP服务器代理模块。</td>
</tr>
<tr>
<td><strong>–with-http_ssl_module</strong></td>
<td>支持构建将HTTPS协议支持添加到HTTP服务器的模块。默认情况下，此模块不会生成。构建和运行此模块需要OpenSSL库。</td>
</tr>
<tr>
<td><strong>–with-pcre=*path*</strong></td>
<td>设置PCRE库源的路径。库分发版(版本4.4 - 8.21)需要从PCRE网站下载并提取。剩下的由NGINX的。/configure和make完成。location指令和ngx_http_rewrite_module的正则表达式支持都需要这个库。在FreeBSD系统上使用PCRE系统，请参阅下面的注释。</td>
</tr>
<tr>
<td><strong>–with-pcre-jit</strong></td>
<td>构建带有“即时编译”支持的PCRE库。</td>
</tr>
<tr>
<td><strong>–with-zlib=*path*</strong></td>
<td>设置zlib库的源代码的路径。库发行版(版本1.1.3 - 1.2.5)需要从zlib站点下载并解压。剩下的由NGINX的。/configure和make完成。这个库是ngx_http_gzip_module所必需的。</td>
</tr>
</tbody></table>
<h2 id="编译控制"><a href="#编译控制" class="headerlink" title="编译控制"></a>编译控制</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–with-cc-opt=*parameters*</strong></td>
<td>设置将添加到CFLAGS变量的附加参数。</td>
</tr>
<tr>
<td><strong>–with-ld-opt=*parameters*</strong></td>
<td>设置将在链接期间使用的附加参数。</td>
</tr>
</tbody></table>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">    --sbin-path=/<span class="keyword">usr</span>/local/nginx/nginx</span><br><span class="line">    --conf-path=/<span class="keyword">usr</span>/local/nginx/nginx.conf</span><br><span class="line">    --pid-path=/<span class="keyword">usr</span>/local/nginx/nginx.pid</span><br><span class="line">    --with-http_ssl_module</span><br><span class="line">    --with-pcre=../pcre-<span class="number">4.4</span></span><br><span class="line">    --with-zlib=../zlib-<span class="number">1.1</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium 操作文档</title>
    <url>/selenium/</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><blockquote>
<p>基于浏览器驱动的自动化操作浏览器工具, 用于运维测试也可用于爬虫。</p>
</blockquote>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">操作流程</span><br><span class="line"><span class="function"><span class="title">selenium</span> -&gt;</span> 传输指令 —&gt; <span class="function"><span class="title">webdriver</span> -&gt;</span> 转换指令 -&gt; 浏览器执行</span><br></pre></td></tr></table></figure>



<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ul>
<li><p>安装Python版本的selenium</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> selenium</span><br></pre></td></tr></table></figure></li>
<li><p>查看Chrome版本，浏览器输入回车</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chrome:<span class="regexp">//</span>version/</span><br></pre></td></tr></table></figure></li>
<li><p>下载对应浏览器版本的chrome driver<br>  <em>PS:驱动版本选择最接近的，不一定要完全一样的。</em></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL25wbS50YW9iYW8ub3JnL21pcnJvcnMvY2hyb21lZHJpdmVyLw==">淘宝镜像下载</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWVkcml2ZXIuY2hyb21pdW0ub3JnL2Rvd25sb2Fkcw==">官方下载</span> (需要挂代理)</li>
</ul>
</li>
<li><p>解压到特定目录，方便调用</p>
  <figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">.<span class="string">\drivers\</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> setting <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 ...</span></span><br><span class="line"></span><br><span class="line">brower = webdriver.Chrome(executable_path=DRIVER_PATH, options=options)</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&#x27;</span></span><br><span class="line">PROXY = &#123;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7890</span>&#125;</span><br><span class="line">CACHE_DIR = <span class="string">r&#x27;cache/user_1&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>驱动路径配置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.system() == <span class="string">&#x27;Windows&#x27;</span>:</span><br><span class="line">    DRIVER_PATH = <span class="string">r&quot;drivers/win/chromedriver.exe&quot;</span></span><br><span class="line"><span class="keyword">elif</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">    <span class="comment"># Linux下赋予驱动执行权限 sudo chmod +x drivers/chromedriver_linux64/chromedriver</span></span><br><span class="line">    DRIVER_PATH = <span class="string">r&quot;drivers/linux/chromedriver&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> <span class="built_in">print</span>(<span class="string">f&#x27;!!Error Driver path!!\nUnknown system: <span class="subst">&#123;platform.system()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><ul>
<li><p>无头模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Headless</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>禁用图片加载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disable image loading</span></span><br><span class="line">prefs = &#123; <span class="string">&#x27;profile.managed_default_content_settings.images&#x27;</span>: <span class="number">2</span> &#125;</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;prefs&quot;</span>, prefs)</span><br></pre></td></tr></table></figure></li>
<li><p>设置User-Agent</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UA</span></span><br><span class="line">options.add_argument(<span class="string">f&#x27;user-agent=<span class="subst">&#123;UA&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>设置代理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Proxy</span></span><br><span class="line">options.add_argument(<span class="string">f&quot;--proxy-server=<span class="subst">&#123;PROXY&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>设置缓存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cache data</span></span><br><span class="line">options.add_argument(<span class="string">f&quot;--user-data-dir=<span class="subst">&#123;CACHE_DIR&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>设置隐式等待</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">brower</span>.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>设置窗口大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># resize</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;window-size=1500x1200&#x27;</span>) </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="浏览器特征隐藏"><a href="#浏览器特征隐藏" class="headerlink" title="浏览器特征隐藏"></a>浏览器特征隐藏</h2><p><strong>隐藏驱动标识</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Delete &quot;navigator.webdriver&quot; property</span></span><br><span class="line">options.add_argument(<span class="string">&quot;disable-blink-features=AutomationControlled&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>使用puppeteer前端框架隐藏模拟浏览器的指纹特征的JS</p>
<blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JlcnN0ZW5kL3B1cHBldGVlci1leHRyYS90cmVlL21hc3Rlci9wYWNrYWdlcy9leHRyYWN0LXN0ZWFsdGgtZXZhc2lvbnM=">🚪</span></p>
</blockquote>
<p><code>stealth.min.js</code>文件生成, 需安装好<code>node.js</code>环境, <del>不挂代理速度会很慢</del></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行以下语句,会在当前文件夹生成stealth.min.js文件</span></span><br><span class="line">npx extract-stealth-evasions</span><br></pre></td></tr></table></figure>

<p>加载进浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行隐藏驱动特征JS</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;data/stealth.min.js&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    stealth_js = f.read()</span><br><span class="line">brower.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;<span class="string">&#x27;source&#x27;</span>: stealth_js&#125;)</span><br></pre></td></tr></table></figure>



<p>进入 <span class="exturl" data-url="aHR0cHM6Ly9ib3Quc2Fubnlzb2Z0LmNvbS8=">https://bot.sannysoft.com</span> 测试效果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&#x27;https://bot.sannysoft.com/&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.save_screenshot(<span class="string">&#x27;walkaround.png&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><ul>
<li><p>禁用JavaScript</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disable JS</span></span><br><span class="line">option.add_argument(<span class="string">&quot;--disable-javascript&quot;</span>) </span><br></pre></td></tr></table></figure></li>
<li><p>禁用浏览器弹窗</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disable the browser popover</span></span><br><span class="line">prefs = &#123;  </span><br><span class="line">    <span class="string">&#x27;profile.default_content_setting_values&#x27;</span> :  &#123;  </span><br><span class="line">        <span class="string">&#x27;notifications&#x27;</span> : <span class="number">2</span>  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;prefs&#x27;</span>,prefs)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="体验问题"><a href="#体验问题" class="headerlink" title="体验问题"></a>体验问题</h2><p>关闭日志输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Close logs</span></span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 命令文档</title>
    <url>/win/</url>
    <content><![CDATA[<blockquote>
<p>从玩Windows至今遇到超过2次的命令或问题记录.</p>
<p>部分命令cmd和PowerShell环境下均可用, 故不作细分😜</p>
</blockquote>
<p>PS: 大多数情况使用 <code>help &lt;命令&gt;</code> 或者 <code>&lt;命令&gt; help</code> 查看帮助文档可以自行解决问题.</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清屏</span></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置永久变量, 加上 /m 为系统变量, 路径有空格要用双引号括起来</span></span><br><span class="line">setx env_name env_value /m</span><br><span class="line"><span class="comment"># 追加环境变量</span></span><br><span class="line">setx <span class="string">&quot;path&quot;</span> <span class="string">&quot;%path%D:\test;&quot;</span> /m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启资源管理器</span></span><br><span class="line">taskkill /f /im explorer.exe &amp; <span class="built_in">start</span> explorer.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找端口程序</span></span><br><span class="line">netstat <span class="literal">-ano</span> | findstr <span class="number">8080</span></span><br><span class="line"><span class="comment"># 停止程序</span></span><br><span class="line">taskkill <span class="literal">-pid</span> &lt;进程pid&gt; <span class="operator">-f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看序列号</span></span><br><span class="line">wmic bios get serialnumber</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示正在运行服务</span></span><br><span class="line">net <span class="built_in">start</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">net <span class="built_in">start</span> [服务名]</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">net stop</span><br></pre></td></tr></table></figure>

<p><strong>PowerShell环境变量操作</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="variable">$Env:path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="variable">$Env:ETCDCTL_API</span>=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加</span></span><br><span class="line"><span class="variable">$Env:path</span>=<span class="variable">$Env:Path</span>+<span class="string">&quot;;C:\Run&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除</span></span><br><span class="line"><span class="built_in">remove-item</span> env:all_proxy</span><br></pre></td></tr></table></figure>



<h2 id="快捷运行"><a href="#快捷运行" class="headerlink" title="快捷运行"></a>快捷运行</h2><p>使用<code>Win + R</code>打开<code>运行</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问子系统</span></span><br><span class="line">\\wsl<span class="variable">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统详细信息</span></span><br><span class="line">systeminfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驱动程序验证程序管理器 </span></span><br><span class="line">verifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询启动加载项</span></span><br><span class="line">bcdedit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册表编辑器</span></span><br><span class="line">regedit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统属性</span></span><br><span class="line">sysdm.cpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统版本信息</span></span><br><span class="line">winver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书管理</span></span><br><span class="line">certmgr.msc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统详细信息</span></span><br><span class="line">msinfo32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务管理</span></span><br><span class="line">services.msc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户组管理</span></span><br><span class="line">lusrmgr.msc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务管理器</span></span><br><span class="line">Taskmgr</span><br></pre></td></tr></table></figure>



<h2 id="Linux子系统"><a href="#Linux子系统" class="headerlink" title="Linux子系统"></a>Linux子系统</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 查看子系统列表及分发版本</span></span><br><span class="line">wsl -l -v</span><br><span class="line"></span><br><span class="line"><span class="meta"># 卸载已经安装的发行版</span></span><br><span class="line">wslconfig /unregister &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 升级wsl版本</span></span><br><span class="line">wsl --<span class="keyword">set</span>-version &lt;distribution name&gt; &lt;versionNumber&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭 所有WSL服务</span></span><br><span class="line">wsl --shudown</span><br><span class="line">net stop LxssManager</span><br><span class="line"></span><br><span class="line"><span class="meta"># 移动WSL</span></span><br><span class="line"><span class="meta"># https://github.com/DDoSolitary/LxRunOffline</span></span><br><span class="line">LxRunOffline.exe move -n &lt;wsl-name&gt; -d &lt;dir&gt;</span><br><span class="line"></span><br><span class="line">lxrunoffline m -n docker-desktop -d D:\OWQ\Docker\wsl\distro</span><br><span class="line">lxrunoffline m -n docker-desktop-data -d D:\OWQ\Docker\wsl\data</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看路径</span></span><br><span class="line">lxrunoffline di -n docker-desktop</span><br><span class="line">lxrunoffline di -n docker-desktop-data</span><br></pre></td></tr></table></figure>

<h3 id="WSL2端口转发"><a href="#WSL2端口转发" class="headerlink" title="WSL2端口转发"></a>WSL2端口转发</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置端口转发</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=【宿主机windows平台监听端口】 listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span> connectport=【wsl2平台监听端口】 connectaddress=【wsl2平台ip】protocol=tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">80</span> listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span> connectport=<span class="number">80</span> connectaddress=<span class="number">172.30</span>.<span class="number">144.91</span> protocol=tcp</span><br><span class="line">或</span><br><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">80</span> listenaddress=* connectport=<span class="number">80</span> connectaddress=<span class="number">172.30</span>.<span class="number">144.91</span> protocol=tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口转发状态</span></span><br><span class="line">netsh interface portproxy show all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除端口转发</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=【宿主机windows平台监听端口】 listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">80</span> listenaddress=*</span><br><span class="line">或</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">80</span> listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 写的是0.0.0.0删的时候也需要是0.0.0.0进行对应，不然会提示找不到文件。</span></span><br></pre></td></tr></table></figure>



<h2 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩系统空间</span></span><br><span class="line">compact /compactos:always</span><br></pre></td></tr></table></figure>



<h2 id="修复命令"><a href="#修复命令" class="headerlink" title="修复命令"></a>修复命令</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SFC扫描</span></span><br><span class="line">sfc /scannow</span><br><span class="line"></span><br><span class="line"><span class="comment"># DISM扫描</span></span><br><span class="line">DISM /Online /Cleanup<span class="literal">-Image</span> /RestoreHealth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘修复</span></span><br><span class="line">chkdsk C:/f</span><br></pre></td></tr></table></figure>



<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除文件/目录</span></span><br><span class="line"><span class="built_in">rmdir</span> /s/q &lt;<span class="built_in">dir</span>&gt; 删除整个目录</span><br><span class="line">    /s 是代表删除所有子目录跟其中的档案。 </span><br><span class="line">    /q 是不要它在删除档案或目录时，不再问我 Yes or No 的动作。 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">md</span> &lt;catalogue&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件只读、隐藏属性修改</span></span><br><span class="line">attrib S <span class="built_in">H</span></span><br><span class="line"><span class="comment"># 查看帮助(cmd)</span></span><br><span class="line">help attrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件或目录彻底隐藏在资源管理器中</span></span><br><span class="line">attrib +s +a +<span class="built_in">h</span> +<span class="built_in">r</span> D:\\ico.ico</span><br><span class="line">attrib +s +a +<span class="built_in">h</span> +<span class="built_in">r</span> D:\\autorun.inf</span><br><span class="line"><span class="comment"># 恢复正常显示</span></span><br><span class="line">attrib <span class="literal">-s</span> <span class="literal">-a</span> <span class="literal">-h</span> <span class="literal">-r</span> C:\\ico.ico</span><br></pre></td></tr></table></figure>



<h2 id="电源相关"><a href="#电源相关" class="headerlink" title="电源相关"></a>电源相关</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电源控制</span></span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/s</span>			关机</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/r</span>			重启</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/l</span>			注销</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/h</span> <span class="string">/f</span>		休眠</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/a</span>			取消关机</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/s</span> <span class="string">/t</span> 3600	定时关机（单位秒）</span><br></pre></td></tr></table></figure>



<h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 网卡信息</span></span><br><span class="line">ipconfig</span><br><span class="line"></span><br><span class="line"><span class="meta"># 路由跟踪</span></span><br><span class="line">tracert &lt;域名&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 网关(DNS)查询</span></span><br><span class="line">nslookup &lt;域名&gt; [DNS服务器]</span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看路由表</span></span><br><span class="line">route print</span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置承载网络模式</span></span><br><span class="line">netsh wlan <span class="keyword">set</span> hostednetwork mode=allow</span><br><span class="line"><span class="meta"># 设置无线热点名称和密码</span></span><br><span class="line">netsh wlan <span class="keyword">set</span> hostednetwork ssid=CooNb key=<span class="string">&quot;passwprd&quot;</span></span><br><span class="line"><span class="meta"># 启动承载网络</span></span><br><span class="line">netsh wlan start hostednetwork</span><br><span class="line"></span><br><span class="line"><span class="meta"># HTTP 代理设置</span></span><br><span class="line"><span class="keyword">set</span> http_proxy=http:<span class="comment">//127.0.0.1:7890</span></span><br><span class="line"><span class="keyword">set</span> https_proxy=http:<span class="comment">//127.0.0.1:7890</span></span><br><span class="line"><span class="meta"># SOCKS5 代理设置</span></span><br><span class="line"><span class="keyword">set</span> http_proxy=socks5:<span class="comment">//127.0.0.1:7890</span></span><br><span class="line"><span class="keyword">set</span> https_proxy=socks5:<span class="comment">//127.0.0.1:7890</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 取消代理</span></span><br><span class="line">unset http_proxy &amp; unset https_proxy</span><br><span class="line"></span><br><span class="line"><span class="meta"># 代理检测</span></span><br><span class="line">curl -vv http:<span class="comment">//www.google.com</span></span><br></pre></td></tr></table></figure>



<h2 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前编码</span></span><br><span class="line">chcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为UTF-8</span></span><br><span class="line">chcp 65001</span><br><span class="line">    - 65001  UTF-8</span><br><span class="line">    - 20936  GB2312</span><br><span class="line">    - 936    GBK</span><br><span class="line">    - 437    English US</span><br></pre></td></tr></table></figure>



<h2 id="实用设置"><a href="#实用设置" class="headerlink" title="实用设置"></a>实用设置</h2><h3 id="添加新建文本快捷键"><a href="#添加新建文本快捷键" class="headerlink" title="添加新建文本快捷键"></a>添加新建文本快捷键</h3><ul>
<li><code>Win + R</code>运行<code>regedit</code>找到<code>HKEY_CLASSES_ROOT\LocalSettings\ImmutableMuiCache\Strings\AAF68885</code></li>
<li>之后找到右侧的<code>@C:\Windows\system32\notepad.exe,-469</code>，将值 <code>文本文档</code> 改为 <code>文本文档 (&amp;T)</code></li>
<li>重动资源管理器就可以看到效果了，<code>右键&gt;w&gt;t</code>就可以快速新建一个TXT文本了</li>
</ul>
<h3 id="改变CMD编码为UTF-8-以使用Truetype字体-不推荐"><a href="#改变CMD编码为UTF-8-以使用Truetype字体-不推荐" class="headerlink" title="改变CMD编码为UTF-8 以使用Truetype字体(不推荐)"></a>改变CMD编码为UTF-8 以使用Truetype字体(不推荐)</h3><ul>
<li><code>Win + R</code>运行<code>regedit</code>找到<code>HKEY_LOCAL_MACHINE\Software\Microsoft\CommandProcessor</code></li>
<li>修改<code>Autorun</code>的值为<code>@chcp 65001&gt;nul</code>，如果没有则创建一个字符串类型<code>Autorun</code>，把值设为<code>@chcp 65001&gt;nul</code></li>
<li>用管理员权限打开一个CMD窗口，输入<code>REG ADD &quot;HKLM\Software\Microsoft\Command Processor&quot; /v Autorun /t REG_SZ /d &quot;@chcp 65001&gt;nul&quot;</code></li>
<li>查看<code>\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Console\TrueTypeFont</code></li>
</ul>
<h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><h3 id="解决文件被占用"><a href="#解决文件被占用" class="headerlink" title="解决文件被占用"></a>解决文件被占用</h3><p>方法一</p>
<ul>
<li><p>定位进程<br><code>Win+R</code>打开【运行】-&gt; 输入<code>eventvwr.msc</code>回车打开【事件查看器】-&gt; 事件查看器 (本地) -&gt; Windows 日志-&gt; 系统 -&gt; 找到最近的【警告 来源 Kernel-PnP】-&gt; 双击打开 -&gt; 找到【进程ID为 xx 的应用程序已停止删除或弹出设备】，记住这个进程 ID。</p>
</li>
<li><p>结束进程</p>
<ul>
<li>打开【任务管理器】-&gt; 详细信息 -&gt; 点击 PID 排序 -&gt; 找到 ID 对应的进程，尝试结束进程。</li>
</ul>
</li>
</ul>
<p>方法二</p>
<ul>
<li><code>Win+R</code> 打开【运行】-&gt; 输入 <code>taskmgr</code> 回车打开【任务管理器】-&gt; 性能 -&gt; 打开资源监视器 -&gt; CPU -&gt; 关联的句柄 -&gt; 输入你的盘符, 例如你的移动存储设备是 F 盘, 输入 F: -&gt; 把下面搜索出来的进程全部结束。</li>
</ul>
<p>方法三</p>
<ul>
<li><code>Win+X</code> 打开 计算机管理 -&gt; 磁盘管理，右键，选择脱机</li>
</ul>
<h3 id="关机停留在等待程序关闭界面"><a href="#关机停留在等待程序关闭界面" class="headerlink" title="关机停留在等待程序关闭界面"></a>关机停留在等待程序关闭界面</h3><p>打开 <code>regedit</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Control Panel\Desktop</span><br></pre></td></tr></table></figure>

<p>添加键：<code>AutoEndTasks</code> 值：1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> bootstatuspolicy ignoreallfailures</span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;服务名&#125; recoveryenabled No  修改启动</span><br></pre></td></tr></table></figure>



<h3 id="网络正常图标显示无连接"><a href="#网络正常图标显示无连接" class="headerlink" title="网络正常图标显示无连接"></a>网络正常图标显示无连接</h3><p>打开 <code>regedit</code></p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>YSTEM<span class="symbol">\C</span>urrentControlSet<span class="symbol">\s</span>ervices<span class="symbol">\N</span>laSvc<span class="symbol">\P</span>arameters<span class="symbol">\I</span>nternet</span><br></pre></td></tr></table></figure>

<p>修改 <code>EnableActiveProbing</code> 值为 0<br>打开 <code>services.msc</code> 服务管理<br>重启 <code>Microsoft Account Sign-in Assistant</code> 服务</p>
<h3 id="重置网络设置后WiFi图标消失"><a href="#重置网络设置后WiFi图标消失" class="headerlink" title="重置网络设置后WiFi图标消失"></a>重置网络设置后WiFi图标消失</h3><p><code>Win+R</code>输入<code>services.msc</code><br>找到<code>WLAN AutoConfig</code>和<code>Wired AutoConfig</code>服务，确保服务为开启状态</p>
<h3 id="访问不了网络"><a href="#访问不了网络" class="headerlink" title="访问不了网络"></a>访问不了网络</h3><ul>
<li>运行 inetcpl.cpl</li>
<li>高级--使用TLS1.2--还原高级设置</li>
</ul>
<h3 id="取消微软服务代理转发"><a href="#取消微软服务代理转发" class="headerlink" title="取消微软服务代理转发"></a>取消微软服务代理转发</h3><ul>
<li>安装<code>Fiddler4</code></li>
<li>打开左上角<code>winconfig</code></li>
<li>把微软产品全部打勾保存</li>
</ul>
<h3 id="禁用-恢复-Windows-Defender"><a href="#禁用-恢复-Windows-Defender" class="headerlink" title="禁用/恢复 Windows Defender"></a>禁用/恢复 Windows Defender</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用</span></span><br><span class="line">reg add “HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender” /v “DisableAntiSpyware” /d <span class="number">1</span> /t REG_DWORD /f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">reg add “HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender” /v “DisableAntiSpyware” /d <span class="number">0</span> /t REG_DWORD /f</span><br></pre></td></tr></table></figure>

<h3 id="用户权限问题"><a href="#用户权限问题" class="headerlink" title="用户权限问题"></a>用户权限问题</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建用户账号</span></span><br><span class="line">net user &lt;user&gt; &lt;passwd&gt; /add</span><br><span class="line"><span class="comment"># 赋予该账号管理员权限</span></span><br><span class="line">net localgroup administrators &lt;user&gt; /add</span><br><span class="line"><span class="comment"># 删除用户账号</span></span><br><span class="line">net user &lt;user&gt; /<span class="built_in">del</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>cmd</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式手册</title>
    <url>/regex/</url>
    <content><![CDATA[<h2 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h2><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>*</strong></td>
<td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，<code>n</code>匹配字符<code>n</code>。<code>\n</code>匹配一个换行符。串行<code>\\</code>匹配<code>\</code>而<code>\(</code>则匹配<code>(</code>。</td>
</tr>
<tr>
<td align="center"><strong>^</strong></td>
<td align="left">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配<code>\n</code>或<code>\r</code>之后的位置。</td>
</tr>
<tr>
<td align="center"><strong>$</strong></td>
<td align="left">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配<code>\n</code>或<code>\r</code>之前的位置。</td>
</tr>
<tr>
<td align="center"><strong>*</strong></td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo<em>能匹配<code>z</code>以及<code>zoo</code>。</em>等价于{0,}。</td>
</tr>
<tr>
<td align="center"><strong>+</strong></td>
<td align="left">匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配<code>zo</code>以及<code>zoo</code>，但不能匹配<code>z</code>。+等价于{1,}。</td>
</tr>
<tr>
<td align="center"><strong>?</strong></td>
<td align="left">匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配<code>does</code>或<code>does</code>中的<code>do</code>。?等价于{0,1}。</td>
</tr>
<tr>
<td align="center"><strong>{<em>n</em>}</strong></td>
<td align="left"><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，<code>o&#123;2&#125;</code>不能匹配<code>Bob</code>中的<code>o</code>，但是能匹配<code>food</code>中的两个o。</td>
</tr>
<tr>
<td align="center"><strong>{<em>n</em>,}</strong></td>
<td align="left"><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，<code>o&#123;2,&#125;</code>不能匹配<code>Bob</code>中的<code>o</code>，但能匹配<code>foooood</code>中的所有o。<code>o&#123;1,&#125;</code>等价于<code>o+</code>。<code>o&#123;0,&#125;</code>则等价于<code>o*</code>。</td>
</tr>
<tr>
<td align="center"><strong>{<em>n</em>,<em>m</em>}</strong></td>
<td align="left"><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，<code>o&#123;1,3&#125;</code>将匹配<code>fooooood</code>中的前三个o。<code>o&#123;0,1&#125;</code>等价于<code>o?</code>。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td align="center"><strong>?</strong></td>
<td align="left">当该字符紧跟在任何一个其他限制符（*,+,?，{<em>n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串<code>oooo</code>，<code>o+?</code>将匹配单个<code>o</code>，而<code>o+</code>将匹配所有<code>o</code>。</td>
</tr>
<tr>
<td align="center"><strong>.</strong></td>
<td align="left">匹配除<code>\</code>*<code>n</code><em>之外的任何单个字符。要匹配包括<code>\</code></em><code>n</code>*在内的任何字符，请使用像`(.</td>
</tr>
<tr>
<td align="center"><strong>(pattern)</strong></td>
<td align="left">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用<code>\(</code>或<code>\)</code>。</td>
</tr>
<tr>
<td align="center"><strong>(?:pattern)</strong></td>
<td align="left">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符`(</td>
</tr>
<tr>
<td align="center"><strong>(?=pattern)</strong></td>
<td align="left">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，`Windows(?=95</td>
</tr>
<tr>
<td align="center"><strong>(?!pattern)</strong></td>
<td align="left">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如`Windows(?!95</td>
</tr>
<tr>
<td align="center"><strong>(?&lt;=pattern)</strong></td>
<td align="left">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，`(?&lt;=95</td>
</tr>
<tr>
<td align="center"><strong>(?&lt;!pattern)</strong></td>
<td align="left">反向否定预查，与正向否定预查类拟，只是方向相反。例如`(?&lt;!95</td>
</tr>
<tr>
<td align="center"><strong>x|y</strong></td>
<td align="left">匹配x或y。例如，`z</td>
</tr>
<tr>
<td align="center"><strong>[xyz]</strong></td>
<td align="left">字符集合。匹配所包含的任意一个字符。例如，<code>[abc]</code>可以匹配<code>plain</code>中的<code>a</code>。</td>
</tr>
<tr>
<td align="center"><strong>[^xyz]</strong></td>
<td align="left">负值字符集合。匹配未包含的任意字符。例如，<code>[^abc]</code>可以匹配<code>plain</code>中的<code>p</code>。</td>
</tr>
<tr>
<td align="center"><strong>[a-z]</strong></td>
<td align="left">字符范围。匹配指定范围内的任意字符。例如，<code>[a-z]</code>可以匹配<code>a</code>到<code>z</code>范围内的任意小写字母字符。</td>
</tr>
<tr>
<td align="center"><strong>[^a-z]</strong></td>
<td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，<code>[^a-z]</code>可以匹配任何不在<code>a</code>到<code>z</code>范围内的任意字符。</td>
</tr>
<tr>
<td align="center"><strong>\b</strong></td>
<td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如，<code>er\b</code>可以匹配<code>never</code>中的<code>er</code>，但不能匹配<code>verb</code>中的<code>er</code>。</td>
</tr>
<tr>
<td align="center"><strong>\B</strong></td>
<td align="left">匹配非单词边界。<code>er\B</code>能匹配<code>verb</code>中的<code>er</code>，但不能匹配<code>never</code>中的<code>er</code>。</td>
</tr>
<tr>
<td align="center"><strong>\cx</strong></td>
<td align="left">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的<code>c</code>字符。</td>
</tr>
<tr>
<td align="center"><strong>\d</strong></td>
<td align="left">匹配一个数字字符。等价于[0-9]。</td>
</tr>
<tr>
<td align="center"><strong>\D</strong></td>
<td align="left">匹配一个非数字字符。等价于[^0-9]。</td>
</tr>
<tr>
<td align="center"><strong>\f</strong></td>
<td align="left">匹配一个换页符。等价于\x0c和\cL。</td>
</tr>
<tr>
<td align="center"><strong>\n</strong></td>
<td align="left">匹配一个换行符。等价于\x0a和\cJ。</td>
</tr>
<tr>
<td align="center"><strong>\r</strong></td>
<td align="left">匹配一个回车符。等价于\x0d和\cM。</td>
</tr>
<tr>
<td align="center"><strong>\s</strong></td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center"><strong>\S</strong></td>
<td align="left">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center"><strong>\t</strong></td>
<td align="left">匹配一个制表符。等价于\x09和\cI。</td>
</tr>
<tr>
<td align="center"><strong>\v</strong></td>
<td align="left">匹配一个垂直制表符。等价于\x0b和\cK。</td>
</tr>
<tr>
<td align="center"><strong>\w</strong></td>
<td align="left">匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code>。</td>
</tr>
<tr>
<td align="center"><strong>\W</strong></td>
<td align="left">匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code>。</td>
</tr>
<tr>
<td align="center"><strong>\x<em>n</em></strong></td>
<td align="left">匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，<code>\x41</code>匹配<code>A</code>。<code>\x041</code>则等价于<code>\x04&amp;1</code>。正则表达式中可以使用ASCII编码。.</td>
</tr>
<tr>
<td align="center"><strong>*num</strong>*</td>
<td align="left">匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，<code>(.)\1</code>匹配两个连续的相同字符。</td>
</tr>
<tr>
<td align="center"><strong>*n</strong>*</td>
<td align="left">标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n*为一个八进制转义值。</td>
</tr>
<tr>
<td align="center"><strong>*nm</strong>*</td>
<td align="left">标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果*nm</em>之前至少有<em>n</em>个获取，则<em>n</em>为一个后跟文字<em>m</em>的向后引用。如果前面的条件都不满足，若<em>n</em>和<em>m</em>均为八进制数字（0-7），则*nm<em>将匹配八进制转义值</em>nm*。</td>
</tr>
<tr>
<td align="center"><strong>*nml</strong>*</td>
<td align="left">如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td>
</tr>
<tr>
<td align="center"><strong>\u<em>n</em></strong></td>
<td align="left">匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td>
</tr>
</tbody></table>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th>regex</th>
</tr>
</thead>
<tbody><tr>
<td align="left">用户名</td>
<td>/^[a-z0-9_-]{3,16}$/</td>
</tr>
<tr>
<td align="left">密码</td>
<td>/^[a-z0-9_-]{6,18}$/</td>
</tr>
<tr>
<td align="left">十六进制值</td>
<td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td>
</tr>
<tr>
<td align="left">电子邮箱</td>
<td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\d]+(.[a-z\d]+)*@(<a href="-%5B%5Cda-z%5D">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td>
</tr>
<tr>
<td align="left">URL</td>
<td>/^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]*)*/?$/</td>
</tr>
<tr>
<td align="left">IP 地址</td>
<td>/((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</td>
</tr>
<tr>
<td align="left">HTML 标签</td>
<td>/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\1&gt;|\s+/&gt;)$/</td>
</tr>
<tr>
<td align="left">删除代码\注释</td>
<td>(?&lt;!http:|\S)//.*$</td>
</tr>
<tr>
<td align="left">Unicode编码中的汉字范围</td>
<td>/^[\u2E80-\u9FFF]+$/</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 命令</title>
    <url>/docker/</url>
    <content><![CDATA[<h2 id="源配置"><a href="#源配置" class="headerlink" title="源配置"></a>源配置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version		<span class="comment"># 版本信息</span></span><br><span class="line">docker info		<span class="comment"># 系统信息</span></span><br><span class="line">docker &lt;order&gt; --<span class="built_in">help</span>	<span class="comment"># 帮助命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器最后10条日志</span></span><br><span class="line">docker logs -f -t --tail 10 &lt;container&gt;</span><br></pre></td></tr></table></figure>



<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images			<span class="comment"># 查看镜像</span></span><br><span class="line">docker images -aq		<span class="comment"># 只显示镜像ID</span></span><br><span class="line">docker search &lt;image&gt;		<span class="comment"># 搜索镜像</span></span><br><span class="line">docker pull &lt;image&gt;		<span class="comment"># 下载镜像</span></span><br><span class="line">docker rmi -f &lt;image&gt;		<span class="comment"># 删除镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit 镜像</span></span><br><span class="line">docker commit  -m=<span class="string">&#x27;描述信息&#x27;</span> -a=<span class="string">&#x27;作者&#x27;</span> 容器id 目标镜像名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像重命名</span></span><br><span class="line">docker tag local-image:tagname new-repo:tagname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到Hub</span></span><br><span class="line">docker push new-repo:tagname</span><br></pre></td></tr></table></figure>



<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run [param] &lt;image&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># run参数说明</span></span><br><span class="line">  --name=<span class="string">&quot;Name&quot;</span>		<span class="comment"># 容器名字 用来区分</span></span><br><span class="line">  -d	<span class="comment"># 后台方式运行</span></span><br><span class="line">  -it	<span class="comment"># 使用交互方式运行</span></span><br><span class="line">  -p	<span class="comment"># 指定容器端口 -p 8080:8080</span></span><br><span class="line">    -p	 <span class="comment"># ip:主机端口:容器端口</span></span><br><span class="line">    -p	 <span class="comment"># 主机端口:容器端口</span></span><br><span class="line">    -p	 <span class="comment"># 容器端口</span></span><br><span class="line">  -P	<span class="comment"># 大写P 随机端口</span></span><br><span class="line"></span><br><span class="line">dockee ps	<span class="comment"># 查看正在运行容器</span></span><br><span class="line">docker ps -a	<span class="comment"># 查看全部容器</span></span><br><span class="line">docker ps -a --no-trunc	<span class="comment"># 显示所以启动参数</span></span><br><span class="line">docker rm &lt;containerID&gt; <span class="comment"># 删除容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器详细信息</span></span><br><span class="line">docker inspect &lt;container&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器占用空间</span></span><br><span class="line">docker system df -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker rm -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line">docker start &lt;container&gt;	<span class="comment"># 启动容器</span></span><br><span class="line">docker restart &lt;container&gt;	<span class="comment"># 重启容器</span></span><br><span class="line">docker stop &lt;container&gt;		<span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span> &lt;container&gt;		<span class="comment"># 强制停止容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> &lt;container&gt;		<span class="comment"># 开启新的终端</span></span><br><span class="line">docker attach &lt;container&gt;	<span class="comment"># 进入当前运行终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互模式进入正在运行容器 </span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container&gt; /bin/bash	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容器内拷贝文件到主机</span></span><br><span class="line">docker cp &lt;container&gt;:容器路径 主机路径</span><br><span class="line"><span class="comment"># 从主机内拷贝文件到容器</span></span><br><span class="line">docker cp 主机路径 &lt;container&gt;:容器路径</span><br></pre></td></tr></table></figure>



<h2 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止并退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 退出不停止（快捷键）</span></span><br><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure>

<h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 -v 挂载</span></span><br><span class="line">docker run -it -v &lt;主机目录&gt;:&lt;容器目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定路径挂载</span></span><br><span class="line">docker run -it -v /home/<span class="built_in">test</span>:/home centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名挂载 -v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /ect/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 volume 的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具名挂载</span></span><br><span class="line">docker run -d -P --name nginx02 -v v-nginx:/etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 -v 容器路径 ro rw 改变读写权限</span></span><br><span class="line">  ro	<span class="built_in">readonly</span> 		<span class="comment"># 只读</span></span><br><span class="line">  rw	readwrite		<span class="comment"># 可读可写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读权限设置</span></span><br><span class="line">dockers run -d -P --name nginx02 -v nginx:/etc/nginx:ro</span><br></pre></td></tr></table></figure>

<h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network ls		<span class="comment"># 查看网络列表</span></span><br><span class="line">docker network inspect &lt;name&gt;	<span class="comment"># 查看网络详情</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --net 指定网卡(docker默认是bridge)</span></span><br><span class="line">docker run -d -P --net bridge tomcat</span><br><span class="line">	<span class="comment"># 自定义网络配置</span></span><br><span class="line">    --driver bridge		<span class="comment"># 网络模式</span></span><br><span class="line">    --subnet 192.168.0.0/16	<span class="comment"># 子网</span></span><br><span class="line">    --gateway 192.168.0.1	<span class="comment"># 网关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟网卡</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器连接到网卡 打通容器与容器间网络</span></span><br><span class="line">docker network connect &lt;net&gt; &lt;ctn&gt;		<span class="comment"># 建立桥接</span></span><br><span class="line">docker network disconnect &lt;net&gt; &lt;ctn&gt;	<span class="comment"># 断开桥接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将容器连接到网络</span></span><br><span class="line">docker network connect &lt;net&gt; &lt;ctn&gt;</span><br></pre></td></tr></table></figure>



<h2 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令和git类似类似, 把自己修改的东西形成一个层 封装成一个镜像</span></span><br><span class="line">docker commit -m=<span class="string">&#x27;描述信息&#x27;</span> -a=<span class="string">&#x27;作者&#x27;</span> 容器id 目标镜像名</span><br></pre></td></tr></table></figure>



<h2 id="迁移操作"><a href="#迁移操作" class="headerlink" title="迁移操作"></a>迁移操作</h2><p><strong>镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩镜像</span></span><br><span class="line">docker save -o image-name.tar image-name </span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载镜像</span></span><br><span class="line">docker load image-name.tar</span><br></pre></td></tr></table></figure>

<p><strong>容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出容器到tar文件</span></span><br><span class="line">docker <span class="built_in">export</span> container-name container-name.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载容器文件创建镜像文件</span></span><br><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>



<h2 id="DockerFile-命令"><a href="#DockerFile-命令" class="headerlink" title="DockerFile 命令"></a>DockerFile 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成镜像</span></span><br><span class="line">docker build -f dockerfile文件 -t 镜像名:[tag] .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看初始化运行记录</span></span><br><span class="line">docker <span class="built_in">history</span> 镜像id</span><br></pre></td></tr></table></figure>



<h2 id="DockerFile-指令"><a href="#DockerFile-指令" class="headerlink" title="DockerFile 指令"></a>DockerFile 指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM		<span class="comment"># 基础镜像 一切从这里开始构建</span></span><br><span class="line">MAINTAINER	<span class="comment"># 镜像是谁写的 name+mail</span></span><br><span class="line">RUN		<span class="comment"># 镜像构建时候运行的命令</span></span><br><span class="line">ADD		<span class="comment"># 步骤 tomcat镜像 这个tomcat压缩包！添加内容</span></span><br><span class="line">WORKDIT		<span class="comment"># 镜像工作目录</span></span><br><span class="line">VOLUME		<span class="comment"># 挂载的目录</span></span><br><span class="line">EXPOST		<span class="comment"># 保留端口配置</span></span><br><span class="line">CMD		<span class="comment"># 指定这个容器启动时候运行的命令,自由最后一个会生效，可被替代</span></span><br><span class="line">ENTRTPOINT	<span class="comment"># 指定这个容器启动时候要运行的命令，可以追加命令</span></span><br><span class="line">ONBUILD		<span class="comment"># 被继承 DockerFIle 时候运行，触发命令</span></span><br><span class="line">COPY		<span class="comment"># 类型ADD,将文件拷贝到镜像</span></span><br><span class="line">ENV		<span class="comment"># 构建时候设置环境变量</span></span><br></pre></td></tr></table></figure>



<h2 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up                  <span class="comment"># 启动所有容器</span></span><br><span class="line">docker-compose up -d               <span class="comment"># 后台启动并运行所有容器</span></span><br><span class="line">docker-compose up --no-recreate -d <span class="comment"># 不重新创建已经停止的容器</span></span><br><span class="line">docker-compose up -d test2         <span class="comment"># 只启动test2这个容器</span></span><br><span class="line">docker-compose stop                <span class="comment"># 停止容器</span></span><br><span class="line">docker-compose start               <span class="comment"># 启动容器</span></span><br><span class="line">docker-compose down                <span class="comment"># 停止并销毁容器</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git 命令</title>
    <url>/git/</url>
    <content><![CDATA[<h2 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config user.name &lt;name&gt;</span><br><span class="line">git config user.email &lt;email&gt;</span><br><span class="line">git config --global user.name &lt;name&gt;	<span class="comment"># 配置全局用户名</span></span><br><span class="line">git config --global user.email &lt;email&gt;	<span class="comment"># 配置全局邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色标识（默认开启）</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy &lt;proxy&gt;</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy &lt;proxy&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config list</span><br></pre></td></tr></table></figure>



<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到index</span></span><br><span class="line">git add &lt;pathspec&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除index中的文件</span></span><br><span class="line">git rm &lt;pathspec&gt;</span><br><span class="line"><span class="comment"># 删除未提交缓存</span></span><br><span class="line">git rm --cached &lt;pathspec&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看仓库状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 查看分支合并</span></span><br><span class="line">git <span class="built_in">log</span> --graph</span><br><span class="line"><span class="comment"># 精简查看</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line">git commit -m &lt;message&gt;			<span class="comment"># 提交文件，附带版本说明</span></span><br><span class="line">git commit --amend -m &lt;message&gt;		<span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit -am &lt;message&gt;		<span class="comment"># 将add和commit合为一步</span></span><br><span class="line"></span><br><span class="line">git remote -v				<span class="comment"># 查看远程仓库地址</span></span><br><span class="line">git remote add origin &lt;url&gt;		<span class="comment"># 添加origin分支</span></span><br><span class="line">git remote rm origin			<span class="comment"># 删除origin分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新设置远程仓库地址</span></span><br><span class="line">git remote set-url origin &lt;git.url&gt;</span><br><span class="line"></span><br><span class="line">git pull	<span class="comment"># 拉 简写形式</span></span><br><span class="line">git pull origin master			<span class="comment"># 同步远程仓库更新到master分支</span></span><br><span class="line"></span><br><span class="line">git push	<span class="comment"># 推 简写形式</span></span><br><span class="line">git push -u origin master		<span class="comment"># 推送本地仓库到origin分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前分支的关联的远程分支</span></span><br><span class="line">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>



<h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 difference（差异）</span></span><br><span class="line">git diff		<span class="comment"># 工作区与暂存区</span></span><br><span class="line">git diff --cached 	<span class="comment"># 暂存区与版本库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到上一版本 HEAD~100 前100个版本 可指定&lt;版本号&gt;</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line">git branch &lt;branch&gt; 	<span class="comment"># 创建分支</span></span><br><span class="line">git branch -d &lt;branch&gt;	<span class="comment"># 删除分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复（删除）工作区更改</span></span><br><span class="line">git checkout</span><br><span class="line">git checkout &lt;branch&gt; 	<span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b &lt;branch&gt;<span class="comment"># 创建并切换分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch</span><br><span class="line"><span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git fetch --prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支但不丢弃分支信息</span></span><br><span class="line">git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建临时分支</span></span><br><span class="line">git stash</span><br><span class="line">git stash list	<span class="comment"># 查看临时分支</span></span><br><span class="line">git stash drop	<span class="comment"># 删除stash</span></span><br><span class="line">git stash apply	<span class="comment"># 恢复分支内容</span></span><br><span class="line">git stash pop	<span class="comment"># 恢复分支内容并删除stash</span></span><br><span class="line">git stash apply stash@&#123;0&#125;<span class="comment"># 恢复指定的stash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制一个特定的提交到当前分支</span></span><br><span class="line">git cherry-pick &lt;版本号&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 1acd5de</span><br><span class="line"><span class="comment"># 保存修改后分支</span></span><br><span class="line">it switch -c &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 恢复切换前分支</span></span><br><span class="line">git switch -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地仓库强制替换远程仓库</span></span><br><span class="line">git push --force --set-upstream origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h3 id="替换分支"><a href="#替换分支" class="headerlink" title="替换分支"></a>替换分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将master替换成mainf</span></span><br><span class="line">git checkout main</span><br><span class="line">git merge -s ours master	<span class="comment"># git --strategy=ours ours master</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge main</span><br></pre></td></tr></table></figure>



<h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看子模块</span></span><br><span class="line">git submodule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加子模块</span></span><br><span class="line">git submodule add &lt;项目地址&gt; &lt;路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新子模块</span></span><br><span class="line">git submodule update --init --remote --recursive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除子模块</span></span><br><span class="line">git rm -rf --cached &lt;路径&gt;</span><br></pre></td></tr></table></figure>



<h2 id="zsh-快捷命令"><a href="#zsh-快捷命令" class="headerlink" title="zsh 快捷命令"></a>zsh 快捷命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gapa    	git add --patch</span><br><span class="line">gc!   		git commit -v --amend</span><br><span class="line">gcl  		git <span class="built_in">clone</span> --recursive</span><br><span class="line">gclean    	git reset --hard &amp;&amp; git clean -dfx</span><br><span class="line">gcm    		git checkout master</span><br><span class="line">gcmsg    	git commit -m</span><br><span class="line">gco    		git checkout</span><br><span class="line">gd    		git diff</span><br><span class="line">gdca    	git diff --cached</span><br><span class="line">gp    		git push</span><br><span class="line">grbc    	git rebase --<span class="built_in">continue</span></span><br><span class="line">gst    		git status</span><br><span class="line">gup    		git pull --rebase</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>pacman 命令</title>
    <url>/pacman/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级整个系统，-y 更新数据库, -yy 强制更新, -u是升级软件</span></span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除软件缓存，即/var/cache/pacman/pkg目录下的文件</span></span><br><span class="line">pacman -Sc</span><br></pre></td></tr></table></figure>



<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在包数据库中查询软件</span></span><br><span class="line">pacman -Ss &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示软件的详细信息</span></span><br><span class="line">pacman -Si &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询已安装的软件包</span></span><br><span class="line">pacman -Qs &lt;package&gt;</span><br><span class="line"><span class="comment"># 查询本地安装包的详细信息</span></span><br><span class="line">pacman -Qi &lt;package&gt;</span><br><span class="line"><span class="comment"># 获取已安装软件所包含的文件的列表</span></span><br><span class="line">pacman -Ql &lt;package&gt;	</span><br></pre></td></tr></table></figure>



<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">pacman -S &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装不同仓库中的版本</span></span><br><span class="line">pacman -S &lt;extra&gt;/&lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从本地文件安装</span></span><br><span class="line">pacman -U package.tar.zx</span><br></pre></td></tr></table></figure>



<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除单个软件</span></span><br><span class="line">pacman -R &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定软件及其没有被其他已安装软件使用的依赖关系</span></span><br><span class="line">pacman -Rs &lt;package&gt; </span><br></pre></td></tr></table></figure>



<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示软件的依赖树</span></span><br><span class="line">pactree &lt;package&gt;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Arch Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pip 命令</title>
    <url>/pip/</url>
    <content><![CDATA[<h2 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt</span> install python<span class="number">3</span>-pip</span><br></pre></td></tr></table></figure>



<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">pip list			<span class="meta"># 显示已安装的库</span></span><br><span class="line">pip list -o			<span class="meta"># 显示已过时的库</span></span><br><span class="line">pip <span class="keyword">show</span> &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 显示库信息</span></span><br><span class="line">pip install &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 安装库</span></span><br><span class="line">pip install -U &lt;<span class="keyword">library</span>&gt;	<span class="meta"># 更新库</span></span><br><span class="line">pip uninstall &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 卸载库</span></span><br><span class="line">pip check &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 检查依赖</span></span><br><span class="line">pip [cmd] -h			<span class="meta"># 显示帮助</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 生成已按照包列表文件</span></span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 安装文件内所有包</span></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 设置默认使用pip3</span></span><br><span class="line">pip3 intall --upgrade pip</span><br></pre></td></tr></table></figure>



<h2 id="源配置"><a href="#源配置" class="headerlink" title="源配置"></a>源配置</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时使用 -i</span></span><br><span class="line">pip install [module] -i https:<span class="regexp">//</span>pypi.org/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">pip config set global.index-url https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line">pip config set global.index-url https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/pypi/</span>simple/</span><br><span class="line"><span class="comment"># 腾讯源</span></span><br><span class="line">pip config set global.index-url http:<span class="regexp">//mi</span>rrors.cloud.tencent.com<span class="regexp">/pypi/</span>simple</span><br><span class="line"><span class="comment"># 豆瓣源</span></span><br><span class="line">pip config set global.index-url http:<span class="regexp">//</span>pypi.douban.com<span class="regexp">/simple/</span></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">pip config set global.index-url https:<span class="regexp">//</span>pypi.org/simple</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>systemctl 命令</title>
    <url>/systemctl/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start &lt;servicename&gt;    	<span class="comment"># 启动服务</span></span><br><span class="line">systemctl stop &lt;servicename&gt;     	<span class="comment"># 关闭服务</span></span><br><span class="line">systemctl restart &lt;servicename&gt;		<span class="comment"># 重启服务</span></span><br><span class="line">systemctl reload &lt;servicename&gt;    	<span class="comment"># 重新加载配置文件</span></span><br><span class="line">systemctl status &lt;servicename&gt;    	<span class="comment"># 查看服务状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务的配置文件</span></span><br><span class="line">systemctl cat &lt;servicename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有服务的状态</span></span><br><span class="line">systemctl -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前系统服务状态</span></span><br><span class="line">systemctl list-units</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出服务的依赖关系</span></span><br><span class="line">systemctl list-dependencies &lt;servicename&gt;</span><br></pre></td></tr></table></figure>



<h2 id="电源相关"><a href="#电源相关" class="headerlink" title="电源相关"></a>电源相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl reboot		<span class="comment"># 重启机器</span></span><br><span class="line">systemctl poweroff		<span class="comment"># 关机</span></span><br><span class="line">systemctl <span class="built_in">suspend</span>		<span class="comment"># 挂起 - 睡眠 - 保存在內存</span></span><br><span class="line">systemctl hibernate		<span class="comment"># 休眠 - 断电 - 保存在硬盘</span></span><br><span class="line">systemctl hybrid-sleep		<span class="comment"># 混合休眠模式（同时休眠到硬盘并挂起）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统引导时间</span></span><br><span class="line">systemd-analyze time		<span class="comment"># 仅显示时间</span></span><br><span class="line">systemd-analyze blame		<span class="comment"># 显示每个进程消耗时间</span></span><br><span class="line">systemd-analyze plot		<span class="comment"># 生成网页</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>systemctl</tag>
      </tags>
  </entry>
</search>
